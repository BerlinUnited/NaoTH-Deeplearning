#loc1 = loc("-":3:35)
module attributes {tf.versions = {bad_consumers = [], min_consumer = 12 : i32, producer = 987 : i32}, tf_saved_model.semantics}  {
  func @__inference_predict_40790(%arg0: tensor<1x224x224x3xf32> {tf._user_specified_name = "args_0", tf_saved_model.index_path = [0]} loc("-":3:35)) -> (tensor<1x1000xf32> {tf_saved_model.index_path = []}) attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<1x224x224x3>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful, tf_saved_model.exported_names = ["predict"]} {
    %0 = mhlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc2)
    %1 = mhlo.constant dense<0xFF800000> : tensor<f32> loc(#loc3)
    %2 = mhlo.constant dense<5.000000e-01> : tensor<1x1000xf32> loc(#loc4)
    %3 = mhlo.constant dense<4.900000e+01> : tensor<1x1280xf32> loc(#loc5)
    %4 = mhlo.constant dense<6.000000e+00> : tensor<f32> loc(#loc2)
    %5 = mhlo.constant dense<5.000000e-01> : tensor<3x3x1x960xf32> loc(#loc6)
    %6 = mhlo.constant dense<5.000000e-01> : tensor<3x3x1x576xf32> loc(#loc7)
    %7 = mhlo.constant dense<5.000000e-01> : tensor<3x3x1x384xf32> loc(#loc8)
    %8 = mhlo.constant dense<5.000000e-01> : tensor<3x3x1x192xf32> loc(#loc9)
    %9 = mhlo.constant dense<5.000000e-01> : tensor<3x3x1x144xf32> loc(#loc10)
    %10 = mhlo.constant dense<5.000000e-01> : tensor<3x3x1x96xf32> loc(#loc11)
    %11 = mhlo.constant dense<5.000000e-01> : tensor<3x3x1x32xf32> loc(#loc12)
    %12 = mhlo.constant dense<5.000000e-01> : tensor<3x3x3x32xf32> loc(#loc0)
    %13 = mhlo.constant dense<5.000000e-01> : tensor<32xf32> loc(#loc0)
    %14 = mhlo.constant dense<5.000000e-01> : tensor<1x1x32x16xf32> loc(#loc0)
    %15 = mhlo.constant dense<5.000000e-01> : tensor<16xf32> loc(#loc0)
    %16 = mhlo.constant dense<5.000000e-01> : tensor<1x1x16x96xf32> loc(#loc0)
    %17 = mhlo.constant dense<5.000000e-01> : tensor<96xf32> loc(#loc0)
    %18 = mhlo.constant dense<5.000000e-01> : tensor<1x1x96x24xf32> loc(#loc0)
    %19 = mhlo.constant dense<5.000000e-01> : tensor<24xf32> loc(#loc0)
    %20 = mhlo.constant dense<5.000000e-01> : tensor<1x1x24x144xf32> loc(#loc0)
    %21 = mhlo.constant dense<5.000000e-01> : tensor<144xf32> loc(#loc0)
    %22 = mhlo.constant dense<5.000000e-01> : tensor<1x1x144x24xf32> loc(#loc0)
    %23 = mhlo.constant dense<5.000000e-01> : tensor<1x1x144x32xf32> loc(#loc0)
    %24 = mhlo.constant dense<5.000000e-01> : tensor<1x1x32x192xf32> loc(#loc0)
    %25 = mhlo.constant dense<5.000000e-01> : tensor<192xf32> loc(#loc0)
    %26 = mhlo.constant dense<5.000000e-01> : tensor<1x1x192x32xf32> loc(#loc0)
    %27 = mhlo.constant dense<5.000000e-01> : tensor<1x1x192x64xf32> loc(#loc0)
    %28 = mhlo.constant dense<5.000000e-01> : tensor<64xf32> loc(#loc0)
    %29 = mhlo.constant dense<5.000000e-01> : tensor<1x1x64x384xf32> loc(#loc0)
    %30 = mhlo.constant dense<5.000000e-01> : tensor<384xf32> loc(#loc0)
    %31 = mhlo.constant dense<5.000000e-01> : tensor<1x1x384x64xf32> loc(#loc0)
    %32 = mhlo.constant dense<5.000000e-01> : tensor<1x1x384x96xf32> loc(#loc0)
    %33 = mhlo.constant dense<5.000000e-01> : tensor<1x1x96x576xf32> loc(#loc0)
    %34 = mhlo.constant dense<5.000000e-01> : tensor<576xf32> loc(#loc0)
    %35 = mhlo.constant dense<5.000000e-01> : tensor<1x1x576x96xf32> loc(#loc0)
    %36 = mhlo.constant dense<5.000000e-01> : tensor<1x1x576x160xf32> loc(#loc0)
    %37 = mhlo.constant dense<5.000000e-01> : tensor<160xf32> loc(#loc0)
    %38 = mhlo.constant dense<5.000000e-01> : tensor<1x1x160x960xf32> loc(#loc0)
    %39 = mhlo.constant dense<5.000000e-01> : tensor<960xf32> loc(#loc0)
    %40 = mhlo.constant dense<5.000000e-01> : tensor<1x1x960x160xf32> loc(#loc0)
    %41 = mhlo.constant dense<5.000000e-01> : tensor<1x1x960x320xf32> loc(#loc0)
    %42 = mhlo.constant dense<5.000000e-01> : tensor<320xf32> loc(#loc0)
    %43 = mhlo.constant dense<5.000000e-01> : tensor<1x1x320x1280xf32> loc(#loc0)
    %44 = mhlo.constant dense<5.000000e-01> : tensor<1280xf32> loc(#loc0)
    %45 = mhlo.constant dense<5.000000e-01> : tensor<1280x1000xf32> loc(#loc0)
    %46 = mhlo.convolution(%arg0, %12) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [2, 2], pad = [[0, 1], [0, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x224x224x3xf32>, tensor<3x3x3x32xf32>) -> tensor<1x112x112x32xf32> loc(#loc13)
    %47 = "mhlo.batch_norm_inference"(%46, %13, %13, %13, %13) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> tensor<1x112x112x32xf32> loc(#loc14)
    %48 = "mhlo.clamp"(%0, %47, %4) : (tensor<f32>, tensor<1x112x112x32xf32>, tensor<f32>) -> tensor<1x112x112x32xf32> loc(#loc2)
    %49 = mhlo.convolution(%48, %11) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 32 : i64} : (tensor<1x112x112x32xf32>, tensor<3x3x1x32xf32>) -> tensor<1x112x112x32xf32> loc(#loc12)
    %50 = "mhlo.batch_norm_inference"(%49, %13, %13, %13, %13) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> tensor<1x112x112x32xf32> loc(#loc15)
    %51 = "mhlo.clamp"(%0, %50, %4) : (tensor<f32>, tensor<1x112x112x32xf32>, tensor<f32>) -> tensor<1x112x112x32xf32> loc(#loc16)
    %52 = mhlo.convolution(%51, %14) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x112x112x32xf32>, tensor<1x1x32x16xf32>) -> tensor<1x112x112x16xf32> loc(#loc17)
    %53 = "mhlo.batch_norm_inference"(%52, %15, %15, %15, %15) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x112x112x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> tensor<1x112x112x16xf32> loc(#loc18)
    %54 = mhlo.convolution(%53, %16) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x112x112x16xf32>, tensor<1x1x16x96xf32>) -> tensor<1x112x112x96xf32> loc(#loc19)
    %55 = "mhlo.batch_norm_inference"(%54, %17, %17, %17, %17) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x112x112x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> tensor<1x112x112x96xf32> loc(#loc20)
    %56 = "mhlo.clamp"(%0, %55, %4) : (tensor<f32>, tensor<1x112x112x96xf32>, tensor<f32>) -> tensor<1x112x112x96xf32> loc(#loc21)
    %57 = "mhlo.pad"(%56, %0) {edge_padding_high = dense<[0, 1, 1, 0]> : tensor<4xi64>, edge_padding_low = dense<0> : tensor<4xi64>, interior_padding = dense<0> : tensor<4xi64>} : (tensor<1x112x112x96xf32>, tensor<f32>) -> tensor<1x113x113x96xf32> loc(#loc22)
    %58 = mhlo.convolution(%57, %10) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [2, 2], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 96 : i64} : (tensor<1x113x113x96xf32>, tensor<3x3x1x96xf32>) -> tensor<1x56x56x96xf32> loc(#loc11)
    %59 = "mhlo.batch_norm_inference"(%58, %17, %17, %17, %17) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x56x56x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> tensor<1x56x56x96xf32> loc(#loc23)
    %60 = "mhlo.clamp"(%0, %59, %4) : (tensor<f32>, tensor<1x56x56x96xf32>, tensor<f32>) -> tensor<1x56x56x96xf32> loc(#loc24)
    %61 = mhlo.convolution(%60, %18) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x56x56x96xf32>, tensor<1x1x96x24xf32>) -> tensor<1x56x56x24xf32> loc(#loc25)
    %62 = "mhlo.batch_norm_inference"(%61, %19, %19, %19, %19) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> tensor<1x56x56x24xf32> loc(#loc26)
    %63 = mhlo.convolution(%62, %20) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<1x56x56x144xf32> loc(#loc27)
    %64 = "mhlo.batch_norm_inference"(%63, %21, %21, %21, %21) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> tensor<1x56x56x144xf32> loc(#loc28)
    %65 = "mhlo.clamp"(%0, %64, %4) : (tensor<f32>, tensor<1x56x56x144xf32>, tensor<f32>) -> tensor<1x56x56x144xf32> loc(#loc29)
    %66 = mhlo.convolution(%65, %9) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 144 : i64} : (tensor<1x56x56x144xf32>, tensor<3x3x1x144xf32>) -> tensor<1x56x56x144xf32> loc(#loc10)
    %67 = "mhlo.batch_norm_inference"(%66, %21, %21, %21, %21) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> tensor<1x56x56x144xf32> loc(#loc30)
    %68 = "mhlo.clamp"(%0, %67, %4) : (tensor<f32>, tensor<1x56x56x144xf32>, tensor<f32>) -> tensor<1x56x56x144xf32> loc(#loc31)
    %69 = mhlo.convolution(%68, %22) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x56x56x144xf32>, tensor<1x1x144x24xf32>) -> tensor<1x56x56x24xf32> loc(#loc32)
    %70 = "mhlo.batch_norm_inference"(%69, %19, %19, %19, %19) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> tensor<1x56x56x24xf32> loc(#loc33)
    %71 = mhlo.add %62, %70 : tensor<1x56x56x24xf32> loc(#loc34)
    %72 = mhlo.convolution(%71, %20) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<1x56x56x144xf32> loc(#loc35)
    %73 = "mhlo.batch_norm_inference"(%72, %21, %21, %21, %21) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> tensor<1x56x56x144xf32> loc(#loc36)
    %74 = "mhlo.clamp"(%0, %73, %4) : (tensor<f32>, tensor<1x56x56x144xf32>, tensor<f32>) -> tensor<1x56x56x144xf32> loc(#loc37)
    %75 = "mhlo.pad"(%74, %0) {edge_padding_high = dense<[0, 1, 1, 0]> : tensor<4xi64>, edge_padding_low = dense<0> : tensor<4xi64>, interior_padding = dense<0> : tensor<4xi64>} : (tensor<1x56x56x144xf32>, tensor<f32>) -> tensor<1x57x57x144xf32> loc(#loc38)
    %76 = mhlo.convolution(%75, %9) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [2, 2], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 144 : i64} : (tensor<1x57x57x144xf32>, tensor<3x3x1x144xf32>) -> tensor<1x28x28x144xf32> loc(#loc39)
    %77 = "mhlo.batch_norm_inference"(%76, %21, %21, %21, %21) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x28x28x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> tensor<1x28x28x144xf32> loc(#loc40)
    %78 = "mhlo.clamp"(%0, %77, %4) : (tensor<f32>, tensor<1x28x28x144xf32>, tensor<f32>) -> tensor<1x28x28x144xf32> loc(#loc41)
    %79 = mhlo.convolution(%78, %23) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x28x28x144xf32>, tensor<1x1x144x32xf32>) -> tensor<1x28x28x32xf32> loc(#loc42)
    %80 = "mhlo.batch_norm_inference"(%79, %13, %13, %13, %13) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> tensor<1x28x28x32xf32> loc(#loc43)
    %81 = mhlo.convolution(%80, %24) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<1x28x28x192xf32> loc(#loc44)
    %82 = "mhlo.batch_norm_inference"(%81, %25, %25, %25, %25) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> tensor<1x28x28x192xf32> loc(#loc45)
    %83 = "mhlo.clamp"(%0, %82, %4) : (tensor<f32>, tensor<1x28x28x192xf32>, tensor<f32>) -> tensor<1x28x28x192xf32> loc(#loc46)
    %84 = mhlo.convolution(%83, %8) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 192 : i64} : (tensor<1x28x28x192xf32>, tensor<3x3x1x192xf32>) -> tensor<1x28x28x192xf32> loc(#loc9)
    %85 = "mhlo.batch_norm_inference"(%84, %25, %25, %25, %25) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> tensor<1x28x28x192xf32> loc(#loc47)
    %86 = "mhlo.clamp"(%0, %85, %4) : (tensor<f32>, tensor<1x28x28x192xf32>, tensor<f32>) -> tensor<1x28x28x192xf32> loc(#loc48)
    %87 = mhlo.convolution(%86, %26) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<1x28x28x32xf32> loc(#loc49)
    %88 = "mhlo.batch_norm_inference"(%87, %13, %13, %13, %13) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> tensor<1x28x28x32xf32> loc(#loc50)
    %89 = mhlo.add %80, %88 : tensor<1x28x28x32xf32> loc(#loc51)
    %90 = mhlo.convolution(%89, %24) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<1x28x28x192xf32> loc(#loc52)
    %91 = "mhlo.batch_norm_inference"(%90, %25, %25, %25, %25) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> tensor<1x28x28x192xf32> loc(#loc53)
    %92 = "mhlo.clamp"(%0, %91, %4) : (tensor<f32>, tensor<1x28x28x192xf32>, tensor<f32>) -> tensor<1x28x28x192xf32> loc(#loc54)
    %93 = mhlo.convolution(%92, %8) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 192 : i64} : (tensor<1x28x28x192xf32>, tensor<3x3x1x192xf32>) -> tensor<1x28x28x192xf32> loc(#loc55)
    %94 = "mhlo.batch_norm_inference"(%93, %25, %25, %25, %25) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> tensor<1x28x28x192xf32> loc(#loc56)
    %95 = "mhlo.clamp"(%0, %94, %4) : (tensor<f32>, tensor<1x28x28x192xf32>, tensor<f32>) -> tensor<1x28x28x192xf32> loc(#loc57)
    %96 = mhlo.convolution(%95, %26) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<1x28x28x32xf32> loc(#loc58)
    %97 = "mhlo.batch_norm_inference"(%96, %13, %13, %13, %13) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> tensor<1x28x28x32xf32> loc(#loc59)
    %98 = mhlo.add %89, %97 : tensor<1x28x28x32xf32> loc(#loc60)
    %99 = mhlo.convolution(%98, %24) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<1x28x28x192xf32> loc(#loc61)
    %100 = "mhlo.batch_norm_inference"(%99, %25, %25, %25, %25) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> tensor<1x28x28x192xf32> loc(#loc62)
    %101 = "mhlo.clamp"(%0, %100, %4) : (tensor<f32>, tensor<1x28x28x192xf32>, tensor<f32>) -> tensor<1x28x28x192xf32> loc(#loc63)
    %102 = "mhlo.pad"(%101, %0) {edge_padding_high = dense<[0, 1, 1, 0]> : tensor<4xi64>, edge_padding_low = dense<0> : tensor<4xi64>, interior_padding = dense<0> : tensor<4xi64>} : (tensor<1x28x28x192xf32>, tensor<f32>) -> tensor<1x29x29x192xf32> loc(#loc64)
    %103 = mhlo.convolution(%102, %8) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [2, 2], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 192 : i64} : (tensor<1x29x29x192xf32>, tensor<3x3x1x192xf32>) -> tensor<1x14x14x192xf32> loc(#loc65)
    %104 = "mhlo.batch_norm_inference"(%103, %25, %25, %25, %25) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> tensor<1x14x14x192xf32> loc(#loc66)
    %105 = "mhlo.clamp"(%0, %104, %4) : (tensor<f32>, tensor<1x14x14x192xf32>, tensor<f32>) -> tensor<1x14x14x192xf32> loc(#loc67)
    %106 = mhlo.convolution(%105, %27) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x192xf32>, tensor<1x1x192x64xf32>) -> tensor<1x14x14x64xf32> loc(#loc68)
    %107 = "mhlo.batch_norm_inference"(%106, %28, %28, %28, %28) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> tensor<1x14x14x64xf32> loc(#loc69)
    %108 = mhlo.convolution(%107, %29) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc70)
    %109 = "mhlo.batch_norm_inference"(%108, %30, %30, %30, %30) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> tensor<1x14x14x384xf32> loc(#loc71)
    %110 = "mhlo.clamp"(%0, %109, %4) : (tensor<f32>, tensor<1x14x14x384xf32>, tensor<f32>) -> tensor<1x14x14x384xf32> loc(#loc72)
    %111 = mhlo.convolution(%110, %7) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 384 : i64} : (tensor<1x14x14x384xf32>, tensor<3x3x1x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc8)
    %112 = "mhlo.batch_norm_inference"(%111, %30, %30, %30, %30) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> tensor<1x14x14x384xf32> loc(#loc73)
    %113 = "mhlo.clamp"(%0, %112, %4) : (tensor<f32>, tensor<1x14x14x384xf32>, tensor<f32>) -> tensor<1x14x14x384xf32> loc(#loc74)
    %114 = mhlo.convolution(%113, %31) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<1x14x14x64xf32> loc(#loc75)
    %115 = "mhlo.batch_norm_inference"(%114, %28, %28, %28, %28) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> tensor<1x14x14x64xf32> loc(#loc76)
    %116 = mhlo.add %107, %115 : tensor<1x14x14x64xf32> loc(#loc77)
    %117 = mhlo.convolution(%116, %29) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc78)
    %118 = "mhlo.batch_norm_inference"(%117, %30, %30, %30, %30) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> tensor<1x14x14x384xf32> loc(#loc79)
    %119 = "mhlo.clamp"(%0, %118, %4) : (tensor<f32>, tensor<1x14x14x384xf32>, tensor<f32>) -> tensor<1x14x14x384xf32> loc(#loc80)
    %120 = mhlo.convolution(%119, %7) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 384 : i64} : (tensor<1x14x14x384xf32>, tensor<3x3x1x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc81)
    %121 = "mhlo.batch_norm_inference"(%120, %30, %30, %30, %30) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> tensor<1x14x14x384xf32> loc(#loc82)
    %122 = "mhlo.clamp"(%0, %121, %4) : (tensor<f32>, tensor<1x14x14x384xf32>, tensor<f32>) -> tensor<1x14x14x384xf32> loc(#loc83)
    %123 = mhlo.convolution(%122, %31) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<1x14x14x64xf32> loc(#loc84)
    %124 = "mhlo.batch_norm_inference"(%123, %28, %28, %28, %28) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> tensor<1x14x14x64xf32> loc(#loc85)
    %125 = mhlo.add %116, %124 : tensor<1x14x14x64xf32> loc(#loc86)
    %126 = mhlo.convolution(%125, %29) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc87)
    %127 = "mhlo.batch_norm_inference"(%126, %30, %30, %30, %30) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> tensor<1x14x14x384xf32> loc(#loc88)
    %128 = "mhlo.clamp"(%0, %127, %4) : (tensor<f32>, tensor<1x14x14x384xf32>, tensor<f32>) -> tensor<1x14x14x384xf32> loc(#loc89)
    %129 = mhlo.convolution(%128, %7) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 384 : i64} : (tensor<1x14x14x384xf32>, tensor<3x3x1x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc90)
    %130 = "mhlo.batch_norm_inference"(%129, %30, %30, %30, %30) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> tensor<1x14x14x384xf32> loc(#loc91)
    %131 = "mhlo.clamp"(%0, %130, %4) : (tensor<f32>, tensor<1x14x14x384xf32>, tensor<f32>) -> tensor<1x14x14x384xf32> loc(#loc92)
    %132 = mhlo.convolution(%131, %31) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<1x14x14x64xf32> loc(#loc93)
    %133 = "mhlo.batch_norm_inference"(%132, %28, %28, %28, %28) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> tensor<1x14x14x64xf32> loc(#loc94)
    %134 = mhlo.add %125, %133 : tensor<1x14x14x64xf32> loc(#loc95)
    %135 = mhlo.convolution(%134, %29) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc96)
    %136 = "mhlo.batch_norm_inference"(%135, %30, %30, %30, %30) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> tensor<1x14x14x384xf32> loc(#loc97)
    %137 = "mhlo.clamp"(%0, %136, %4) : (tensor<f32>, tensor<1x14x14x384xf32>, tensor<f32>) -> tensor<1x14x14x384xf32> loc(#loc98)
    %138 = mhlo.convolution(%137, %7) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 384 : i64} : (tensor<1x14x14x384xf32>, tensor<3x3x1x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc99)
    %139 = "mhlo.batch_norm_inference"(%138, %30, %30, %30, %30) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> tensor<1x14x14x384xf32> loc(#loc100)
    %140 = "mhlo.clamp"(%0, %139, %4) : (tensor<f32>, tensor<1x14x14x384xf32>, tensor<f32>) -> tensor<1x14x14x384xf32> loc(#loc101)
    %141 = mhlo.convolution(%140, %32) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x384xf32>, tensor<1x1x384x96xf32>) -> tensor<1x14x14x96xf32> loc(#loc102)
    %142 = "mhlo.batch_norm_inference"(%141, %17, %17, %17, %17) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> tensor<1x14x14x96xf32> loc(#loc103)
    %143 = mhlo.convolution(%142, %33) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<1x14x14x576xf32> loc(#loc104)
    %144 = "mhlo.batch_norm_inference"(%143, %34, %34, %34, %34) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> tensor<1x14x14x576xf32> loc(#loc105)
    %145 = "mhlo.clamp"(%0, %144, %4) : (tensor<f32>, tensor<1x14x14x576xf32>, tensor<f32>) -> tensor<1x14x14x576xf32> loc(#loc106)
    %146 = mhlo.convolution(%145, %6) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 576 : i64} : (tensor<1x14x14x576xf32>, tensor<3x3x1x576xf32>) -> tensor<1x14x14x576xf32> loc(#loc7)
    %147 = "mhlo.batch_norm_inference"(%146, %34, %34, %34, %34) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> tensor<1x14x14x576xf32> loc(#loc107)
    %148 = "mhlo.clamp"(%0, %147, %4) : (tensor<f32>, tensor<1x14x14x576xf32>, tensor<f32>) -> tensor<1x14x14x576xf32> loc(#loc108)
    %149 = mhlo.convolution(%148, %35) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<1x14x14x96xf32> loc(#loc109)
    %150 = "mhlo.batch_norm_inference"(%149, %17, %17, %17, %17) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> tensor<1x14x14x96xf32> loc(#loc110)
    %151 = mhlo.add %142, %150 : tensor<1x14x14x96xf32> loc(#loc111)
    %152 = mhlo.convolution(%151, %33) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<1x14x14x576xf32> loc(#loc112)
    %153 = "mhlo.batch_norm_inference"(%152, %34, %34, %34, %34) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> tensor<1x14x14x576xf32> loc(#loc113)
    %154 = "mhlo.clamp"(%0, %153, %4) : (tensor<f32>, tensor<1x14x14x576xf32>, tensor<f32>) -> tensor<1x14x14x576xf32> loc(#loc114)
    %155 = mhlo.convolution(%154, %6) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 576 : i64} : (tensor<1x14x14x576xf32>, tensor<3x3x1x576xf32>) -> tensor<1x14x14x576xf32> loc(#loc115)
    %156 = "mhlo.batch_norm_inference"(%155, %34, %34, %34, %34) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> tensor<1x14x14x576xf32> loc(#loc116)
    %157 = "mhlo.clamp"(%0, %156, %4) : (tensor<f32>, tensor<1x14x14x576xf32>, tensor<f32>) -> tensor<1x14x14x576xf32> loc(#loc117)
    %158 = mhlo.convolution(%157, %35) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<1x14x14x96xf32> loc(#loc118)
    %159 = "mhlo.batch_norm_inference"(%158, %17, %17, %17, %17) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> tensor<1x14x14x96xf32> loc(#loc119)
    %160 = mhlo.add %151, %159 : tensor<1x14x14x96xf32> loc(#loc120)
    %161 = mhlo.convolution(%160, %33) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<1x14x14x576xf32> loc(#loc121)
    %162 = "mhlo.batch_norm_inference"(%161, %34, %34, %34, %34) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> tensor<1x14x14x576xf32> loc(#loc122)
    %163 = "mhlo.clamp"(%0, %162, %4) : (tensor<f32>, tensor<1x14x14x576xf32>, tensor<f32>) -> tensor<1x14x14x576xf32> loc(#loc123)
    %164 = "mhlo.pad"(%163, %0) {edge_padding_high = dense<[0, 1, 1, 0]> : tensor<4xi64>, edge_padding_low = dense<0> : tensor<4xi64>, interior_padding = dense<0> : tensor<4xi64>} : (tensor<1x14x14x576xf32>, tensor<f32>) -> tensor<1x15x15x576xf32> loc(#loc124)
    %165 = mhlo.convolution(%164, %6) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [2, 2], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 576 : i64} : (tensor<1x15x15x576xf32>, tensor<3x3x1x576xf32>) -> tensor<1x7x7x576xf32> loc(#loc125)
    %166 = "mhlo.batch_norm_inference"(%165, %34, %34, %34, %34) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x7x7x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> tensor<1x7x7x576xf32> loc(#loc126)
    %167 = "mhlo.clamp"(%0, %166, %4) : (tensor<f32>, tensor<1x7x7x576xf32>, tensor<f32>) -> tensor<1x7x7x576xf32> loc(#loc127)
    %168 = mhlo.convolution(%167, %36) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x7x7x576xf32>, tensor<1x1x576x160xf32>) -> tensor<1x7x7x160xf32> loc(#loc128)
    %169 = "mhlo.batch_norm_inference"(%168, %37, %37, %37, %37) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> tensor<1x7x7x160xf32> loc(#loc129)
    %170 = mhlo.convolution(%169, %38) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc130)
    %171 = "mhlo.batch_norm_inference"(%170, %39, %39, %39, %39) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> tensor<1x7x7x960xf32> loc(#loc131)
    %172 = "mhlo.clamp"(%0, %171, %4) : (tensor<f32>, tensor<1x7x7x960xf32>, tensor<f32>) -> tensor<1x7x7x960xf32> loc(#loc132)
    %173 = mhlo.convolution(%172, %5) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 960 : i64} : (tensor<1x7x7x960xf32>, tensor<3x3x1x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc6)
    %174 = "mhlo.batch_norm_inference"(%173, %39, %39, %39, %39) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> tensor<1x7x7x960xf32> loc(#loc133)
    %175 = "mhlo.clamp"(%0, %174, %4) : (tensor<f32>, tensor<1x7x7x960xf32>, tensor<f32>) -> tensor<1x7x7x960xf32> loc(#loc134)
    %176 = mhlo.convolution(%175, %40) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<1x7x7x160xf32> loc(#loc135)
    %177 = "mhlo.batch_norm_inference"(%176, %37, %37, %37, %37) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> tensor<1x7x7x160xf32> loc(#loc136)
    %178 = mhlo.add %169, %177 : tensor<1x7x7x160xf32> loc(#loc137)
    %179 = mhlo.convolution(%178, %38) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc138)
    %180 = "mhlo.batch_norm_inference"(%179, %39, %39, %39, %39) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> tensor<1x7x7x960xf32> loc(#loc139)
    %181 = "mhlo.clamp"(%0, %180, %4) : (tensor<f32>, tensor<1x7x7x960xf32>, tensor<f32>) -> tensor<1x7x7x960xf32> loc(#loc140)
    %182 = mhlo.convolution(%181, %5) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 960 : i64} : (tensor<1x7x7x960xf32>, tensor<3x3x1x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc141)
    %183 = "mhlo.batch_norm_inference"(%182, %39, %39, %39, %39) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> tensor<1x7x7x960xf32> loc(#loc142)
    %184 = "mhlo.clamp"(%0, %183, %4) : (tensor<f32>, tensor<1x7x7x960xf32>, tensor<f32>) -> tensor<1x7x7x960xf32> loc(#loc143)
    %185 = mhlo.convolution(%184, %40) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<1x7x7x160xf32> loc(#loc144)
    %186 = "mhlo.batch_norm_inference"(%185, %37, %37, %37, %37) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> tensor<1x7x7x160xf32> loc(#loc145)
    %187 = mhlo.add %178, %186 : tensor<1x7x7x160xf32> loc(#loc146)
    %188 = mhlo.convolution(%187, %38) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc147)
    %189 = "mhlo.batch_norm_inference"(%188, %39, %39, %39, %39) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> tensor<1x7x7x960xf32> loc(#loc148)
    %190 = "mhlo.clamp"(%0, %189, %4) : (tensor<f32>, tensor<1x7x7x960xf32>, tensor<f32>) -> tensor<1x7x7x960xf32> loc(#loc149)
    %191 = mhlo.convolution(%190, %5) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[1, 1], [1, 1]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 960 : i64} : (tensor<1x7x7x960xf32>, tensor<3x3x1x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc150)
    %192 = "mhlo.batch_norm_inference"(%191, %39, %39, %39, %39) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> tensor<1x7x7x960xf32> loc(#loc151)
    %193 = "mhlo.clamp"(%0, %192, %4) : (tensor<f32>, tensor<1x7x7x960xf32>, tensor<f32>) -> tensor<1x7x7x960xf32> loc(#loc152)
    %194 = mhlo.convolution(%193, %41) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x7x7x960xf32>, tensor<1x1x960x320xf32>) -> tensor<1x7x7x320xf32> loc(#loc153)
    %195 = "mhlo.batch_norm_inference"(%194, %42, %42, %42, %42) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x7x7x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>) -> tensor<1x7x7x320xf32> loc(#loc154)
    %196 = mhlo.convolution(%195, %43) dim_numbers = [b, 0, 1, f]x[0, 1, i, o]->[b, 0, 1, f], window = {stride = [1, 1], pad = [[0, 0], [0, 0]], rhs_dilate = [1, 1]} {batch_group_count = 1 : i64, feature_group_count = 1 : i64} : (tensor<1x7x7x320xf32>, tensor<1x1x320x1280xf32>) -> tensor<1x7x7x1280xf32> loc(#loc155)
    %197 = "mhlo.batch_norm_inference"(%196, %44, %44, %44, %44) {epsilon = 1.000000e-03 : f32, feature_index = 3 : i64} : (tensor<1x7x7x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>) -> tensor<1x7x7x1280xf32> loc(#loc156)
    %198 = "mhlo.clamp"(%0, %197, %4) : (tensor<f32>, tensor<1x7x7x1280xf32>, tensor<f32>) -> tensor<1x7x7x1280xf32> loc(#loc157)
    %199 = mhlo.reduce %198, %0 applies mhlo.add across dimensions = [1, 2] : (tensor<1x7x7x1280xf32>, tensor<f32>) -> tensor<1x1280xf32> loc(#loc5)
    %200 = mhlo.divide %199, %3 : tensor<1x1280xf32> loc(#loc5)
    %201 = "mhlo.dot"(%200, %45) : (tensor<1x1280xf32>, tensor<1280x1000xf32>) -> tensor<1x1000xf32> loc(#loc158)
    %202 = mhlo.add %201, %2 : tensor<1x1000xf32> loc(#loc4)
    %203 = mhlo.reduce %202, %1 applies mhlo.maximum across dimensions = [1] : (tensor<1x1000xf32>, tensor<f32>) -> tensor<1xf32> loc(#loc3)
    %204 = "mhlo.reshape"(%203) : (tensor<1xf32>) -> tensor<1x1xf32> loc(#loc3)
    %205 = "mhlo.broadcast_in_dim"(%204) {broadcast_dimensions = dense<[0, 1]> : tensor<2xi64>} : (tensor<1x1xf32>) -> tensor<1x1000xf32> loc(#loc3)
    %206 = mhlo.subtract %202, %205 : tensor<1x1000xf32> loc(#loc3)
    %207 = "mhlo.exponential"(%206) : (tensor<1x1000xf32>) -> tensor<1x1000xf32> loc(#loc3)
    %208 = mhlo.reduce %207, %0 applies mhlo.add across dimensions = [1] : (tensor<1x1000xf32>, tensor<f32>) -> tensor<1xf32> loc(#loc3)
    %209 = "mhlo.reshape"(%208) : (tensor<1xf32>) -> tensor<1x1xf32> loc(#loc3)
    %210 = "mhlo.broadcast_in_dim"(%209) {broadcast_dimensions = dense<[0, 1]> : tensor<2xi64>} : (tensor<1x1xf32>) -> tensor<1x1000xf32> loc(#loc3)
    %211 = mhlo.divide %207, %210 : tensor<1x1000xf32> loc(#loc3)
    return %211 : tensor<1x1000xf32> loc(#loc0)
  } loc(#loc0)
} loc(#loc0)
#loc0 = loc(unknown)
#loc2 = loc(fused["Relu6:", "Conv1_relu/Relu6@__inference_predict_4079"])
#loc3 = loc(fused["Softmax:", "predictions/Softmax@__inference_predict_4079"])
#loc4 = loc(fused["BiasAdd:", "predictions/BiasAdd@__inference_predict_4079"])
#loc5 = loc(fused["Mean:", "global_average_pooling2d/Mean@__inference_predict_4079"])
#loc6 = loc(fused["DepthwiseConv2dNative:", "block_14_depthwise/depthwise@__inference_predict_4079"])
#loc7 = loc(fused["DepthwiseConv2dNative:", "block_11_depthwise/depthwise@__inference_predict_4079"])
#loc8 = loc(fused["DepthwiseConv2dNative:", "block_7_depthwise/depthwise@__inference_predict_4079"])
#loc9 = loc(fused["DepthwiseConv2dNative:", "block_4_depthwise/depthwise@__inference_predict_4079"])
#loc10 = loc(fused["DepthwiseConv2dNative:", "block_2_depthwise/depthwise@__inference_predict_4079"])
#loc11 = loc(fused["DepthwiseConv2dNative:", "block_1_depthwise/depthwise@__inference_predict_4079"])
#loc12 = loc(fused["DepthwiseConv2dNative:", "expanded_conv_depthwise/depthwise@__inference_predict_4079"])
#loc13 = loc(fused["Conv2D:", "Conv1/Conv2D@__inference_predict_4079"])
#loc14 = loc(fused["FusedBatchNormV3:", "bn_Conv1/FusedBatchNormV3@__inference_predict_4079"])
#loc15 = loc(fused["FusedBatchNormV3:", "expanded_conv_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc16 = loc(fused["Relu6:", "expanded_conv_depthwise_relu/Relu6@__inference_predict_4079"])
#loc17 = loc(fused["Conv2D:", "expanded_conv_project/Conv2D@__inference_predict_4079"])
#loc18 = loc(fused["FusedBatchNormV3:", "expanded_conv_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc19 = loc(fused["Conv2D:", "block_1_expand/Conv2D@__inference_predict_4079"])
#loc20 = loc(fused["FusedBatchNormV3:", "block_1_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc21 = loc(fused["Relu6:", "block_1_expand_relu/Relu6@__inference_predict_4079"])
#loc22 = loc(fused["Pad:", "block_1_pad/Pad@__inference_predict_4079"])
#loc23 = loc(fused["FusedBatchNormV3:", "block_1_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc24 = loc(fused["Relu6:", "block_1_depthwise_relu/Relu6@__inference_predict_4079"])
#loc25 = loc(fused["Conv2D:", "block_1_project/Conv2D@__inference_predict_4079"])
#loc26 = loc(fused["FusedBatchNormV3:", "block_1_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc27 = loc(fused["Conv2D:", "block_2_expand/Conv2D@__inference_predict_4079"])
#loc28 = loc(fused["FusedBatchNormV3:", "block_2_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc29 = loc(fused["Relu6:", "block_2_expand_relu/Relu6@__inference_predict_4079"])
#loc30 = loc(fused["FusedBatchNormV3:", "block_2_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc31 = loc(fused["Relu6:", "block_2_depthwise_relu/Relu6@__inference_predict_4079"])
#loc32 = loc(fused["Conv2D:", "block_2_project/Conv2D@__inference_predict_4079"])
#loc33 = loc(fused["FusedBatchNormV3:", "block_2_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc34 = loc(fused["AddV2:", "block_2_add/add@__inference_predict_4079"])
#loc35 = loc(fused["Conv2D:", "block_3_expand/Conv2D@__inference_predict_4079"])
#loc36 = loc(fused["FusedBatchNormV3:", "block_3_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc37 = loc(fused["Relu6:", "block_3_expand_relu/Relu6@__inference_predict_4079"])
#loc38 = loc(fused["Pad:", "block_3_pad/Pad@__inference_predict_4079"])
#loc39 = loc(fused["DepthwiseConv2dNative:", "block_3_depthwise/depthwise@__inference_predict_4079"])
#loc40 = loc(fused["FusedBatchNormV3:", "block_3_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc41 = loc(fused["Relu6:", "block_3_depthwise_relu/Relu6@__inference_predict_4079"])
#loc42 = loc(fused["Conv2D:", "block_3_project/Conv2D@__inference_predict_4079"])
#loc43 = loc(fused["FusedBatchNormV3:", "block_3_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc44 = loc(fused["Conv2D:", "block_4_expand/Conv2D@__inference_predict_4079"])
#loc45 = loc(fused["FusedBatchNormV3:", "block_4_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc46 = loc(fused["Relu6:", "block_4_expand_relu/Relu6@__inference_predict_4079"])
#loc47 = loc(fused["FusedBatchNormV3:", "block_4_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc48 = loc(fused["Relu6:", "block_4_depthwise_relu/Relu6@__inference_predict_4079"])
#loc49 = loc(fused["Conv2D:", "block_4_project/Conv2D@__inference_predict_4079"])
#loc50 = loc(fused["FusedBatchNormV3:", "block_4_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc51 = loc(fused["AddV2:", "block_4_add/add@__inference_predict_4079"])
#loc52 = loc(fused["Conv2D:", "block_5_expand/Conv2D@__inference_predict_4079"])
#loc53 = loc(fused["FusedBatchNormV3:", "block_5_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc54 = loc(fused["Relu6:", "block_5_expand_relu/Relu6@__inference_predict_4079"])
#loc55 = loc(fused["DepthwiseConv2dNative:", "block_5_depthwise/depthwise@__inference_predict_4079"])
#loc56 = loc(fused["FusedBatchNormV3:", "block_5_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc57 = loc(fused["Relu6:", "block_5_depthwise_relu/Relu6@__inference_predict_4079"])
#loc58 = loc(fused["Conv2D:", "block_5_project/Conv2D@__inference_predict_4079"])
#loc59 = loc(fused["FusedBatchNormV3:", "block_5_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc60 = loc(fused["AddV2:", "block_5_add/add@__inference_predict_4079"])
#loc61 = loc(fused["Conv2D:", "block_6_expand/Conv2D@__inference_predict_4079"])
#loc62 = loc(fused["FusedBatchNormV3:", "block_6_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc63 = loc(fused["Relu6:", "block_6_expand_relu/Relu6@__inference_predict_4079"])
#loc64 = loc(fused["Pad:", "block_6_pad/Pad@__inference_predict_4079"])
#loc65 = loc(fused["DepthwiseConv2dNative:", "block_6_depthwise/depthwise@__inference_predict_4079"])
#loc66 = loc(fused["FusedBatchNormV3:", "block_6_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc67 = loc(fused["Relu6:", "block_6_depthwise_relu/Relu6@__inference_predict_4079"])
#loc68 = loc(fused["Conv2D:", "block_6_project/Conv2D@__inference_predict_4079"])
#loc69 = loc(fused["FusedBatchNormV3:", "block_6_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc70 = loc(fused["Conv2D:", "block_7_expand/Conv2D@__inference_predict_4079"])
#loc71 = loc(fused["FusedBatchNormV3:", "block_7_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc72 = loc(fused["Relu6:", "block_7_expand_relu/Relu6@__inference_predict_4079"])
#loc73 = loc(fused["FusedBatchNormV3:", "block_7_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc74 = loc(fused["Relu6:", "block_7_depthwise_relu/Relu6@__inference_predict_4079"])
#loc75 = loc(fused["Conv2D:", "block_7_project/Conv2D@__inference_predict_4079"])
#loc76 = loc(fused["FusedBatchNormV3:", "block_7_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc77 = loc(fused["AddV2:", "block_7_add/add@__inference_predict_4079"])
#loc78 = loc(fused["Conv2D:", "block_8_expand/Conv2D@__inference_predict_4079"])
#loc79 = loc(fused["FusedBatchNormV3:", "block_8_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc80 = loc(fused["Relu6:", "block_8_expand_relu/Relu6@__inference_predict_4079"])
#loc81 = loc(fused["DepthwiseConv2dNative:", "block_8_depthwise/depthwise@__inference_predict_4079"])
#loc82 = loc(fused["FusedBatchNormV3:", "block_8_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc83 = loc(fused["Relu6:", "block_8_depthwise_relu/Relu6@__inference_predict_4079"])
#loc84 = loc(fused["Conv2D:", "block_8_project/Conv2D@__inference_predict_4079"])
#loc85 = loc(fused["FusedBatchNormV3:", "block_8_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc86 = loc(fused["AddV2:", "block_8_add/add@__inference_predict_4079"])
#loc87 = loc(fused["Conv2D:", "block_9_expand/Conv2D@__inference_predict_4079"])
#loc88 = loc(fused["FusedBatchNormV3:", "block_9_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc89 = loc(fused["Relu6:", "block_9_expand_relu/Relu6@__inference_predict_4079"])
#loc90 = loc(fused["DepthwiseConv2dNative:", "block_9_depthwise/depthwise@__inference_predict_4079"])
#loc91 = loc(fused["FusedBatchNormV3:", "block_9_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc92 = loc(fused["Relu6:", "block_9_depthwise_relu/Relu6@__inference_predict_4079"])
#loc93 = loc(fused["Conv2D:", "block_9_project/Conv2D@__inference_predict_4079"])
#loc94 = loc(fused["FusedBatchNormV3:", "block_9_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc95 = loc(fused["AddV2:", "block_9_add/add@__inference_predict_4079"])
#loc96 = loc(fused["Conv2D:", "block_10_expand/Conv2D@__inference_predict_4079"])
#loc97 = loc(fused["FusedBatchNormV3:", "block_10_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc98 = loc(fused["Relu6:", "block_10_expand_relu/Relu6@__inference_predict_4079"])
#loc99 = loc(fused["DepthwiseConv2dNative:", "block_10_depthwise/depthwise@__inference_predict_4079"])
#loc100 = loc(fused["FusedBatchNormV3:", "block_10_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc101 = loc(fused["Relu6:", "block_10_depthwise_relu/Relu6@__inference_predict_4079"])
#loc102 = loc(fused["Conv2D:", "block_10_project/Conv2D@__inference_predict_4079"])
#loc103 = loc(fused["FusedBatchNormV3:", "block_10_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc104 = loc(fused["Conv2D:", "block_11_expand/Conv2D@__inference_predict_4079"])
#loc105 = loc(fused["FusedBatchNormV3:", "block_11_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc106 = loc(fused["Relu6:", "block_11_expand_relu/Relu6@__inference_predict_4079"])
#loc107 = loc(fused["FusedBatchNormV3:", "block_11_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc108 = loc(fused["Relu6:", "block_11_depthwise_relu/Relu6@__inference_predict_4079"])
#loc109 = loc(fused["Conv2D:", "block_11_project/Conv2D@__inference_predict_4079"])
#loc110 = loc(fused["FusedBatchNormV3:", "block_11_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc111 = loc(fused["AddV2:", "block_11_add/add@__inference_predict_4079"])
#loc112 = loc(fused["Conv2D:", "block_12_expand/Conv2D@__inference_predict_4079"])
#loc113 = loc(fused["FusedBatchNormV3:", "block_12_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc114 = loc(fused["Relu6:", "block_12_expand_relu/Relu6@__inference_predict_4079"])
#loc115 = loc(fused["DepthwiseConv2dNative:", "block_12_depthwise/depthwise@__inference_predict_4079"])
#loc116 = loc(fused["FusedBatchNormV3:", "block_12_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc117 = loc(fused["Relu6:", "block_12_depthwise_relu/Relu6@__inference_predict_4079"])
#loc118 = loc(fused["Conv2D:", "block_12_project/Conv2D@__inference_predict_4079"])
#loc119 = loc(fused["FusedBatchNormV3:", "block_12_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc120 = loc(fused["AddV2:", "block_12_add/add@__inference_predict_4079"])
#loc121 = loc(fused["Conv2D:", "block_13_expand/Conv2D@__inference_predict_4079"])
#loc122 = loc(fused["FusedBatchNormV3:", "block_13_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc123 = loc(fused["Relu6:", "block_13_expand_relu/Relu6@__inference_predict_4079"])
#loc124 = loc(fused["Pad:", "block_13_pad/Pad@__inference_predict_4079"])
#loc125 = loc(fused["DepthwiseConv2dNative:", "block_13_depthwise/depthwise@__inference_predict_4079"])
#loc126 = loc(fused["FusedBatchNormV3:", "block_13_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc127 = loc(fused["Relu6:", "block_13_depthwise_relu/Relu6@__inference_predict_4079"])
#loc128 = loc(fused["Conv2D:", "block_13_project/Conv2D@__inference_predict_4079"])
#loc129 = loc(fused["FusedBatchNormV3:", "block_13_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc130 = loc(fused["Conv2D:", "block_14_expand/Conv2D@__inference_predict_4079"])
#loc131 = loc(fused["FusedBatchNormV3:", "block_14_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc132 = loc(fused["Relu6:", "block_14_expand_relu/Relu6@__inference_predict_4079"])
#loc133 = loc(fused["FusedBatchNormV3:", "block_14_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc134 = loc(fused["Relu6:", "block_14_depthwise_relu/Relu6@__inference_predict_4079"])
#loc135 = loc(fused["Conv2D:", "block_14_project/Conv2D@__inference_predict_4079"])
#loc136 = loc(fused["FusedBatchNormV3:", "block_14_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc137 = loc(fused["AddV2:", "block_14_add/add@__inference_predict_4079"])
#loc138 = loc(fused["Conv2D:", "block_15_expand/Conv2D@__inference_predict_4079"])
#loc139 = loc(fused["FusedBatchNormV3:", "block_15_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc140 = loc(fused["Relu6:", "block_15_expand_relu/Relu6@__inference_predict_4079"])
#loc141 = loc(fused["DepthwiseConv2dNative:", "block_15_depthwise/depthwise@__inference_predict_4079"])
#loc142 = loc(fused["FusedBatchNormV3:", "block_15_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc143 = loc(fused["Relu6:", "block_15_depthwise_relu/Relu6@__inference_predict_4079"])
#loc144 = loc(fused["Conv2D:", "block_15_project/Conv2D@__inference_predict_4079"])
#loc145 = loc(fused["FusedBatchNormV3:", "block_15_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc146 = loc(fused["AddV2:", "block_15_add/add@__inference_predict_4079"])
#loc147 = loc(fused["Conv2D:", "block_16_expand/Conv2D@__inference_predict_4079"])
#loc148 = loc(fused["FusedBatchNormV3:", "block_16_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc149 = loc(fused["Relu6:", "block_16_expand_relu/Relu6@__inference_predict_4079"])
#loc150 = loc(fused["DepthwiseConv2dNative:", "block_16_depthwise/depthwise@__inference_predict_4079"])
#loc151 = loc(fused["FusedBatchNormV3:", "block_16_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc152 = loc(fused["Relu6:", "block_16_depthwise_relu/Relu6@__inference_predict_4079"])
#loc153 = loc(fused["Conv2D:", "block_16_project/Conv2D@__inference_predict_4079"])
#loc154 = loc(fused["FusedBatchNormV3:", "block_16_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc155 = loc(fused["Conv2D:", "Conv_1/Conv2D@__inference_predict_4079"])
#loc156 = loc(fused["FusedBatchNormV3:", "Conv_1_bn/FusedBatchNormV3@__inference_predict_4079"])
#loc157 = loc(fused["Relu6:", "out_relu/Relu6@__inference_predict_4079"])
#loc158 = loc(fused["MatMul:", "predictions/MatMul@__inference_predict_4079"])
