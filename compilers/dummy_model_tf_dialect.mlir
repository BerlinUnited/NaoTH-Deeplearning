#loc0 = loc(unknown)
module attributes {tf.versions = {bad_consumers = [], min_consumer = 12 : i32, producer = 987 : i32}, tf_saved_model.semantics}  {
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node168___model.layer-1.kernel", tf_saved_model.exported_names = [], type = tensor<3x3x3x32xf32>, value = dense<5.000000e-01> : tensor<3x3x3x32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node176___model.layer-2.gamma", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node177___model.layer-2.beta", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node178___model.layer-2.moving_mean", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node179___model.layer-2.moving_variance", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node192___model.layer-4.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x32x1xf32>, value = dense<5.000000e-01> : tensor<3x3x32x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node200___model.layer-5.gamma", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node201___model.layer-5.beta", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node202___model.layer-5.moving_mean", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node203___model.layer-5.moving_variance", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node216___model.layer-7.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x32x16xf32>, value = dense<5.000000e-01> : tensor<1x1x32x16xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node224___model.layer-8.gamma", tf_saved_model.exported_names = [], type = tensor<16xf32>, value = dense<5.000000e-01> : tensor<16xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node225___model.layer-8.beta", tf_saved_model.exported_names = [], type = tensor<16xf32>, value = dense<5.000000e-01> : tensor<16xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node226___model.layer-8.moving_mean", tf_saved_model.exported_names = [], type = tensor<16xf32>, value = dense<5.000000e-01> : tensor<16xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node227___model.layer-8.moving_variance", tf_saved_model.exported_names = [], type = tensor<16xf32>, value = dense<5.000000e-01> : tensor<16xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node234___model.layer-9.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x16x96xf32>, value = dense<5.000000e-01> : tensor<1x1x16x96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node242___model.layer-10.gamma", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node243___model.layer-10.beta", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node244___model.layer-10.moving_mean", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node245___model.layer-10.moving_variance", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node264___model.layer-13.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x96x1xf32>, value = dense<5.000000e-01> : tensor<3x3x96x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node272___model.layer-14.gamma", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node273___model.layer-14.beta", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node274___model.layer-14.moving_mean", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node275___model.layer-14.moving_variance", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node288___model.layer-16.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x96x24xf32>, value = dense<5.000000e-01> : tensor<1x1x96x24xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node296___model.layer-17.gamma", tf_saved_model.exported_names = [], type = tensor<24xf32>, value = dense<5.000000e-01> : tensor<24xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node297___model.layer-17.beta", tf_saved_model.exported_names = [], type = tensor<24xf32>, value = dense<5.000000e-01> : tensor<24xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node298___model.layer-17.moving_mean", tf_saved_model.exported_names = [], type = tensor<24xf32>, value = dense<5.000000e-01> : tensor<24xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node299___model.layer-17.moving_variance", tf_saved_model.exported_names = [], type = tensor<24xf32>, value = dense<5.000000e-01> : tensor<24xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node306___model.layer-18.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x24x144xf32>, value = dense<5.000000e-01> : tensor<1x1x24x144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node314___model.layer-19.gamma", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node315___model.layer-19.beta", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node316___model.layer-19.moving_mean", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node317___model.layer-19.moving_variance", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node330___model.layer-21.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x144x1xf32>, value = dense<5.000000e-01> : tensor<3x3x144x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node338___model.layer-22.gamma", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node339___model.layer-22.beta", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node340___model.layer-22.moving_mean", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node341___model.layer-22.moving_variance", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node354___model.layer-24.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x144x24xf32>, value = dense<5.000000e-01> : tensor<1x1x144x24xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node362___model.layer-25.gamma", tf_saved_model.exported_names = [], type = tensor<24xf32>, value = dense<5.000000e-01> : tensor<24xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node363___model.layer-25.beta", tf_saved_model.exported_names = [], type = tensor<24xf32>, value = dense<5.000000e-01> : tensor<24xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node364___model.layer-25.moving_mean", tf_saved_model.exported_names = [], type = tensor<24xf32>, value = dense<5.000000e-01> : tensor<24xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node365___model.layer-25.moving_variance", tf_saved_model.exported_names = [], type = tensor<24xf32>, value = dense<5.000000e-01> : tensor<24xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node378___model.layer-27.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x24x144xf32>, value = dense<5.000000e-01> : tensor<1x1x24x144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node386___model.layer-28.gamma", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node387___model.layer-28.beta", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node388___model.layer-28.moving_mean", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node389___model.layer-28.moving_variance", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node408___model.layer-31.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x144x1xf32>, value = dense<5.000000e-01> : tensor<3x3x144x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node416___model.layer-32.gamma", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node417___model.layer-32.beta", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node418___model.layer-32.moving_mean", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node419___model.layer-32.moving_variance", tf_saved_model.exported_names = [], type = tensor<144xf32>, value = dense<5.000000e-01> : tensor<144xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node432___model.layer-34.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x144x32xf32>, value = dense<5.000000e-01> : tensor<1x1x144x32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node440___model.layer-35.gamma", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node441___model.layer-35.beta", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node442___model.layer-35.moving_mean", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node443___model.layer-35.moving_variance", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node450___model.layer-36.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x32x192xf32>, value = dense<5.000000e-01> : tensor<1x1x32x192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node458___model.layer-37.gamma", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node459___model.layer-37.beta", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node460___model.layer-37.moving_mean", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node461___model.layer-37.moving_variance", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node474___model.layer-39.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x192x1xf32>, value = dense<5.000000e-01> : tensor<3x3x192x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node482___model.layer-40.gamma", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node483___model.layer-40.beta", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node484___model.layer-40.moving_mean", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node485___model.layer-40.moving_variance", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node498___model.layer-42.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x192x32xf32>, value = dense<5.000000e-01> : tensor<1x1x192x32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node506___model.layer-43.gamma", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node507___model.layer-43.beta", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node508___model.layer-43.moving_mean", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node509___model.layer-43.moving_variance", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node522___model.layer-45.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x32x192xf32>, value = dense<5.000000e-01> : tensor<1x1x32x192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node530___model.layer-46.gamma", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node531___model.layer-46.beta", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node532___model.layer-46.moving_mean", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node533___model.layer-46.moving_variance", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node546___model.layer-48.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x192x1xf32>, value = dense<5.000000e-01> : tensor<3x3x192x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node554___model.layer-49.gamma", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node555___model.layer-49.beta", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node556___model.layer-49.moving_mean", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node557___model.layer-49.moving_variance", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node570___model.layer-51.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x192x32xf32>, value = dense<5.000000e-01> : tensor<1x1x192x32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node578___model.layer-52.gamma", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node579___model.layer-52.beta", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node580___model.layer-52.moving_mean", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node581___model.layer-52.moving_variance", tf_saved_model.exported_names = [], type = tensor<32xf32>, value = dense<5.000000e-01> : tensor<32xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node594___model.layer-54.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x32x192xf32>, value = dense<5.000000e-01> : tensor<1x1x32x192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node602___model.layer-55.gamma", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node603___model.layer-55.beta", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node604___model.layer-55.moving_mean", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node605___model.layer-55.moving_variance", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node624___model.layer-58.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x192x1xf32>, value = dense<5.000000e-01> : tensor<3x3x192x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node632___model.layer-59.gamma", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node633___model.layer-59.beta", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node634___model.layer-59.moving_mean", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node635___model.layer-59.moving_variance", tf_saved_model.exported_names = [], type = tensor<192xf32>, value = dense<5.000000e-01> : tensor<192xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node648___model.layer-61.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x192x64xf32>, value = dense<5.000000e-01> : tensor<1x1x192x64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node656___model.layer-62.gamma", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node657___model.layer-62.beta", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node658___model.layer-62.moving_mean", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node659___model.layer-62.moving_variance", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node666___model.layer-63.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x64x384xf32>, value = dense<5.000000e-01> : tensor<1x1x64x384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node674___model.layer-64.gamma", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node675___model.layer-64.beta", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node676___model.layer-64.moving_mean", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node677___model.layer-64.moving_variance", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node690___model.layer-66.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x384x1xf32>, value = dense<5.000000e-01> : tensor<3x3x384x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node698___model.layer-67.gamma", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node699___model.layer-67.beta", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node700___model.layer-67.moving_mean", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node701___model.layer-67.moving_variance", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node714___model.layer-69.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x384x64xf32>, value = dense<5.000000e-01> : tensor<1x1x384x64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node722___model.layer-70.gamma", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node723___model.layer-70.beta", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node724___model.layer-70.moving_mean", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node725___model.layer-70.moving_variance", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node738___model.layer-72.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x64x384xf32>, value = dense<5.000000e-01> : tensor<1x1x64x384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node746___model.layer-73.gamma", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node747___model.layer-73.beta", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node748___model.layer-73.moving_mean", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node749___model.layer-73.moving_variance", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node762___model.layer-75.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x384x1xf32>, value = dense<5.000000e-01> : tensor<3x3x384x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node770___model.layer-76.gamma", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node771___model.layer-76.beta", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node772___model.layer-76.moving_mean", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node773___model.layer-76.moving_variance", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node786___model.layer-78.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x384x64xf32>, value = dense<5.000000e-01> : tensor<1x1x384x64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node794___model.layer-79.gamma", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node795___model.layer-79.beta", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node796___model.layer-79.moving_mean", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node797___model.layer-79.moving_variance", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node810___model.layer-81.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x64x384xf32>, value = dense<5.000000e-01> : tensor<1x1x64x384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node818___model.layer-82.gamma", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node819___model.layer-82.beta", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node820___model.layer-82.moving_mean", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node821___model.layer-82.moving_variance", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node834___model.layer-84.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x384x1xf32>, value = dense<5.000000e-01> : tensor<3x3x384x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node842___model.layer-85.gamma", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node843___model.layer-85.beta", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node844___model.layer-85.moving_mean", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node845___model.layer-85.moving_variance", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node858___model.layer-87.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x384x64xf32>, value = dense<5.000000e-01> : tensor<1x1x384x64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node866___model.layer-88.gamma", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node867___model.layer-88.beta", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node868___model.layer-88.moving_mean", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node869___model.layer-88.moving_variance", tf_saved_model.exported_names = [], type = tensor<64xf32>, value = dense<5.000000e-01> : tensor<64xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node882___model.layer-90.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x64x384xf32>, value = dense<5.000000e-01> : tensor<1x1x64x384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node890___model.layer-91.gamma", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node891___model.layer-91.beta", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node892___model.layer-91.moving_mean", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node893___model.layer-91.moving_variance", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node906___model.layer-93.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x384x1xf32>, value = dense<5.000000e-01> : tensor<3x3x384x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node914___model.layer-94.gamma", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node915___model.layer-94.beta", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node916___model.layer-94.moving_mean", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node917___model.layer-94.moving_variance", tf_saved_model.exported_names = [], type = tensor<384xf32>, value = dense<5.000000e-01> : tensor<384xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node930___model.layer-96.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x384x96xf32>, value = dense<5.000000e-01> : tensor<1x1x384x96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node938___model.layer-97.gamma", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node939___model.layer-97.beta", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node940___model.layer-97.moving_mean", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node941___model.layer-97.moving_variance", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node948___model.layer-98.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x96x576xf32>, value = dense<5.000000e-01> : tensor<1x1x96x576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node956___model.layer-99.gamma", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node957___model.layer-99.beta", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node958___model.layer-99.moving_mean", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node959___model.layer-99.moving_variance", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node972___model.layer-101.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x576x1xf32>, value = dense<5.000000e-01> : tensor<3x3x576x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node980___model.layer-102.gamma", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node981___model.layer-102.beta", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node982___model.layer-102.moving_mean", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node983___model.layer-102.moving_variance", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node996___model.layer-104.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x576x96xf32>, value = dense<5.000000e-01> : tensor<1x1x576x96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1004___model.layer-105.gamma", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1005___model.layer-105.beta", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1006___model.layer-105.moving_mean", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1007___model.layer-105.moving_variance", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1020___model.layer-107.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x96x576xf32>, value = dense<5.000000e-01> : tensor<1x1x96x576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1028___model.layer-108.gamma", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1029___model.layer-108.beta", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1030___model.layer-108.moving_mean", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1031___model.layer-108.moving_variance", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1044___model.layer-110.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x576x1xf32>, value = dense<5.000000e-01> : tensor<3x3x576x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1052___model.layer-111.gamma", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1053___model.layer-111.beta", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1054___model.layer-111.moving_mean", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1055___model.layer-111.moving_variance", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1068___model.layer-113.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x576x96xf32>, value = dense<5.000000e-01> : tensor<1x1x576x96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1076___model.layer-114.gamma", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1077___model.layer-114.beta", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1078___model.layer-114.moving_mean", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1079___model.layer-114.moving_variance", tf_saved_model.exported_names = [], type = tensor<96xf32>, value = dense<5.000000e-01> : tensor<96xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1092___model.layer-116.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x96x576xf32>, value = dense<5.000000e-01> : tensor<1x1x96x576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1100___model.layer-117.gamma", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1101___model.layer-117.beta", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1102___model.layer-117.moving_mean", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1103___model.layer-117.moving_variance", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1122___model.layer-120.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x576x1xf32>, value = dense<5.000000e-01> : tensor<3x3x576x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1130___model.layer-121.gamma", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1131___model.layer-121.beta", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1132___model.layer-121.moving_mean", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1133___model.layer-121.moving_variance", tf_saved_model.exported_names = [], type = tensor<576xf32>, value = dense<5.000000e-01> : tensor<576xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1146___model.layer-123.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x576x160xf32>, value = dense<5.000000e-01> : tensor<1x1x576x160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1154___model.layer-124.gamma", tf_saved_model.exported_names = [], type = tensor<160xf32>, value = dense<5.000000e-01> : tensor<160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1155___model.layer-124.beta", tf_saved_model.exported_names = [], type = tensor<160xf32>, value = dense<5.000000e-01> : tensor<160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1156___model.layer-124.moving_mean", tf_saved_model.exported_names = [], type = tensor<160xf32>, value = dense<5.000000e-01> : tensor<160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1157___model.layer-124.moving_variance", tf_saved_model.exported_names = [], type = tensor<160xf32>, value = dense<5.000000e-01> : tensor<160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1164___model.layer-125.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x160x960xf32>, value = dense<5.000000e-01> : tensor<1x1x160x960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1172___model.layer-126.gamma", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1173___model.layer-126.beta", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1174___model.layer-126.moving_mean", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1175___model.layer-126.moving_variance", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1188___model.layer-128.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x960x1xf32>, value = dense<5.000000e-01> : tensor<3x3x960x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1196___model.layer-129.gamma", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1197___model.layer-129.beta", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1198___model.layer-129.moving_mean", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1199___model.layer-129.moving_variance", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1212___model.layer-131.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x960x160xf32>, value = dense<5.000000e-01> : tensor<1x1x960x160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1220___model.layer-132.gamma", tf_saved_model.exported_names = [], type = tensor<160xf32>, value = dense<5.000000e-01> : tensor<160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1221___model.layer-132.beta", tf_saved_model.exported_names = [], type = tensor<160xf32>, value = dense<5.000000e-01> : tensor<160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1222___model.layer-132.moving_mean", tf_saved_model.exported_names = [], type = tensor<160xf32>, value = dense<5.000000e-01> : tensor<160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1223___model.layer-132.moving_variance", tf_saved_model.exported_names = [], type = tensor<160xf32>, value = dense<5.000000e-01> : tensor<160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1236___model.layer-134.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x160x960xf32>, value = dense<5.000000e-01> : tensor<1x1x160x960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1244___model.layer-135.gamma", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1245___model.layer-135.beta", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1246___model.layer-135.moving_mean", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1247___model.layer-135.moving_variance", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1260___model.layer-137.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x960x1xf32>, value = dense<5.000000e-01> : tensor<3x3x960x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1268___model.layer-138.gamma", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1269___model.layer-138.beta", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1270___model.layer-138.moving_mean", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1271___model.layer-138.moving_variance", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1284___model.layer-140.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x960x160xf32>, value = dense<5.000000e-01> : tensor<1x1x960x160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1292___model.layer-141.gamma", tf_saved_model.exported_names = [], type = tensor<160xf32>, value = dense<5.000000e-01> : tensor<160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1293___model.layer-141.beta", tf_saved_model.exported_names = [], type = tensor<160xf32>, value = dense<5.000000e-01> : tensor<160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1294___model.layer-141.moving_mean", tf_saved_model.exported_names = [], type = tensor<160xf32>, value = dense<5.000000e-01> : tensor<160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1295___model.layer-141.moving_variance", tf_saved_model.exported_names = [], type = tensor<160xf32>, value = dense<5.000000e-01> : tensor<160xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1308___model.layer-143.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x160x960xf32>, value = dense<5.000000e-01> : tensor<1x1x160x960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1316___model.layer-144.gamma", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1317___model.layer-144.beta", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1318___model.layer-144.moving_mean", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1319___model.layer-144.moving_variance", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1332___model.layer-146.depthwise_kernel", tf_saved_model.exported_names = [], type = tensor<3x3x960x1xf32>, value = dense<5.000000e-01> : tensor<3x3x960x1xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1340___model.layer-147.gamma", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1341___model.layer-147.beta", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1342___model.layer-147.moving_mean", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1343___model.layer-147.moving_variance", tf_saved_model.exported_names = [], type = tensor<960xf32>, value = dense<5.000000e-01> : tensor<960xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1356___model.layer-149.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x960x320xf32>, value = dense<5.000000e-01> : tensor<1x1x960x320xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1364___model.layer-150.gamma", tf_saved_model.exported_names = [], type = tensor<320xf32>, value = dense<5.000000e-01> : tensor<320xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1365___model.layer-150.beta", tf_saved_model.exported_names = [], type = tensor<320xf32>, value = dense<5.000000e-01> : tensor<320xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1366___model.layer-150.moving_mean", tf_saved_model.exported_names = [], type = tensor<320xf32>, value = dense<5.000000e-01> : tensor<320xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1367___model.layer-150.moving_variance", tf_saved_model.exported_names = [], type = tensor<320xf32>, value = dense<5.000000e-01> : tensor<320xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1374___model.layer-151.kernel", tf_saved_model.exported_names = [], type = tensor<1x1x320x1280xf32>, value = dense<5.000000e-01> : tensor<1x1x320x1280xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1382___model.layer-152.gamma", tf_saved_model.exported_names = [], type = tensor<1280xf32>, value = dense<5.000000e-01> : tensor<1280xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1383___model.layer-152.beta", tf_saved_model.exported_names = [], type = tensor<1280xf32>, value = dense<5.000000e-01> : tensor<1280xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1384___model.layer-152.moving_mean", tf_saved_model.exported_names = [], type = tensor<1280xf32>, value = dense<5.000000e-01> : tensor<1280xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1385___model.layer-152.moving_variance", tf_saved_model.exported_names = [], type = tensor<1280xf32>, value = dense<5.000000e-01> : tensor<1280xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1404___model.layer-155.kernel", tf_saved_model.exported_names = [], type = tensor<1280x1000xf32>, value = dense<5.000000e-01> : tensor<1280x1000xf32>} : () -> () loc(#loc0)
  "tf_saved_model.global_tensor"() {is_mutable, sym_name = "__sm_node1405___model.layer-155.bias", tf_saved_model.exported_names = [], type = tensor<1000xf32>, value = dense<5.000000e-01> : tensor<1000xf32>} : () -> () loc(#loc0)
  func @__inference_predict_40790(%arg0: tensor<1x224x224x3xf32> {tf._user_specified_name = "args_0", tf_saved_model.index_path = [0]} loc(unknown), %arg1: tensor<!tf_type.resource<tensor<3x3x3x32xf32>>> {tf_saved_model.bound_input = @"__sm_node168___model.layer-1.kernel"} loc(unknown), %arg2: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node176___model.layer-2.gamma"} loc(unknown), %arg3: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node177___model.layer-2.beta"} loc(unknown), %arg4: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node178___model.layer-2.moving_mean"} loc(unknown), %arg5: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node179___model.layer-2.moving_variance"} loc(unknown), %arg6: tensor<!tf_type.resource<tensor<3x3x32x1xf32>>> {tf_saved_model.bound_input = @"__sm_node192___model.layer-4.depthwise_kernel"} loc(unknown), %arg7: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node200___model.layer-5.gamma"} loc(unknown), %arg8: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node201___model.layer-5.beta"} loc(unknown), %arg9: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node202___model.layer-5.moving_mean"} loc(unknown), %arg10: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node203___model.layer-5.moving_variance"} loc(unknown), %arg11: tensor<!tf_type.resource<tensor<1x1x32x16xf32>>> {tf_saved_model.bound_input = @"__sm_node216___model.layer-7.kernel"} loc(unknown), %arg12: tensor<!tf_type.resource<tensor<16xf32>>> {tf_saved_model.bound_input = @"__sm_node224___model.layer-8.gamma"} loc(unknown), %arg13: tensor<!tf_type.resource<tensor<16xf32>>> {tf_saved_model.bound_input = @"__sm_node225___model.layer-8.beta"} loc(unknown), %arg14: tensor<!tf_type.resource<tensor<16xf32>>> {tf_saved_model.bound_input = @"__sm_node226___model.layer-8.moving_mean"} loc(unknown), %arg15: tensor<!tf_type.resource<tensor<16xf32>>> {tf_saved_model.bound_input = @"__sm_node227___model.layer-8.moving_variance"} loc(unknown), %arg16: tensor<!tf_type.resource<tensor<1x1x16x96xf32>>> {tf_saved_model.bound_input = @"__sm_node234___model.layer-9.kernel"} loc(unknown), %arg17: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node242___model.layer-10.gamma"} loc(unknown), %arg18: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node243___model.layer-10.beta"} loc(unknown), %arg19: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node244___model.layer-10.moving_mean"} loc(unknown), %arg20: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node245___model.layer-10.moving_variance"} loc(unknown), %arg21: tensor<!tf_type.resource<tensor<3x3x96x1xf32>>> {tf_saved_model.bound_input = @"__sm_node264___model.layer-13.depthwise_kernel"} loc(unknown), %arg22: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node272___model.layer-14.gamma"} loc(unknown), %arg23: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node273___model.layer-14.beta"} loc(unknown), %arg24: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node274___model.layer-14.moving_mean"} loc(unknown), %arg25: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node275___model.layer-14.moving_variance"} loc(unknown), %arg26: tensor<!tf_type.resource<tensor<1x1x96x24xf32>>> {tf_saved_model.bound_input = @"__sm_node288___model.layer-16.kernel"} loc(unknown), %arg27: tensor<!tf_type.resource<tensor<24xf32>>> {tf_saved_model.bound_input = @"__sm_node296___model.layer-17.gamma"} loc(unknown), %arg28: tensor<!tf_type.resource<tensor<24xf32>>> {tf_saved_model.bound_input = @"__sm_node297___model.layer-17.beta"} loc(unknown), %arg29: tensor<!tf_type.resource<tensor<24xf32>>> {tf_saved_model.bound_input = @"__sm_node298___model.layer-17.moving_mean"} loc(unknown), %arg30: tensor<!tf_type.resource<tensor<24xf32>>> {tf_saved_model.bound_input = @"__sm_node299___model.layer-17.moving_variance"} loc(unknown), %arg31: tensor<!tf_type.resource<tensor<1x1x24x144xf32>>> {tf_saved_model.bound_input = @"__sm_node306___model.layer-18.kernel"} loc(unknown), %arg32: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node314___model.layer-19.gamma"} loc(unknown), %arg33: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node315___model.layer-19.beta"} loc(unknown), %arg34: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node316___model.layer-19.moving_mean"} loc(unknown), %arg35: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node317___model.layer-19.moving_variance"} loc(unknown), %arg36: tensor<!tf_type.resource<tensor<3x3x144x1xf32>>> {tf_saved_model.bound_input = @"__sm_node330___model.layer-21.depthwise_kernel"} loc(unknown), %arg37: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node338___model.layer-22.gamma"} loc(unknown), %arg38: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node339___model.layer-22.beta"} loc(unknown), %arg39: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node340___model.layer-22.moving_mean"} loc(unknown), %arg40: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node341___model.layer-22.moving_variance"} loc(unknown), %arg41: tensor<!tf_type.resource<tensor<1x1x144x24xf32>>> {tf_saved_model.bound_input = @"__sm_node354___model.layer-24.kernel"} loc(unknown), %arg42: tensor<!tf_type.resource<tensor<24xf32>>> {tf_saved_model.bound_input = @"__sm_node362___model.layer-25.gamma"} loc(unknown), %arg43: tensor<!tf_type.resource<tensor<24xf32>>> {tf_saved_model.bound_input = @"__sm_node363___model.layer-25.beta"} loc(unknown), %arg44: tensor<!tf_type.resource<tensor<24xf32>>> {tf_saved_model.bound_input = @"__sm_node364___model.layer-25.moving_mean"} loc(unknown), %arg45: tensor<!tf_type.resource<tensor<24xf32>>> {tf_saved_model.bound_input = @"__sm_node365___model.layer-25.moving_variance"} loc(unknown), %arg46: tensor<!tf_type.resource<tensor<1x1x24x144xf32>>> {tf_saved_model.bound_input = @"__sm_node378___model.layer-27.kernel"} loc(unknown), %arg47: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node386___model.layer-28.gamma"} loc(unknown), %arg48: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node387___model.layer-28.beta"} loc(unknown), %arg49: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node388___model.layer-28.moving_mean"} loc(unknown), %arg50: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node389___model.layer-28.moving_variance"} loc(unknown), %arg51: tensor<!tf_type.resource<tensor<3x3x144x1xf32>>> {tf_saved_model.bound_input = @"__sm_node408___model.layer-31.depthwise_kernel"} loc(unknown), %arg52: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node416___model.layer-32.gamma"} loc(unknown), %arg53: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node417___model.layer-32.beta"} loc(unknown), %arg54: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node418___model.layer-32.moving_mean"} loc(unknown), %arg55: tensor<!tf_type.resource<tensor<144xf32>>> {tf_saved_model.bound_input = @"__sm_node419___model.layer-32.moving_variance"} loc(unknown), %arg56: tensor<!tf_type.resource<tensor<1x1x144x32xf32>>> {tf_saved_model.bound_input = @"__sm_node432___model.layer-34.kernel"} loc(unknown), %arg57: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node440___model.layer-35.gamma"} loc(unknown), %arg58: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node441___model.layer-35.beta"} loc(unknown), %arg59: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node442___model.layer-35.moving_mean"} loc(unknown), %arg60: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node443___model.layer-35.moving_variance"} loc(unknown), %arg61: tensor<!tf_type.resource<tensor<1x1x32x192xf32>>> {tf_saved_model.bound_input = @"__sm_node450___model.layer-36.kernel"} loc(unknown), %arg62: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node458___model.layer-37.gamma"} loc(unknown), %arg63: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node459___model.layer-37.beta"} loc(unknown), %arg64: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node460___model.layer-37.moving_mean"} loc(unknown), %arg65: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node461___model.layer-37.moving_variance"} loc(unknown), %arg66: tensor<!tf_type.resource<tensor<3x3x192x1xf32>>> {tf_saved_model.bound_input = @"__sm_node474___model.layer-39.depthwise_kernel"} loc(unknown), %arg67: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node482___model.layer-40.gamma"} loc(unknown), %arg68: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node483___model.layer-40.beta"} loc(unknown), %arg69: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node484___model.layer-40.moving_mean"} loc(unknown), %arg70: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node485___model.layer-40.moving_variance"} loc(unknown), %arg71: tensor<!tf_type.resource<tensor<1x1x192x32xf32>>> {tf_saved_model.bound_input = @"__sm_node498___model.layer-42.kernel"} loc(unknown), %arg72: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node506___model.layer-43.gamma"} loc(unknown), %arg73: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node507___model.layer-43.beta"} loc(unknown), %arg74: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node508___model.layer-43.moving_mean"} loc(unknown), %arg75: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node509___model.layer-43.moving_variance"} loc(unknown), %arg76: tensor<!tf_type.resource<tensor<1x1x32x192xf32>>> {tf_saved_model.bound_input = @"__sm_node522___model.layer-45.kernel"} loc(unknown), %arg77: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node530___model.layer-46.gamma"} loc(unknown), %arg78: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node531___model.layer-46.beta"} loc(unknown), %arg79: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node532___model.layer-46.moving_mean"} loc(unknown), %arg80: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node533___model.layer-46.moving_variance"} loc(unknown), %arg81: tensor<!tf_type.resource<tensor<3x3x192x1xf32>>> {tf_saved_model.bound_input = @"__sm_node546___model.layer-48.depthwise_kernel"} loc(unknown), %arg82: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node554___model.layer-49.gamma"} loc(unknown), %arg83: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node555___model.layer-49.beta"} loc(unknown), %arg84: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node556___model.layer-49.moving_mean"} loc(unknown), %arg85: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node557___model.layer-49.moving_variance"} loc(unknown), %arg86: tensor<!tf_type.resource<tensor<1x1x192x32xf32>>> {tf_saved_model.bound_input = @"__sm_node570___model.layer-51.kernel"} loc(unknown), %arg87: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node578___model.layer-52.gamma"} loc(unknown), %arg88: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node579___model.layer-52.beta"} loc(unknown), %arg89: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node580___model.layer-52.moving_mean"} loc(unknown), %arg90: tensor<!tf_type.resource<tensor<32xf32>>> {tf_saved_model.bound_input = @"__sm_node581___model.layer-52.moving_variance"} loc(unknown), %arg91: tensor<!tf_type.resource<tensor<1x1x32x192xf32>>> {tf_saved_model.bound_input = @"__sm_node594___model.layer-54.kernel"} loc(unknown), %arg92: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node602___model.layer-55.gamma"} loc(unknown), %arg93: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node603___model.layer-55.beta"} loc(unknown), %arg94: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node604___model.layer-55.moving_mean"} loc(unknown), %arg95: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node605___model.layer-55.moving_variance"} loc(unknown), %arg96: tensor<!tf_type.resource<tensor<3x3x192x1xf32>>> {tf_saved_model.bound_input = @"__sm_node624___model.layer-58.depthwise_kernel"} loc(unknown), %arg97: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node632___model.layer-59.gamma"} loc(unknown), %arg98: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node633___model.layer-59.beta"} loc(unknown), %arg99: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node634___model.layer-59.moving_mean"} loc(unknown), %arg100: tensor<!tf_type.resource<tensor<192xf32>>> {tf_saved_model.bound_input = @"__sm_node635___model.layer-59.moving_variance"} loc(unknown), %arg101: tensor<!tf_type.resource<tensor<1x1x192x64xf32>>> {tf_saved_model.bound_input = @"__sm_node648___model.layer-61.kernel"} loc(unknown), %arg102: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node656___model.layer-62.gamma"} loc(unknown), %arg103: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node657___model.layer-62.beta"} loc(unknown), %arg104: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node658___model.layer-62.moving_mean"} loc(unknown), %arg105: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node659___model.layer-62.moving_variance"} loc(unknown), %arg106: tensor<!tf_type.resource<tensor<1x1x64x384xf32>>> {tf_saved_model.bound_input = @"__sm_node666___model.layer-63.kernel"} loc(unknown), %arg107: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node674___model.layer-64.gamma"} loc(unknown), %arg108: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node675___model.layer-64.beta"} loc(unknown), %arg109: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node676___model.layer-64.moving_mean"} loc(unknown), %arg110: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node677___model.layer-64.moving_variance"} loc(unknown), %arg111: tensor<!tf_type.resource<tensor<3x3x384x1xf32>>> {tf_saved_model.bound_input = @"__sm_node690___model.layer-66.depthwise_kernel"} loc(unknown), %arg112: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node698___model.layer-67.gamma"} loc(unknown), %arg113: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node699___model.layer-67.beta"} loc(unknown), %arg114: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node700___model.layer-67.moving_mean"} loc(unknown), %arg115: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node701___model.layer-67.moving_variance"} loc(unknown), %arg116: tensor<!tf_type.resource<tensor<1x1x384x64xf32>>> {tf_saved_model.bound_input = @"__sm_node714___model.layer-69.kernel"} loc(unknown), %arg117: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node722___model.layer-70.gamma"} loc(unknown), %arg118: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node723___model.layer-70.beta"} loc(unknown), %arg119: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node724___model.layer-70.moving_mean"} loc(unknown), %arg120: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node725___model.layer-70.moving_variance"} loc(unknown), %arg121: tensor<!tf_type.resource<tensor<1x1x64x384xf32>>> {tf_saved_model.bound_input = @"__sm_node738___model.layer-72.kernel"} loc(unknown), %arg122: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node746___model.layer-73.gamma"} loc(unknown), %arg123: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node747___model.layer-73.beta"} loc(unknown), %arg124: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node748___model.layer-73.moving_mean"} loc(unknown), %arg125: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node749___model.layer-73.moving_variance"} loc(unknown), %arg126: tensor<!tf_type.resource<tensor<3x3x384x1xf32>>> {tf_saved_model.bound_input = @"__sm_node762___model.layer-75.depthwise_kernel"} loc(unknown), %arg127: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node770___model.layer-76.gamma"} loc(unknown), %arg128: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node771___model.layer-76.beta"} loc(unknown), %arg129: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node772___model.layer-76.moving_mean"} loc(unknown), %arg130: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node773___model.layer-76.moving_variance"} loc(unknown), %arg131: tensor<!tf_type.resource<tensor<1x1x384x64xf32>>> {tf_saved_model.bound_input = @"__sm_node786___model.layer-78.kernel"} loc(unknown), %arg132: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node794___model.layer-79.gamma"} loc(unknown), %arg133: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node795___model.layer-79.beta"} loc(unknown), %arg134: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node796___model.layer-79.moving_mean"} loc(unknown), %arg135: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node797___model.layer-79.moving_variance"} loc(unknown), %arg136: tensor<!tf_type.resource<tensor<1x1x64x384xf32>>> {tf_saved_model.bound_input = @"__sm_node810___model.layer-81.kernel"} loc(unknown), %arg137: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node818___model.layer-82.gamma"} loc(unknown), %arg138: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node819___model.layer-82.beta"} loc(unknown), %arg139: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node820___model.layer-82.moving_mean"} loc(unknown), %arg140: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node821___model.layer-82.moving_variance"} loc(unknown), %arg141: tensor<!tf_type.resource<tensor<3x3x384x1xf32>>> {tf_saved_model.bound_input = @"__sm_node834___model.layer-84.depthwise_kernel"} loc(unknown), %arg142: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node842___model.layer-85.gamma"} loc(unknown), %arg143: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node843___model.layer-85.beta"} loc(unknown), %arg144: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node844___model.layer-85.moving_mean"} loc(unknown), %arg145: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node845___model.layer-85.moving_variance"} loc(unknown), %arg146: tensor<!tf_type.resource<tensor<1x1x384x64xf32>>> {tf_saved_model.bound_input = @"__sm_node858___model.layer-87.kernel"} loc(unknown), %arg147: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node866___model.layer-88.gamma"} loc(unknown), %arg148: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node867___model.layer-88.beta"} loc(unknown), %arg149: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node868___model.layer-88.moving_mean"} loc(unknown), %arg150: tensor<!tf_type.resource<tensor<64xf32>>> {tf_saved_model.bound_input = @"__sm_node869___model.layer-88.moving_variance"} loc(unknown), %arg151: tensor<!tf_type.resource<tensor<1x1x64x384xf32>>> {tf_saved_model.bound_input = @"__sm_node882___model.layer-90.kernel"} loc(unknown), %arg152: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node890___model.layer-91.gamma"} loc(unknown), %arg153: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node891___model.layer-91.beta"} loc(unknown), %arg154: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node892___model.layer-91.moving_mean"} loc(unknown), %arg155: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node893___model.layer-91.moving_variance"} loc(unknown), %arg156: tensor<!tf_type.resource<tensor<3x3x384x1xf32>>> {tf_saved_model.bound_input = @"__sm_node906___model.layer-93.depthwise_kernel"} loc(unknown), %arg157: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node914___model.layer-94.gamma"} loc(unknown), %arg158: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node915___model.layer-94.beta"} loc(unknown), %arg159: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node916___model.layer-94.moving_mean"} loc(unknown), %arg160: tensor<!tf_type.resource<tensor<384xf32>>> {tf_saved_model.bound_input = @"__sm_node917___model.layer-94.moving_variance"} loc(unknown), %arg161: tensor<!tf_type.resource<tensor<1x1x384x96xf32>>> {tf_saved_model.bound_input = @"__sm_node930___model.layer-96.kernel"} loc(unknown), %arg162: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node938___model.layer-97.gamma"} loc(unknown), %arg163: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node939___model.layer-97.beta"} loc(unknown), %arg164: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node940___model.layer-97.moving_mean"} loc(unknown), %arg165: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node941___model.layer-97.moving_variance"} loc(unknown), %arg166: tensor<!tf_type.resource<tensor<1x1x96x576xf32>>> {tf_saved_model.bound_input = @"__sm_node948___model.layer-98.kernel"} loc(unknown), %arg167: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node956___model.layer-99.gamma"} loc(unknown), %arg168: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node957___model.layer-99.beta"} loc(unknown), %arg169: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node958___model.layer-99.moving_mean"} loc(unknown), %arg170: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node959___model.layer-99.moving_variance"} loc(unknown), %arg171: tensor<!tf_type.resource<tensor<3x3x576x1xf32>>> {tf_saved_model.bound_input = @"__sm_node972___model.layer-101.depthwise_kernel"} loc(unknown), %arg172: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node980___model.layer-102.gamma"} loc(unknown), %arg173: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node981___model.layer-102.beta"} loc(unknown), %arg174: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node982___model.layer-102.moving_mean"} loc(unknown), %arg175: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node983___model.layer-102.moving_variance"} loc(unknown), %arg176: tensor<!tf_type.resource<tensor<1x1x576x96xf32>>> {tf_saved_model.bound_input = @"__sm_node996___model.layer-104.kernel"} loc(unknown), %arg177: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node1004___model.layer-105.gamma"} loc(unknown), %arg178: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node1005___model.layer-105.beta"} loc(unknown), %arg179: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node1006___model.layer-105.moving_mean"} loc(unknown), %arg180: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node1007___model.layer-105.moving_variance"} loc(unknown), %arg181: tensor<!tf_type.resource<tensor<1x1x96x576xf32>>> {tf_saved_model.bound_input = @"__sm_node1020___model.layer-107.kernel"} loc(unknown), %arg182: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1028___model.layer-108.gamma"} loc(unknown), %arg183: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1029___model.layer-108.beta"} loc(unknown), %arg184: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1030___model.layer-108.moving_mean"} loc(unknown), %arg185: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1031___model.layer-108.moving_variance"} loc(unknown), %arg186: tensor<!tf_type.resource<tensor<3x3x576x1xf32>>> {tf_saved_model.bound_input = @"__sm_node1044___model.layer-110.depthwise_kernel"} loc(unknown), %arg187: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1052___model.layer-111.gamma"} loc(unknown), %arg188: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1053___model.layer-111.beta"} loc(unknown), %arg189: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1054___model.layer-111.moving_mean"} loc(unknown), %arg190: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1055___model.layer-111.moving_variance"} loc(unknown), %arg191: tensor<!tf_type.resource<tensor<1x1x576x96xf32>>> {tf_saved_model.bound_input = @"__sm_node1068___model.layer-113.kernel"} loc(unknown), %arg192: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node1076___model.layer-114.gamma"} loc(unknown), %arg193: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node1077___model.layer-114.beta"} loc(unknown), %arg194: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node1078___model.layer-114.moving_mean"} loc(unknown), %arg195: tensor<!tf_type.resource<tensor<96xf32>>> {tf_saved_model.bound_input = @"__sm_node1079___model.layer-114.moving_variance"} loc(unknown), %arg196: tensor<!tf_type.resource<tensor<1x1x96x576xf32>>> {tf_saved_model.bound_input = @"__sm_node1092___model.layer-116.kernel"} loc(unknown), %arg197: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1100___model.layer-117.gamma"} loc(unknown), %arg198: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1101___model.layer-117.beta"} loc(unknown), %arg199: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1102___model.layer-117.moving_mean"} loc(unknown), %arg200: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1103___model.layer-117.moving_variance"} loc(unknown), %arg201: tensor<!tf_type.resource<tensor<3x3x576x1xf32>>> {tf_saved_model.bound_input = @"__sm_node1122___model.layer-120.depthwise_kernel"} loc(unknown), %arg202: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1130___model.layer-121.gamma"} loc(unknown), %arg203: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1131___model.layer-121.beta"} loc(unknown), %arg204: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1132___model.layer-121.moving_mean"} loc(unknown), %arg205: tensor<!tf_type.resource<tensor<576xf32>>> {tf_saved_model.bound_input = @"__sm_node1133___model.layer-121.moving_variance"} loc(unknown), %arg206: tensor<!tf_type.resource<tensor<1x1x576x160xf32>>> {tf_saved_model.bound_input = @"__sm_node1146___model.layer-123.kernel"} loc(unknown), %arg207: tensor<!tf_type.resource<tensor<160xf32>>> {tf_saved_model.bound_input = @"__sm_node1154___model.layer-124.gamma"} loc(unknown), %arg208: tensor<!tf_type.resource<tensor<160xf32>>> {tf_saved_model.bound_input = @"__sm_node1155___model.layer-124.beta"} loc(unknown), %arg209: tensor<!tf_type.resource<tensor<160xf32>>> {tf_saved_model.bound_input = @"__sm_node1156___model.layer-124.moving_mean"} loc(unknown), %arg210: tensor<!tf_type.resource<tensor<160xf32>>> {tf_saved_model.bound_input = @"__sm_node1157___model.layer-124.moving_variance"} loc(unknown), %arg211: tensor<!tf_type.resource<tensor<1x1x160x960xf32>>> {tf_saved_model.bound_input = @"__sm_node1164___model.layer-125.kernel"} loc(unknown), %arg212: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1172___model.layer-126.gamma"} loc(unknown), %arg213: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1173___model.layer-126.beta"} loc(unknown), %arg214: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1174___model.layer-126.moving_mean"} loc(unknown), %arg215: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1175___model.layer-126.moving_variance"} loc(unknown), %arg216: tensor<!tf_type.resource<tensor<3x3x960x1xf32>>> {tf_saved_model.bound_input = @"__sm_node1188___model.layer-128.depthwise_kernel"} loc(unknown), %arg217: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1196___model.layer-129.gamma"} loc(unknown), %arg218: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1197___model.layer-129.beta"} loc(unknown), %arg219: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1198___model.layer-129.moving_mean"} loc(unknown), %arg220: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1199___model.layer-129.moving_variance"} loc(unknown), %arg221: tensor<!tf_type.resource<tensor<1x1x960x160xf32>>> {tf_saved_model.bound_input = @"__sm_node1212___model.layer-131.kernel"} loc(unknown), %arg222: tensor<!tf_type.resource<tensor<160xf32>>> {tf_saved_model.bound_input = @"__sm_node1220___model.layer-132.gamma"} loc(unknown), %arg223: tensor<!tf_type.resource<tensor<160xf32>>> {tf_saved_model.bound_input = @"__sm_node1221___model.layer-132.beta"} loc(unknown), %arg224: tensor<!tf_type.resource<tensor<160xf32>>> {tf_saved_model.bound_input = @"__sm_node1222___model.layer-132.moving_mean"} loc(unknown), %arg225: tensor<!tf_type.resource<tensor<160xf32>>> {tf_saved_model.bound_input = @"__sm_node1223___model.layer-132.moving_variance"} loc(unknown), %arg226: tensor<!tf_type.resource<tensor<1x1x160x960xf32>>> {tf_saved_model.bound_input = @"__sm_node1236___model.layer-134.kernel"} loc(unknown), %arg227: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1244___model.layer-135.gamma"} loc(unknown), %arg228: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1245___model.layer-135.beta"} loc(unknown), %arg229: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1246___model.layer-135.moving_mean"} loc(unknown), %arg230: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1247___model.layer-135.moving_variance"} loc(unknown), %arg231: tensor<!tf_type.resource<tensor<3x3x960x1xf32>>> {tf_saved_model.bound_input = @"__sm_node1260___model.layer-137.depthwise_kernel"} loc(unknown), %arg232: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1268___model.layer-138.gamma"} loc(unknown), %arg233: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1269___model.layer-138.beta"} loc(unknown), %arg234: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1270___model.layer-138.moving_mean"} loc(unknown), %arg235: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1271___model.layer-138.moving_variance"} loc(unknown), %arg236: tensor<!tf_type.resource<tensor<1x1x960x160xf32>>> {tf_saved_model.bound_input = @"__sm_node1284___model.layer-140.kernel"} loc(unknown), %arg237: tensor<!tf_type.resource<tensor<160xf32>>> {tf_saved_model.bound_input = @"__sm_node1292___model.layer-141.gamma"} loc(unknown), %arg238: tensor<!tf_type.resource<tensor<160xf32>>> {tf_saved_model.bound_input = @"__sm_node1293___model.layer-141.beta"} loc(unknown), %arg239: tensor<!tf_type.resource<tensor<160xf32>>> {tf_saved_model.bound_input = @"__sm_node1294___model.layer-141.moving_mean"} loc(unknown), %arg240: tensor<!tf_type.resource<tensor<160xf32>>> {tf_saved_model.bound_input = @"__sm_node1295___model.layer-141.moving_variance"} loc(unknown), %arg241: tensor<!tf_type.resource<tensor<1x1x160x960xf32>>> {tf_saved_model.bound_input = @"__sm_node1308___model.layer-143.kernel"} loc(unknown), %arg242: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1316___model.layer-144.gamma"} loc(unknown), %arg243: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1317___model.layer-144.beta"} loc(unknown), %arg244: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1318___model.layer-144.moving_mean"} loc(unknown), %arg245: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1319___model.layer-144.moving_variance"} loc(unknown), %arg246: tensor<!tf_type.resource<tensor<3x3x960x1xf32>>> {tf_saved_model.bound_input = @"__sm_node1332___model.layer-146.depthwise_kernel"} loc(unknown), %arg247: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1340___model.layer-147.gamma"} loc(unknown), %arg248: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1341___model.layer-147.beta"} loc(unknown), %arg249: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1342___model.layer-147.moving_mean"} loc(unknown), %arg250: tensor<!tf_type.resource<tensor<960xf32>>> {tf_saved_model.bound_input = @"__sm_node1343___model.layer-147.moving_variance"} loc(unknown), %arg251: tensor<!tf_type.resource<tensor<1x1x960x320xf32>>> {tf_saved_model.bound_input = @"__sm_node1356___model.layer-149.kernel"} loc(unknown), %arg252: tensor<!tf_type.resource<tensor<320xf32>>> {tf_saved_model.bound_input = @"__sm_node1364___model.layer-150.gamma"} loc(unknown), %arg253: tensor<!tf_type.resource<tensor<320xf32>>> {tf_saved_model.bound_input = @"__sm_node1365___model.layer-150.beta"} loc(unknown), %arg254: tensor<!tf_type.resource<tensor<320xf32>>> {tf_saved_model.bound_input = @"__sm_node1366___model.layer-150.moving_mean"} loc(unknown), %arg255: tensor<!tf_type.resource<tensor<320xf32>>> {tf_saved_model.bound_input = @"__sm_node1367___model.layer-150.moving_variance"} loc(unknown), %arg256: tensor<!tf_type.resource<tensor<1x1x320x1280xf32>>> {tf_saved_model.bound_input = @"__sm_node1374___model.layer-151.kernel"} loc(unknown), %arg257: tensor<!tf_type.resource<tensor<1280xf32>>> {tf_saved_model.bound_input = @"__sm_node1382___model.layer-152.gamma"} loc(unknown), %arg258: tensor<!tf_type.resource<tensor<1280xf32>>> {tf_saved_model.bound_input = @"__sm_node1383___model.layer-152.beta"} loc(unknown), %arg259: tensor<!tf_type.resource<tensor<1280xf32>>> {tf_saved_model.bound_input = @"__sm_node1384___model.layer-152.moving_mean"} loc(unknown), %arg260: tensor<!tf_type.resource<tensor<1280xf32>>> {tf_saved_model.bound_input = @"__sm_node1385___model.layer-152.moving_variance"} loc(unknown), %arg261: tensor<!tf_type.resource<tensor<1280x1000xf32>>> {tf_saved_model.bound_input = @"__sm_node1404___model.layer-155.kernel"} loc(unknown), %arg262: tensor<!tf_type.resource<tensor<1000xf32>>> {tf_saved_model.bound_input = @"__sm_node1405___model.layer-155.bias"} loc(unknown)) -> (tensor<1x1000xf32> {tf_saved_model.index_path = []}) attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<1x224x224x3>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful, tf_saved_model.exported_names = ["predict"]} {
    %0 = "tf.Cast"(%arg1) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x3x32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %1 = "tf.Cast"(%arg2) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %2 = "tf.Cast"(%arg3) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %3 = "tf.Cast"(%arg4) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %4 = "tf.Cast"(%arg5) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %5 = "tf.Cast"(%arg6) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x32x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %6 = "tf.Cast"(%arg7) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %7 = "tf.Cast"(%arg8) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %8 = "tf.Cast"(%arg9) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %9 = "tf.Cast"(%arg10) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %10 = "tf.Cast"(%arg11) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x32x16xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %11 = "tf.Cast"(%arg12) {Truncate = false} : (tensor<!tf_type.resource<tensor<16xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %12 = "tf.Cast"(%arg13) {Truncate = false} : (tensor<!tf_type.resource<tensor<16xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %13 = "tf.Cast"(%arg14) {Truncate = false} : (tensor<!tf_type.resource<tensor<16xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %14 = "tf.Cast"(%arg15) {Truncate = false} : (tensor<!tf_type.resource<tensor<16xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %15 = "tf.Cast"(%arg16) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x16x96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %16 = "tf.Cast"(%arg17) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %17 = "tf.Cast"(%arg18) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %18 = "tf.Cast"(%arg19) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %19 = "tf.Cast"(%arg20) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %20 = "tf.Cast"(%arg21) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x96x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %21 = "tf.Cast"(%arg22) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %22 = "tf.Cast"(%arg23) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %23 = "tf.Cast"(%arg24) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %24 = "tf.Cast"(%arg25) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %25 = "tf.Cast"(%arg26) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x96x24xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %26 = "tf.Cast"(%arg27) {Truncate = false} : (tensor<!tf_type.resource<tensor<24xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %27 = "tf.Cast"(%arg28) {Truncate = false} : (tensor<!tf_type.resource<tensor<24xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %28 = "tf.Cast"(%arg29) {Truncate = false} : (tensor<!tf_type.resource<tensor<24xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %29 = "tf.Cast"(%arg30) {Truncate = false} : (tensor<!tf_type.resource<tensor<24xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %30 = "tf.Cast"(%arg31) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x24x144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %31 = "tf.Cast"(%arg32) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %32 = "tf.Cast"(%arg33) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %33 = "tf.Cast"(%arg34) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %34 = "tf.Cast"(%arg35) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %35 = "tf.Cast"(%arg36) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x144x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %36 = "tf.Cast"(%arg37) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %37 = "tf.Cast"(%arg38) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %38 = "tf.Cast"(%arg39) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %39 = "tf.Cast"(%arg40) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %40 = "tf.Cast"(%arg41) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x144x24xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %41 = "tf.Cast"(%arg42) {Truncate = false} : (tensor<!tf_type.resource<tensor<24xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %42 = "tf.Cast"(%arg43) {Truncate = false} : (tensor<!tf_type.resource<tensor<24xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %43 = "tf.Cast"(%arg44) {Truncate = false} : (tensor<!tf_type.resource<tensor<24xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %44 = "tf.Cast"(%arg45) {Truncate = false} : (tensor<!tf_type.resource<tensor<24xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %45 = "tf.Cast"(%arg46) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x24x144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %46 = "tf.Cast"(%arg47) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %47 = "tf.Cast"(%arg48) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %48 = "tf.Cast"(%arg49) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %49 = "tf.Cast"(%arg50) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %50 = "tf.Cast"(%arg51) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x144x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %51 = "tf.Cast"(%arg52) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %52 = "tf.Cast"(%arg53) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %53 = "tf.Cast"(%arg54) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %54 = "tf.Cast"(%arg55) {Truncate = false} : (tensor<!tf_type.resource<tensor<144xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %55 = "tf.Cast"(%arg56) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x144x32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %56 = "tf.Cast"(%arg57) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %57 = "tf.Cast"(%arg58) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %58 = "tf.Cast"(%arg59) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %59 = "tf.Cast"(%arg60) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %60 = "tf.Cast"(%arg61) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x32x192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %61 = "tf.Cast"(%arg62) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %62 = "tf.Cast"(%arg63) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %63 = "tf.Cast"(%arg64) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %64 = "tf.Cast"(%arg65) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %65 = "tf.Cast"(%arg66) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x192x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %66 = "tf.Cast"(%arg67) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %67 = "tf.Cast"(%arg68) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %68 = "tf.Cast"(%arg69) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %69 = "tf.Cast"(%arg70) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %70 = "tf.Cast"(%arg71) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x192x32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %71 = "tf.Cast"(%arg72) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %72 = "tf.Cast"(%arg73) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %73 = "tf.Cast"(%arg74) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %74 = "tf.Cast"(%arg75) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %75 = "tf.Cast"(%arg76) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x32x192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %76 = "tf.Cast"(%arg77) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %77 = "tf.Cast"(%arg78) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %78 = "tf.Cast"(%arg79) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %79 = "tf.Cast"(%arg80) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %80 = "tf.Cast"(%arg81) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x192x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %81 = "tf.Cast"(%arg82) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %82 = "tf.Cast"(%arg83) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %83 = "tf.Cast"(%arg84) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %84 = "tf.Cast"(%arg85) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %85 = "tf.Cast"(%arg86) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x192x32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %86 = "tf.Cast"(%arg87) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %87 = "tf.Cast"(%arg88) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %88 = "tf.Cast"(%arg89) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %89 = "tf.Cast"(%arg90) {Truncate = false} : (tensor<!tf_type.resource<tensor<32xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %90 = "tf.Cast"(%arg91) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x32x192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %91 = "tf.Cast"(%arg92) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %92 = "tf.Cast"(%arg93) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %93 = "tf.Cast"(%arg94) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %94 = "tf.Cast"(%arg95) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %95 = "tf.Cast"(%arg96) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x192x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %96 = "tf.Cast"(%arg97) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %97 = "tf.Cast"(%arg98) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %98 = "tf.Cast"(%arg99) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %99 = "tf.Cast"(%arg100) {Truncate = false} : (tensor<!tf_type.resource<tensor<192xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %100 = "tf.Cast"(%arg101) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x192x64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %101 = "tf.Cast"(%arg102) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %102 = "tf.Cast"(%arg103) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %103 = "tf.Cast"(%arg104) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %104 = "tf.Cast"(%arg105) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %105 = "tf.Cast"(%arg106) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x64x384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %106 = "tf.Cast"(%arg107) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %107 = "tf.Cast"(%arg108) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %108 = "tf.Cast"(%arg109) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %109 = "tf.Cast"(%arg110) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %110 = "tf.Cast"(%arg111) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x384x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %111 = "tf.Cast"(%arg112) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %112 = "tf.Cast"(%arg113) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %113 = "tf.Cast"(%arg114) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %114 = "tf.Cast"(%arg115) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %115 = "tf.Cast"(%arg116) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x384x64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %116 = "tf.Cast"(%arg117) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %117 = "tf.Cast"(%arg118) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %118 = "tf.Cast"(%arg119) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %119 = "tf.Cast"(%arg120) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %120 = "tf.Cast"(%arg121) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x64x384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %121 = "tf.Cast"(%arg122) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %122 = "tf.Cast"(%arg123) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %123 = "tf.Cast"(%arg124) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %124 = "tf.Cast"(%arg125) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %125 = "tf.Cast"(%arg126) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x384x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %126 = "tf.Cast"(%arg127) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %127 = "tf.Cast"(%arg128) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %128 = "tf.Cast"(%arg129) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %129 = "tf.Cast"(%arg130) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %130 = "tf.Cast"(%arg131) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x384x64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %131 = "tf.Cast"(%arg132) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %132 = "tf.Cast"(%arg133) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %133 = "tf.Cast"(%arg134) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %134 = "tf.Cast"(%arg135) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %135 = "tf.Cast"(%arg136) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x64x384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %136 = "tf.Cast"(%arg137) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %137 = "tf.Cast"(%arg138) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %138 = "tf.Cast"(%arg139) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %139 = "tf.Cast"(%arg140) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %140 = "tf.Cast"(%arg141) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x384x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %141 = "tf.Cast"(%arg142) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %142 = "tf.Cast"(%arg143) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %143 = "tf.Cast"(%arg144) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %144 = "tf.Cast"(%arg145) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %145 = "tf.Cast"(%arg146) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x384x64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %146 = "tf.Cast"(%arg147) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %147 = "tf.Cast"(%arg148) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %148 = "tf.Cast"(%arg149) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %149 = "tf.Cast"(%arg150) {Truncate = false} : (tensor<!tf_type.resource<tensor<64xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %150 = "tf.Cast"(%arg151) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x64x384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %151 = "tf.Cast"(%arg152) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %152 = "tf.Cast"(%arg153) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %153 = "tf.Cast"(%arg154) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %154 = "tf.Cast"(%arg155) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %155 = "tf.Cast"(%arg156) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x384x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %156 = "tf.Cast"(%arg157) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %157 = "tf.Cast"(%arg158) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %158 = "tf.Cast"(%arg159) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %159 = "tf.Cast"(%arg160) {Truncate = false} : (tensor<!tf_type.resource<tensor<384xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %160 = "tf.Cast"(%arg161) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x384x96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %161 = "tf.Cast"(%arg162) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %162 = "tf.Cast"(%arg163) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %163 = "tf.Cast"(%arg164) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %164 = "tf.Cast"(%arg165) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %165 = "tf.Cast"(%arg166) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x96x576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %166 = "tf.Cast"(%arg167) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %167 = "tf.Cast"(%arg168) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %168 = "tf.Cast"(%arg169) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %169 = "tf.Cast"(%arg170) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %170 = "tf.Cast"(%arg171) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x576x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %171 = "tf.Cast"(%arg172) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %172 = "tf.Cast"(%arg173) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %173 = "tf.Cast"(%arg174) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %174 = "tf.Cast"(%arg175) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %175 = "tf.Cast"(%arg176) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x576x96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %176 = "tf.Cast"(%arg177) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %177 = "tf.Cast"(%arg178) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %178 = "tf.Cast"(%arg179) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %179 = "tf.Cast"(%arg180) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %180 = "tf.Cast"(%arg181) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x96x576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %181 = "tf.Cast"(%arg182) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %182 = "tf.Cast"(%arg183) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %183 = "tf.Cast"(%arg184) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %184 = "tf.Cast"(%arg185) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %185 = "tf.Cast"(%arg186) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x576x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %186 = "tf.Cast"(%arg187) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %187 = "tf.Cast"(%arg188) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %188 = "tf.Cast"(%arg189) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %189 = "tf.Cast"(%arg190) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %190 = "tf.Cast"(%arg191) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x576x96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %191 = "tf.Cast"(%arg192) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %192 = "tf.Cast"(%arg193) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %193 = "tf.Cast"(%arg194) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %194 = "tf.Cast"(%arg195) {Truncate = false} : (tensor<!tf_type.resource<tensor<96xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %195 = "tf.Cast"(%arg196) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x96x576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %196 = "tf.Cast"(%arg197) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %197 = "tf.Cast"(%arg198) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %198 = "tf.Cast"(%arg199) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %199 = "tf.Cast"(%arg200) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %200 = "tf.Cast"(%arg201) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x576x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %201 = "tf.Cast"(%arg202) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %202 = "tf.Cast"(%arg203) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %203 = "tf.Cast"(%arg204) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %204 = "tf.Cast"(%arg205) {Truncate = false} : (tensor<!tf_type.resource<tensor<576xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %205 = "tf.Cast"(%arg206) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x576x160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %206 = "tf.Cast"(%arg207) {Truncate = false} : (tensor<!tf_type.resource<tensor<160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %207 = "tf.Cast"(%arg208) {Truncate = false} : (tensor<!tf_type.resource<tensor<160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %208 = "tf.Cast"(%arg209) {Truncate = false} : (tensor<!tf_type.resource<tensor<160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %209 = "tf.Cast"(%arg210) {Truncate = false} : (tensor<!tf_type.resource<tensor<160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %210 = "tf.Cast"(%arg211) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x160x960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %211 = "tf.Cast"(%arg212) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %212 = "tf.Cast"(%arg213) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %213 = "tf.Cast"(%arg214) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %214 = "tf.Cast"(%arg215) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %215 = "tf.Cast"(%arg216) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x960x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %216 = "tf.Cast"(%arg217) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %217 = "tf.Cast"(%arg218) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %218 = "tf.Cast"(%arg219) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %219 = "tf.Cast"(%arg220) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %220 = "tf.Cast"(%arg221) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x960x160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %221 = "tf.Cast"(%arg222) {Truncate = false} : (tensor<!tf_type.resource<tensor<160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %222 = "tf.Cast"(%arg223) {Truncate = false} : (tensor<!tf_type.resource<tensor<160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %223 = "tf.Cast"(%arg224) {Truncate = false} : (tensor<!tf_type.resource<tensor<160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %224 = "tf.Cast"(%arg225) {Truncate = false} : (tensor<!tf_type.resource<tensor<160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %225 = "tf.Cast"(%arg226) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x160x960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %226 = "tf.Cast"(%arg227) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %227 = "tf.Cast"(%arg228) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %228 = "tf.Cast"(%arg229) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %229 = "tf.Cast"(%arg230) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %230 = "tf.Cast"(%arg231) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x960x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %231 = "tf.Cast"(%arg232) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %232 = "tf.Cast"(%arg233) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %233 = "tf.Cast"(%arg234) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %234 = "tf.Cast"(%arg235) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %235 = "tf.Cast"(%arg236) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x960x160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %236 = "tf.Cast"(%arg237) {Truncate = false} : (tensor<!tf_type.resource<tensor<160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %237 = "tf.Cast"(%arg238) {Truncate = false} : (tensor<!tf_type.resource<tensor<160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %238 = "tf.Cast"(%arg239) {Truncate = false} : (tensor<!tf_type.resource<tensor<160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %239 = "tf.Cast"(%arg240) {Truncate = false} : (tensor<!tf_type.resource<tensor<160xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %240 = "tf.Cast"(%arg241) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x160x960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %241 = "tf.Cast"(%arg242) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %242 = "tf.Cast"(%arg243) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %243 = "tf.Cast"(%arg244) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %244 = "tf.Cast"(%arg245) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %245 = "tf.Cast"(%arg246) {Truncate = false} : (tensor<!tf_type.resource<tensor<3x3x960x1xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %246 = "tf.Cast"(%arg247) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %247 = "tf.Cast"(%arg248) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %248 = "tf.Cast"(%arg249) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %249 = "tf.Cast"(%arg250) {Truncate = false} : (tensor<!tf_type.resource<tensor<960xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %250 = "tf.Cast"(%arg251) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x960x320xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %251 = "tf.Cast"(%arg252) {Truncate = false} : (tensor<!tf_type.resource<tensor<320xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %252 = "tf.Cast"(%arg253) {Truncate = false} : (tensor<!tf_type.resource<tensor<320xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %253 = "tf.Cast"(%arg254) {Truncate = false} : (tensor<!tf_type.resource<tensor<320xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %254 = "tf.Cast"(%arg255) {Truncate = false} : (tensor<!tf_type.resource<tensor<320xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %255 = "tf.Cast"(%arg256) {Truncate = false} : (tensor<!tf_type.resource<tensor<1x1x320x1280xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %256 = "tf.Cast"(%arg257) {Truncate = false} : (tensor<!tf_type.resource<tensor<1280xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %257 = "tf.Cast"(%arg258) {Truncate = false} : (tensor<!tf_type.resource<tensor<1280xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %258 = "tf.Cast"(%arg259) {Truncate = false} : (tensor<!tf_type.resource<tensor<1280xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %259 = "tf.Cast"(%arg260) {Truncate = false} : (tensor<!tf_type.resource<tensor<1280xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %260 = "tf.Cast"(%arg261) {Truncate = false} : (tensor<!tf_type.resource<tensor<1280x1000xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %261 = "tf.Cast"(%arg262) {Truncate = false} : (tensor<!tf_type.resource<tensor<1000xf32>>>) -> tensor<!tf_type.resource> loc(#loc0)
    %262 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc1)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc2)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%159) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%158) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4)
      %outputs_6, %control_7 = tf_executor.island wraps "tf.ReadVariableOp"(%157) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5)
      %outputs_8, %control_9 = tf_executor.island wraps "tf.ReadVariableOp"(%156) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc6)
      %outputs_10, %control_11 = tf_executor.island wraps "tf.ReadVariableOp"(%155) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc7)
      %outputs_12, %control_13 = tf_executor.island wraps "tf.ReadVariableOp"(%154) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc8)
      %outputs_14, %control_15 = tf_executor.island wraps "tf.ReadVariableOp"(%153) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc9)
      %outputs_16, %control_17 = tf_executor.island wraps "tf.ReadVariableOp"(%152) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc10)
      %outputs_18, %control_19 = tf_executor.island wraps "tf.ReadVariableOp"(%151) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc11)
      %outputs_20, %control_21 = tf_executor.island wraps "tf.ReadVariableOp"(%150) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc12)
      %outputs_22, %control_23 = tf_executor.island wraps "tf.ReadVariableOp"(%164) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc13)
      %outputs_24, %control_25 = tf_executor.island wraps "tf.ReadVariableOp"(%163) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc14)
      %outputs_26, %control_27 = tf_executor.island wraps "tf.ReadVariableOp"(%162) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc15)
      %outputs_28, %control_29 = tf_executor.island wraps "tf.ReadVariableOp"(%161) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc16)
      %outputs_30, %control_31 = tf_executor.island wraps "tf.ReadVariableOp"(%160) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x96xf32> loc(#loc17)
      %outputs_32, %control_33 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc18)
      %outputs_34, %control_35 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc19)
      %outputs_36, %control_37 = tf_executor.island wraps "tf.ReadVariableOp"(%174) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc20)
      %outputs_38, %control_39 = tf_executor.island wraps "tf.ReadVariableOp"(%173) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc21)
      %outputs_40, %control_41 = tf_executor.island wraps "tf.ReadVariableOp"(%172) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc22)
      %outputs_42, %control_43 = tf_executor.island wraps "tf.ReadVariableOp"(%171) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc23)
      %outputs_44, %control_45 = tf_executor.island wraps "tf.ReadVariableOp"(%170) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc24)
      %outputs_46, %control_47 = tf_executor.island wraps "tf.ReadVariableOp"(%169) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc25)
      %outputs_48, %control_49 = tf_executor.island wraps "tf.ReadVariableOp"(%168) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc26)
      %outputs_50, %control_51 = tf_executor.island wraps "tf.ReadVariableOp"(%167) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc27)
      %outputs_52, %control_53 = tf_executor.island wraps "tf.ReadVariableOp"(%166) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc28)
      %outputs_54, %control_55 = tf_executor.island wraps "tf.ReadVariableOp"(%165) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc29)
      %outputs_56, %control_57 = tf_executor.island wraps "tf.ReadVariableOp"(%179) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc30)
      %outputs_58, %control_59 = tf_executor.island wraps "tf.ReadVariableOp"(%178) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc31)
      %outputs_60, %control_61 = tf_executor.island wraps "tf.ReadVariableOp"(%177) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc32)
      %outputs_62, %control_63 = tf_executor.island wraps "tf.ReadVariableOp"(%176) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc33)
      %outputs_64, %control_65 = tf_executor.island wraps "tf.ReadVariableOp"(%175) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x96xf32> loc(#loc34)
      %outputs_66, %control_67 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc35)
      %outputs_68, %control_69 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc36)
      %outputs_70, %control_71 = tf_executor.island wraps "tf.ReadVariableOp"(%189) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc37)
      %outputs_72, %control_73 = tf_executor.island wraps "tf.ReadVariableOp"(%188) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc38)
      %outputs_74, %control_75 = tf_executor.island wraps "tf.ReadVariableOp"(%187) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc39)
      %outputs_76, %control_77 = tf_executor.island wraps "tf.ReadVariableOp"(%186) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc40)
      %outputs_78, %control_79 = tf_executor.island wraps "tf.ReadVariableOp"(%185) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc41)
      %outputs_80, %control_81 = tf_executor.island wraps "tf.ReadVariableOp"(%184) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc42)
      %outputs_82, %control_83 = tf_executor.island wraps "tf.ReadVariableOp"(%183) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc43)
      %outputs_84, %control_85 = tf_executor.island wraps "tf.ReadVariableOp"(%182) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc44)
      %outputs_86, %control_87 = tf_executor.island wraps "tf.ReadVariableOp"(%181) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc45)
      %outputs_88, %control_89 = tf_executor.island wraps "tf.ReadVariableOp"(%180) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc46)
      %outputs_90, %control_91 = tf_executor.island wraps "tf.ReadVariableOp"(%194) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc47)
      %outputs_92, %control_93 = tf_executor.island wraps "tf.ReadVariableOp"(%193) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc48)
      %outputs_94, %control_95 = tf_executor.island wraps "tf.ReadVariableOp"(%192) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc49)
      %outputs_96, %control_97 = tf_executor.island wraps "tf.ReadVariableOp"(%191) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc50)
      %outputs_98, %control_99 = tf_executor.island wraps "tf.ReadVariableOp"(%190) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x96xf32> loc(#loc51)
      %outputs_100, %control_101 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc52)
      %outputs_102, %control_103 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc53)
      %outputs_104, %control_105 = tf_executor.island wraps "tf.ReadVariableOp"(%204) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc54)
      %outputs_106, %control_107 = tf_executor.island wraps "tf.ReadVariableOp"(%203) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc55)
      %outputs_108, %control_109 = tf_executor.island wraps "tf.ReadVariableOp"(%202) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc56)
      %outputs_110, %control_111 = tf_executor.island wraps "tf.ReadVariableOp"(%201) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc57)
      %outputs_112, %control_113 = tf_executor.island wraps "tf.ReadVariableOp"(%200) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc58)
      %outputs_114, %control_115 = tf_executor.island wraps "tf.ReadVariableOp"(%199) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc59)
      %outputs_116, %control_117 = tf_executor.island wraps "tf.ReadVariableOp"(%198) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc60)
      %outputs_118, %control_119 = tf_executor.island wraps "tf.ReadVariableOp"(%197) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc61)
      %outputs_120, %control_121 = tf_executor.island wraps "tf.ReadVariableOp"(%196) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc62)
      %outputs_122, %control_123 = tf_executor.island wraps "tf.ReadVariableOp"(%195) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc63)
      %outputs_124, %control_125 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc64)
      %outputs_126, %control_127 = tf_executor.island wraps "tf.ReadVariableOp"(%209) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc65)
      %outputs_128, %control_129 = tf_executor.island wraps "tf.ReadVariableOp"(%208) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc66)
      %outputs_130, %control_131 = tf_executor.island wraps "tf.ReadVariableOp"(%207) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc67)
      %outputs_132, %control_133 = tf_executor.island wraps "tf.ReadVariableOp"(%206) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc68)
      %outputs_134, %control_135 = tf_executor.island wraps "tf.ReadVariableOp"(%205) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x160xf32> loc(#loc69)
      %outputs_136, %control_137 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc70)
      %outputs_138, %control_139 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc71)
      %outputs_140, %control_141 = tf_executor.island wraps "tf.ReadVariableOp"(%219) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc72)
      %outputs_142, %control_143 = tf_executor.island wraps "tf.ReadVariableOp"(%218) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc73)
      %outputs_144, %control_145 = tf_executor.island wraps "tf.ReadVariableOp"(%217) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc74)
      %outputs_146, %control_147 = tf_executor.island wraps "tf.ReadVariableOp"(%216) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc75)
      %outputs_148, %control_149 = tf_executor.island wraps "tf.ReadVariableOp"(%215) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc76)
      %outputs_150, %control_151 = tf_executor.island wraps "tf.ReadVariableOp"(%214) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc77)
      %outputs_152, %control_153 = tf_executor.island wraps "tf.ReadVariableOp"(%213) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc78)
      %outputs_154, %control_155 = tf_executor.island wraps "tf.ReadVariableOp"(%212) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc79)
      %outputs_156, %control_157 = tf_executor.island wraps "tf.ReadVariableOp"(%211) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc80)
      %outputs_158, %control_159 = tf_executor.island wraps "tf.ReadVariableOp"(%210) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc81)
      %outputs_160, %control_161 = tf_executor.island wraps "tf.ReadVariableOp"(%224) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc82)
      %outputs_162, %control_163 = tf_executor.island wraps "tf.ReadVariableOp"(%223) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc83)
      %outputs_164, %control_165 = tf_executor.island wraps "tf.ReadVariableOp"(%222) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc84)
      %outputs_166, %control_167 = tf_executor.island wraps "tf.ReadVariableOp"(%221) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc85)
      %outputs_168, %control_169 = tf_executor.island wraps "tf.ReadVariableOp"(%220) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x160xf32> loc(#loc86)
      %outputs_170, %control_171 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc87)
      %outputs_172, %control_173 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc88)
      %outputs_174, %control_175 = tf_executor.island wraps "tf.ReadVariableOp"(%234) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc89)
      %outputs_176, %control_177 = tf_executor.island wraps "tf.ReadVariableOp"(%233) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc90)
      %outputs_178, %control_179 = tf_executor.island wraps "tf.ReadVariableOp"(%232) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc91)
      %outputs_180, %control_181 = tf_executor.island wraps "tf.ReadVariableOp"(%231) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc92)
      %outputs_182, %control_183 = tf_executor.island wraps "tf.ReadVariableOp"(%230) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc93)
      %outputs_184, %control_185 = tf_executor.island wraps "tf.ReadVariableOp"(%229) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc94)
      %outputs_186, %control_187 = tf_executor.island wraps "tf.ReadVariableOp"(%228) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc95)
      %outputs_188, %control_189 = tf_executor.island wraps "tf.ReadVariableOp"(%227) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc96)
      %outputs_190, %control_191 = tf_executor.island wraps "tf.ReadVariableOp"(%226) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc97)
      %outputs_192, %control_193 = tf_executor.island wraps "tf.ReadVariableOp"(%225) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc98)
      %outputs_194, %control_195 = tf_executor.island wraps "tf.ReadVariableOp"(%239) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc99)
      %outputs_196, %control_197 = tf_executor.island wraps "tf.ReadVariableOp"(%238) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc100)
      %outputs_198, %control_199 = tf_executor.island wraps "tf.ReadVariableOp"(%237) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc101)
      %outputs_200, %control_201 = tf_executor.island wraps "tf.ReadVariableOp"(%236) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc102)
      %outputs_202, %control_203 = tf_executor.island wraps "tf.ReadVariableOp"(%235) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x160xf32> loc(#loc103)
      %outputs_204, %control_205 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc104)
      %outputs_206, %control_207 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc105)
      %outputs_208, %control_209 = tf_executor.island wraps "tf.ReadVariableOp"(%249) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc106)
      %outputs_210, %control_211 = tf_executor.island wraps "tf.ReadVariableOp"(%248) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc107)
      %outputs_212, %control_213 = tf_executor.island wraps "tf.ReadVariableOp"(%247) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc108)
      %outputs_214, %control_215 = tf_executor.island wraps "tf.ReadVariableOp"(%246) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc109)
      %outputs_216, %control_217 = tf_executor.island wraps "tf.ReadVariableOp"(%245) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc110)
      %outputs_218, %control_219 = tf_executor.island wraps "tf.ReadVariableOp"(%244) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc111)
      %outputs_220, %control_221 = tf_executor.island wraps "tf.ReadVariableOp"(%243) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc112)
      %outputs_222, %control_223 = tf_executor.island wraps "tf.ReadVariableOp"(%242) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc113)
      %outputs_224, %control_225 = tf_executor.island wraps "tf.ReadVariableOp"(%241) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc114)
      %outputs_226, %control_227 = tf_executor.island wraps "tf.ReadVariableOp"(%240) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc115)
      %outputs_228, %control_229 = tf_executor.island wraps "tf.ReadVariableOp"(%254) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc116)
      %outputs_230, %control_231 = tf_executor.island wraps "tf.ReadVariableOp"(%253) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc117)
      %outputs_232, %control_233 = tf_executor.island wraps "tf.ReadVariableOp"(%252) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc118)
      %outputs_234, %control_235 = tf_executor.island wraps "tf.ReadVariableOp"(%251) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc119)
      %outputs_236, %control_237 = tf_executor.island wraps "tf.ReadVariableOp"(%250) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x320xf32> loc(#loc120)
      %outputs_238, %control_239 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 96, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc121)
      %outputs_240, %control_241 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc122)
      %outputs_242, %control_243 = tf_executor.island wraps "tf.ReadVariableOp"(%24) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc123)
      %outputs_244, %control_245 = tf_executor.island wraps "tf.ReadVariableOp"(%23) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc124)
      %outputs_246, %control_247 = tf_executor.island wraps "tf.ReadVariableOp"(%22) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc125)
      %outputs_248, %control_249 = tf_executor.island wraps "tf.ReadVariableOp"(%21) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc126)
      %outputs_250, %control_251 = tf_executor.island wraps "tf.ReadVariableOp"(%20) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x96x1xf32> loc(#loc127)
      %outputs_252, %control_253 = tf_executor.island wraps "tf.ReadVariableOp"(%19) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc128)
      %outputs_254, %control_255 = tf_executor.island wraps "tf.ReadVariableOp"(%18) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc129)
      %outputs_256, %control_257 = tf_executor.island wraps "tf.ReadVariableOp"(%17) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc130)
      %outputs_258, %control_259 = tf_executor.island wraps "tf.ReadVariableOp"(%16) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc131)
      %outputs_260, %control_261 = tf_executor.island wraps "tf.ReadVariableOp"(%15) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x16x96xf32> loc(#loc132)
      %outputs_262, %control_263 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc133)
      %outputs_264, %control_265 = tf_executor.island wraps "tf.ReadVariableOp"(%29) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc134)
      %outputs_266, %control_267 = tf_executor.island wraps "tf.ReadVariableOp"(%28) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc135)
      %outputs_268, %control_269 = tf_executor.island wraps "tf.ReadVariableOp"(%27) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc136)
      %outputs_270, %control_271 = tf_executor.island wraps "tf.ReadVariableOp"(%26) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc137)
      %outputs_272, %control_273 = tf_executor.island wraps "tf.ReadVariableOp"(%25) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x24xf32> loc(#loc138)
      %outputs_274, %control_275 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 144, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc139)
      %outputs_276, %control_277 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc140)
      %outputs_278, %control_279 = tf_executor.island wraps "tf.ReadVariableOp"(%39) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc141)
      %outputs_280, %control_281 = tf_executor.island wraps "tf.ReadVariableOp"(%38) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc142)
      %outputs_282, %control_283 = tf_executor.island wraps "tf.ReadVariableOp"(%37) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc143)
      %outputs_284, %control_285 = tf_executor.island wraps "tf.ReadVariableOp"(%36) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc144)
      %outputs_286, %control_287 = tf_executor.island wraps "tf.ReadVariableOp"(%35) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x144x1xf32> loc(#loc145)
      %outputs_288, %control_289 = tf_executor.island wraps "tf.ReadVariableOp"(%34) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc146)
      %outputs_290, %control_291 = tf_executor.island wraps "tf.ReadVariableOp"(%33) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc147)
      %outputs_292, %control_293 = tf_executor.island wraps "tf.ReadVariableOp"(%32) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc148)
      %outputs_294, %control_295 = tf_executor.island wraps "tf.ReadVariableOp"(%31) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc149)
      %outputs_296, %control_297 = tf_executor.island wraps "tf.ReadVariableOp"(%30) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x24x144xf32> loc(#loc150)
      %outputs_298, %control_299 = tf_executor.island wraps "tf.ReadVariableOp"(%44) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc151)
      %outputs_300, %control_301 = tf_executor.island wraps "tf.ReadVariableOp"(%43) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc152)
      %outputs_302, %control_303 = tf_executor.island wraps "tf.ReadVariableOp"(%42) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc153)
      %outputs_304, %control_305 = tf_executor.island wraps "tf.ReadVariableOp"(%41) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc154)
      %outputs_306, %control_307 = tf_executor.island wraps "tf.ReadVariableOp"(%40) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x144x24xf32> loc(#loc155)
      %outputs_308, %control_309 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 144, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc156)
      %outputs_310, %control_311 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc157)
      %outputs_312, %control_313 = tf_executor.island wraps "tf.ReadVariableOp"(%54) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc158)
      %outputs_314, %control_315 = tf_executor.island wraps "tf.ReadVariableOp"(%53) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc159)
      %outputs_316, %control_317 = tf_executor.island wraps "tf.ReadVariableOp"(%52) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc160)
      %outputs_318, %control_319 = tf_executor.island wraps "tf.ReadVariableOp"(%51) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc161)
      %outputs_320, %control_321 = tf_executor.island wraps "tf.ReadVariableOp"(%50) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x144x1xf32> loc(#loc162)
      %outputs_322, %control_323 = tf_executor.island wraps "tf.ReadVariableOp"(%49) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc163)
      %outputs_324, %control_325 = tf_executor.island wraps "tf.ReadVariableOp"(%48) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc164)
      %outputs_326, %control_327 = tf_executor.island wraps "tf.ReadVariableOp"(%47) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc165)
      %outputs_328, %control_329 = tf_executor.island wraps "tf.ReadVariableOp"(%46) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc166)
      %outputs_330, %control_331 = tf_executor.island wraps "tf.ReadVariableOp"(%45) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x24x144xf32> loc(#loc167)
      %outputs_332, %control_333 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc168)
      %outputs_334, %control_335 = tf_executor.island wraps "tf.ReadVariableOp"(%59) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc169)
      %outputs_336, %control_337 = tf_executor.island wraps "tf.ReadVariableOp"(%58) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc170)
      %outputs_338, %control_339 = tf_executor.island wraps "tf.ReadVariableOp"(%57) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc171)
      %outputs_340, %control_341 = tf_executor.island wraps "tf.ReadVariableOp"(%56) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc172)
      %outputs_342, %control_343 = tf_executor.island wraps "tf.ReadVariableOp"(%55) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x144x32xf32> loc(#loc173)
      %outputs_344, %control_345 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc174)
      %outputs_346, %control_347 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc175)
      %outputs_348, %control_349 = tf_executor.island wraps "tf.ReadVariableOp"(%69) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc176)
      %outputs_350, %control_351 = tf_executor.island wraps "tf.ReadVariableOp"(%68) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc177)
      %outputs_352, %control_353 = tf_executor.island wraps "tf.ReadVariableOp"(%67) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc178)
      %outputs_354, %control_355 = tf_executor.island wraps "tf.ReadVariableOp"(%66) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc179)
      %outputs_356, %control_357 = tf_executor.island wraps "tf.ReadVariableOp"(%65) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc180)
      %outputs_358, %control_359 = tf_executor.island wraps "tf.ReadVariableOp"(%64) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc181)
      %outputs_360, %control_361 = tf_executor.island wraps "tf.ReadVariableOp"(%63) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc182)
      %outputs_362, %control_363 = tf_executor.island wraps "tf.ReadVariableOp"(%62) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc183)
      %outputs_364, %control_365 = tf_executor.island wraps "tf.ReadVariableOp"(%61) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc184)
      %outputs_366, %control_367 = tf_executor.island wraps "tf.ReadVariableOp"(%60) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc185)
      %outputs_368, %control_369 = tf_executor.island wraps "tf.ReadVariableOp"(%74) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc186)
      %outputs_370, %control_371 = tf_executor.island wraps "tf.ReadVariableOp"(%73) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc187)
      %outputs_372, %control_373 = tf_executor.island wraps "tf.ReadVariableOp"(%72) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc188)
      %outputs_374, %control_375 = tf_executor.island wraps "tf.ReadVariableOp"(%71) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc189)
      %outputs_376, %control_377 = tf_executor.island wraps "tf.ReadVariableOp"(%70) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x32xf32> loc(#loc190)
      %outputs_378, %control_379 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc191)
      %outputs_380, %control_381 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc192)
      %outputs_382, %control_383 = tf_executor.island wraps "tf.ReadVariableOp"(%84) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc193)
      %outputs_384, %control_385 = tf_executor.island wraps "tf.ReadVariableOp"(%83) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc194)
      %outputs_386, %control_387 = tf_executor.island wraps "tf.ReadVariableOp"(%82) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc195)
      %outputs_388, %control_389 = tf_executor.island wraps "tf.ReadVariableOp"(%81) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc196)
      %outputs_390, %control_391 = tf_executor.island wraps "tf.ReadVariableOp"(%80) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc197)
      %outputs_392, %control_393 = tf_executor.island wraps "tf.ReadVariableOp"(%79) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc198)
      %outputs_394, %control_395 = tf_executor.island wraps "tf.ReadVariableOp"(%78) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc199)
      %outputs_396, %control_397 = tf_executor.island wraps "tf.ReadVariableOp"(%77) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc200)
      %outputs_398, %control_399 = tf_executor.island wraps "tf.ReadVariableOp"(%76) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc201)
      %outputs_400, %control_401 = tf_executor.island wraps "tf.ReadVariableOp"(%75) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc202)
      %outputs_402, %control_403 = tf_executor.island wraps "tf.ReadVariableOp"(%89) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc203)
      %outputs_404, %control_405 = tf_executor.island wraps "tf.ReadVariableOp"(%88) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc204)
      %outputs_406, %control_407 = tf_executor.island wraps "tf.ReadVariableOp"(%87) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc205)
      %outputs_408, %control_409 = tf_executor.island wraps "tf.ReadVariableOp"(%86) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc206)
      %outputs_410, %control_411 = tf_executor.island wraps "tf.ReadVariableOp"(%85) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x32xf32> loc(#loc207)
      %outputs_412, %control_413 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc208)
      %outputs_414, %control_415 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc209)
      %outputs_416, %control_417 = tf_executor.island wraps "tf.ReadVariableOp"(%99) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc210)
      %outputs_418, %control_419 = tf_executor.island wraps "tf.ReadVariableOp"(%98) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc211)
      %outputs_420, %control_421 = tf_executor.island wraps "tf.ReadVariableOp"(%97) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc212)
      %outputs_422, %control_423 = tf_executor.island wraps "tf.ReadVariableOp"(%96) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc213)
      %outputs_424, %control_425 = tf_executor.island wraps "tf.ReadVariableOp"(%95) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc214)
      %outputs_426, %control_427 = tf_executor.island wraps "tf.ReadVariableOp"(%94) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc215)
      %outputs_428, %control_429 = tf_executor.island wraps "tf.ReadVariableOp"(%93) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc216)
      %outputs_430, %control_431 = tf_executor.island wraps "tf.ReadVariableOp"(%92) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc217)
      %outputs_432, %control_433 = tf_executor.island wraps "tf.ReadVariableOp"(%91) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc218)
      %outputs_434, %control_435 = tf_executor.island wraps "tf.ReadVariableOp"(%90) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc219)
      %outputs_436, %control_437 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc220)
      %outputs_438, %control_439 = tf_executor.island wraps "tf.ReadVariableOp"(%104) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc221)
      %outputs_440, %control_441 = tf_executor.island wraps "tf.ReadVariableOp"(%103) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc222)
      %outputs_442, %control_443 = tf_executor.island wraps "tf.ReadVariableOp"(%102) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc223)
      %outputs_444, %control_445 = tf_executor.island wraps "tf.ReadVariableOp"(%101) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc224)
      %outputs_446, %control_447 = tf_executor.island wraps "tf.ReadVariableOp"(%100) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x64xf32> loc(#loc225)
      %outputs_448, %control_449 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc226)
      %outputs_450, %control_451 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc227)
      %outputs_452, %control_453 = tf_executor.island wraps "tf.ReadVariableOp"(%114) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc228)
      %outputs_454, %control_455 = tf_executor.island wraps "tf.ReadVariableOp"(%113) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc229)
      %outputs_456, %control_457 = tf_executor.island wraps "tf.ReadVariableOp"(%112) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc230)
      %outputs_458, %control_459 = tf_executor.island wraps "tf.ReadVariableOp"(%111) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc231)
      %outputs_460, %control_461 = tf_executor.island wraps "tf.ReadVariableOp"(%110) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc232)
      %outputs_462, %control_463 = tf_executor.island wraps "tf.ReadVariableOp"(%109) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc233)
      %outputs_464, %control_465 = tf_executor.island wraps "tf.ReadVariableOp"(%108) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc234)
      %outputs_466, %control_467 = tf_executor.island wraps "tf.ReadVariableOp"(%107) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc235)
      %outputs_468, %control_469 = tf_executor.island wraps "tf.ReadVariableOp"(%106) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc236)
      %outputs_470, %control_471 = tf_executor.island wraps "tf.ReadVariableOp"(%105) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc237)
      %outputs_472, %control_473 = tf_executor.island wraps "tf.ReadVariableOp"(%119) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc238)
      %outputs_474, %control_475 = tf_executor.island wraps "tf.ReadVariableOp"(%118) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc239)
      %outputs_476, %control_477 = tf_executor.island wraps "tf.ReadVariableOp"(%117) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc240)
      %outputs_478, %control_479 = tf_executor.island wraps "tf.ReadVariableOp"(%116) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc241)
      %outputs_480, %control_481 = tf_executor.island wraps "tf.ReadVariableOp"(%115) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc242)
      %outputs_482, %control_483 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc243)
      %outputs_484, %control_485 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc244)
      %outputs_486, %control_487 = tf_executor.island wraps "tf.ReadVariableOp"(%129) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc245)
      %outputs_488, %control_489 = tf_executor.island wraps "tf.ReadVariableOp"(%128) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc246)
      %outputs_490, %control_491 = tf_executor.island wraps "tf.ReadVariableOp"(%127) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc247)
      %outputs_492, %control_493 = tf_executor.island wraps "tf.ReadVariableOp"(%126) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc248)
      %outputs_494, %control_495 = tf_executor.island wraps "tf.ReadVariableOp"(%125) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc249)
      %outputs_496, %control_497 = tf_executor.island wraps "tf.ReadVariableOp"(%124) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc250)
      %outputs_498, %control_499 = tf_executor.island wraps "tf.ReadVariableOp"(%123) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc251)
      %outputs_500, %control_501 = tf_executor.island wraps "tf.ReadVariableOp"(%122) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc252)
      %outputs_502, %control_503 = tf_executor.island wraps "tf.ReadVariableOp"(%121) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc253)
      %outputs_504, %control_505 = tf_executor.island wraps "tf.ReadVariableOp"(%120) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc254)
      %outputs_506, %control_507 = tf_executor.island wraps "tf.ReadVariableOp"(%134) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc255)
      %outputs_508, %control_509 = tf_executor.island wraps "tf.ReadVariableOp"(%133) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc256)
      %outputs_510, %control_511 = tf_executor.island wraps "tf.ReadVariableOp"(%132) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc257)
      %outputs_512, %control_513 = tf_executor.island wraps "tf.ReadVariableOp"(%131) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc258)
      %outputs_514, %control_515 = tf_executor.island wraps "tf.ReadVariableOp"(%130) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc259)
      %outputs_516, %control_517 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc260)
      %outputs_518, %control_519 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc261)
      %outputs_520, %control_521 = tf_executor.island wraps "tf.ReadVariableOp"(%144) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc262)
      %outputs_522, %control_523 = tf_executor.island wraps "tf.ReadVariableOp"(%143) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc263)
      %outputs_524, %control_525 = tf_executor.island wraps "tf.ReadVariableOp"(%142) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc264)
      %outputs_526, %control_527 = tf_executor.island wraps "tf.ReadVariableOp"(%141) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc265)
      %outputs_528, %control_529 = tf_executor.island wraps "tf.ReadVariableOp"(%140) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc266)
      %outputs_530, %control_531 = tf_executor.island wraps "tf.ReadVariableOp"(%139) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc267)
      %outputs_532, %control_533 = tf_executor.island wraps "tf.ReadVariableOp"(%138) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc268)
      %outputs_534, %control_535 = tf_executor.island wraps "tf.ReadVariableOp"(%137) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc269)
      %outputs_536, %control_537 = tf_executor.island wraps "tf.ReadVariableOp"(%136) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc270)
      %outputs_538, %control_539 = tf_executor.island wraps "tf.ReadVariableOp"(%135) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc271)
      %outputs_540, %control_541 = tf_executor.island wraps "tf.ReadVariableOp"(%149) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc272)
      %outputs_542, %control_543 = tf_executor.island wraps "tf.ReadVariableOp"(%148) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc273)
      %outputs_544, %control_545 = tf_executor.island wraps "tf.ReadVariableOp"(%147) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc274)
      %outputs_546, %control_547 = tf_executor.island wraps "tf.ReadVariableOp"(%146) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc275)
      %outputs_548, %control_549 = tf_executor.island wraps "tf.ReadVariableOp"(%145) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc276)
      %outputs_550, %control_551 = tf_executor.island wraps "tf.ReadVariableOp"(%4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc277)
      %outputs_552, %control_553 = tf_executor.island wraps "tf.ReadVariableOp"(%3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc278)
      %outputs_554, %control_555 = tf_executor.island wraps "tf.ReadVariableOp"(%2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc279)
      %outputs_556, %control_557 = tf_executor.island wraps "tf.ReadVariableOp"(%1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc280)
      %outputs_558, %control_559 = tf_executor.island wraps "tf.ReadVariableOp"(%0) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x3x32xf32> loc(#loc281)
      %outputs_560, %control_561 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs_558) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 2, 2, 1], use_cudnn_on_gpu = true} : (tensor<1x224x224x3xf32>, tensor<3x3x3x32xf32>) -> tensor<1x112x112x32xf32> loc(#loc282)
      %outputs_562:6, %control_563 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_560, %outputs_556, %outputs_554, %outputs_552, %outputs_550) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<1x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc283)
      %outputs_564, %control_565 = tf_executor.island wraps "tf.Relu6"(%outputs_562#0) {device = ""} : (tensor<1x112x112x32xf32>) -> tensor<1x112x112x32xf32> loc(#loc284)
      %outputs_566, %control_567 = tf_executor.island wraps "tf.ReadVariableOp"(%259) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc285)
      %outputs_568, %control_569 = tf_executor.island wraps "tf.ReadVariableOp"(%258) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc286)
      %outputs_570, %control_571 = tf_executor.island wraps "tf.ReadVariableOp"(%257) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc287)
      %outputs_572, %control_573 = tf_executor.island wraps "tf.ReadVariableOp"(%256) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc288)
      %outputs_574, %control_575 = tf_executor.island wraps "tf.ReadVariableOp"(%255) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x320x1280xf32> loc(#loc289)
      %outputs_576, %control_577 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 32, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc290)
      %outputs_578, %control_579 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc291)
      %outputs_580, %control_581 = tf_executor.island wraps "tf.ReadVariableOp"(%9) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc292)
      %outputs_582, %control_583 = tf_executor.island wraps "tf.ReadVariableOp"(%8) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc293)
      %outputs_584, %control_585 = tf_executor.island wraps "tf.ReadVariableOp"(%7) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc294)
      %outputs_586, %control_587 = tf_executor.island wraps "tf.ReadVariableOp"(%6) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc295)
      %outputs_588, %control_589 = tf_executor.island wraps "tf.ReadVariableOp"(%5) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x32x1xf32> loc(#loc296)
      %outputs_590, %control_591 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_564, %outputs_588) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<1x112x112x32xf32>, tensor<3x3x32x1xf32>) -> tensor<1x112x112x32xf32> loc(#loc297)
      %outputs_592:6, %control_593 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_590, %outputs_586, %outputs_584, %outputs_582, %outputs_580) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<1x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc298)
      %outputs_594, %control_595 = tf_executor.island wraps "tf.Relu6"(%outputs_592#0) {device = ""} : (tensor<1x112x112x32xf32>) -> tensor<1x112x112x32xf32> loc(#loc299)
      %outputs_596, %control_597 = tf_executor.island wraps "tf.ReadVariableOp"(%14) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc300)
      %outputs_598, %control_599 = tf_executor.island wraps "tf.ReadVariableOp"(%13) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc301)
      %outputs_600, %control_601 = tf_executor.island wraps "tf.ReadVariableOp"(%12) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc302)
      %outputs_602, %control_603 = tf_executor.island wraps "tf.ReadVariableOp"(%11) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc303)
      %outputs_604, %control_605 = tf_executor.island wraps "tf.ReadVariableOp"(%10) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x16xf32> loc(#loc304)
      %outputs_606, %control_607 = tf_executor.island wraps "tf.Conv2D"(%outputs_594, %outputs_604) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x112x112x32xf32>, tensor<1x1x32x16xf32>) -> tensor<1x112x112x16xf32> loc(#loc305)
      %outputs_608:6, %control_609 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_606, %outputs_602, %outputs_600, %outputs_598, %outputs_596) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x112x112x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> (tensor<1x112x112x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<*xf32>) loc(#loc306)
      %outputs_610, %control_611 = tf_executor.island wraps "tf.Conv2D"(%outputs_608#0, %outputs_260) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x112x112x16xf32>, tensor<1x1x16x96xf32>) -> tensor<1x112x112x96xf32> loc(#loc307)
      %outputs_612:6, %control_613 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_610, %outputs_258, %outputs_256, %outputs_254, %outputs_252) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x112x112x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<1x112x112x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc308)
      %outputs_614, %control_615 = tf_executor.island wraps "tf.Relu6"(%outputs_612#0) {device = ""} : (tensor<1x112x112x96xf32>) -> tensor<1x112x112x96xf32> loc(#loc309)
      %outputs_616, %control_617 = tf_executor.island wraps "tf.Pad"(%outputs_614, %outputs_262) {device = ""} : (tensor<1x112x112x96xf32>, tensor<4x2xi32>) -> tensor<1x113x113x96xf32> loc(#loc310)
      %outputs_618, %control_619 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_616, %outputs_250) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<1x113x113x96xf32>, tensor<3x3x96x1xf32>) -> tensor<1x56x56x96xf32> loc(#loc311)
      %outputs_620:6, %control_621 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_618, %outputs_248, %outputs_246, %outputs_244, %outputs_242) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x56x56x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<1x56x56x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc312)
      %outputs_622, %control_623 = tf_executor.island wraps "tf.Relu6"(%outputs_620#0) {device = ""} : (tensor<1x56x56x96xf32>) -> tensor<1x56x56x96xf32> loc(#loc313)
      %outputs_624, %control_625 = tf_executor.island wraps "tf.Conv2D"(%outputs_622, %outputs_272) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x56x56x96xf32>, tensor<1x1x96x24xf32>) -> tensor<1x56x56x24xf32> loc(#loc314)
      %outputs_626:6, %control_627 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_624, %outputs_270, %outputs_268, %outputs_266, %outputs_264) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<1x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc315)
      %outputs_628, %control_629 = tf_executor.island wraps "tf.Conv2D"(%outputs_626#0, %outputs_296) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<1x56x56x144xf32> loc(#loc316)
      %outputs_630:6, %control_631 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_628, %outputs_294, %outputs_292, %outputs_290, %outputs_288) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<1x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc317)
      %outputs_632, %control_633 = tf_executor.island wraps "tf.Relu6"(%outputs_630#0) {device = ""} : (tensor<1x56x56x144xf32>) -> tensor<1x56x56x144xf32> loc(#loc318)
      %outputs_634, %control_635 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_632, %outputs_286) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<1x56x56x144xf32>, tensor<3x3x144x1xf32>) -> tensor<1x56x56x144xf32> loc(#loc319)
      %outputs_636:6, %control_637 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_634, %outputs_284, %outputs_282, %outputs_280, %outputs_278) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<1x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc320)
      %outputs_638, %control_639 = tf_executor.island wraps "tf.Relu6"(%outputs_636#0) {device = ""} : (tensor<1x56x56x144xf32>) -> tensor<1x56x56x144xf32> loc(#loc321)
      %outputs_640, %control_641 = tf_executor.island wraps "tf.Conv2D"(%outputs_638, %outputs_306) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x56x56x144xf32>, tensor<1x1x144x24xf32>) -> tensor<1x56x56x24xf32> loc(#loc322)
      %outputs_642:6, %control_643 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_640, %outputs_304, %outputs_302, %outputs_300, %outputs_298) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<1x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc323)
      %outputs_644, %control_645 = tf_executor.island wraps "tf.AddV2"(%outputs_626#0, %outputs_642#0) {device = ""} : (tensor<1x56x56x24xf32>, tensor<1x56x56x24xf32>) -> tensor<1x56x56x24xf32> loc(#loc324)
      %outputs_646, %control_647 = tf_executor.island wraps "tf.Conv2D"(%outputs_644, %outputs_330) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<1x56x56x144xf32> loc(#loc325)
      %outputs_648:6, %control_649 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_646, %outputs_328, %outputs_326, %outputs_324, %outputs_322) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<1x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc326)
      %outputs_650, %control_651 = tf_executor.island wraps "tf.Relu6"(%outputs_648#0) {device = ""} : (tensor<1x56x56x144xf32>) -> tensor<1x56x56x144xf32> loc(#loc327)
      %outputs_652, %control_653 = tf_executor.island wraps "tf.Pad"(%outputs_650, %outputs_332) {device = ""} : (tensor<1x56x56x144xf32>, tensor<4x2xi32>) -> tensor<1x57x57x144xf32> loc(#loc328)
      %outputs_654, %control_655 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_652, %outputs_320) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<1x57x57x144xf32>, tensor<3x3x144x1xf32>) -> tensor<1x28x28x144xf32> loc(#loc329)
      %outputs_656:6, %control_657 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_654, %outputs_318, %outputs_316, %outputs_314, %outputs_312) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x28x28x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<1x28x28x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc330)
      %outputs_658, %control_659 = tf_executor.island wraps "tf.Relu6"(%outputs_656#0) {device = ""} : (tensor<1x28x28x144xf32>) -> tensor<1x28x28x144xf32> loc(#loc331)
      %outputs_660, %control_661 = tf_executor.island wraps "tf.Conv2D"(%outputs_658, %outputs_342) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x28x28x144xf32>, tensor<1x1x144x32xf32>) -> tensor<1x28x28x32xf32> loc(#loc332)
      %outputs_662:6, %control_663 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_660, %outputs_340, %outputs_338, %outputs_336, %outputs_334) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<1x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc333)
      %outputs_664, %control_665 = tf_executor.island wraps "tf.Conv2D"(%outputs_662#0, %outputs_366) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<1x28x28x192xf32> loc(#loc334)
      %outputs_666:6, %control_667 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_664, %outputs_364, %outputs_362, %outputs_360, %outputs_358) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc335)
      %outputs_668, %control_669 = tf_executor.island wraps "tf.Relu6"(%outputs_666#0) {device = ""} : (tensor<1x28x28x192xf32>) -> tensor<1x28x28x192xf32> loc(#loc336)
      %outputs_670, %control_671 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_668, %outputs_356) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<1x28x28x192xf32>, tensor<3x3x192x1xf32>) -> tensor<1x28x28x192xf32> loc(#loc337)
      %outputs_672:6, %control_673 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_670, %outputs_354, %outputs_352, %outputs_350, %outputs_348) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc338)
      %outputs_674, %control_675 = tf_executor.island wraps "tf.Relu6"(%outputs_672#0) {device = ""} : (tensor<1x28x28x192xf32>) -> tensor<1x28x28x192xf32> loc(#loc339)
      %outputs_676, %control_677 = tf_executor.island wraps "tf.Conv2D"(%outputs_674, %outputs_376) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<1x28x28x32xf32> loc(#loc340)
      %outputs_678:6, %control_679 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_676, %outputs_374, %outputs_372, %outputs_370, %outputs_368) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<1x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc341)
      %outputs_680, %control_681 = tf_executor.island wraps "tf.AddV2"(%outputs_662#0, %outputs_678#0) {device = ""} : (tensor<1x28x28x32xf32>, tensor<1x28x28x32xf32>) -> tensor<1x28x28x32xf32> loc(#loc342)
      %outputs_682, %control_683 = tf_executor.island wraps "tf.Conv2D"(%outputs_680, %outputs_400) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<1x28x28x192xf32> loc(#loc343)
      %outputs_684:6, %control_685 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_682, %outputs_398, %outputs_396, %outputs_394, %outputs_392) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc344)
      %outputs_686, %control_687 = tf_executor.island wraps "tf.Relu6"(%outputs_684#0) {device = ""} : (tensor<1x28x28x192xf32>) -> tensor<1x28x28x192xf32> loc(#loc345)
      %outputs_688, %control_689 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_686, %outputs_390) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<1x28x28x192xf32>, tensor<3x3x192x1xf32>) -> tensor<1x28x28x192xf32> loc(#loc346)
      %outputs_690:6, %control_691 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_688, %outputs_388, %outputs_386, %outputs_384, %outputs_382) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc347)
      %outputs_692, %control_693 = tf_executor.island wraps "tf.Relu6"(%outputs_690#0) {device = ""} : (tensor<1x28x28x192xf32>) -> tensor<1x28x28x192xf32> loc(#loc348)
      %outputs_694, %control_695 = tf_executor.island wraps "tf.Conv2D"(%outputs_692, %outputs_410) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<1x28x28x32xf32> loc(#loc349)
      %outputs_696:6, %control_697 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_694, %outputs_408, %outputs_406, %outputs_404, %outputs_402) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<1x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc350)
      %outputs_698, %control_699 = tf_executor.island wraps "tf.AddV2"(%outputs_680, %outputs_696#0) {device = ""} : (tensor<1x28x28x32xf32>, tensor<1x28x28x32xf32>) -> tensor<1x28x28x32xf32> loc(#loc351)
      %outputs_700, %control_701 = tf_executor.island wraps "tf.Conv2D"(%outputs_698, %outputs_434) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<1x28x28x192xf32> loc(#loc352)
      %outputs_702:6, %control_703 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_700, %outputs_432, %outputs_430, %outputs_428, %outputs_426) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<1x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc353)
      %outputs_704, %control_705 = tf_executor.island wraps "tf.Relu6"(%outputs_702#0) {device = ""} : (tensor<1x28x28x192xf32>) -> tensor<1x28x28x192xf32> loc(#loc354)
      %outputs_706, %control_707 = tf_executor.island wraps "tf.Pad"(%outputs_704, %outputs_436) {device = ""} : (tensor<1x28x28x192xf32>, tensor<4x2xi32>) -> tensor<1x29x29x192xf32> loc(#loc355)
      %outputs_708, %control_709 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_706, %outputs_424) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<1x29x29x192xf32>, tensor<3x3x192x1xf32>) -> tensor<1x14x14x192xf32> loc(#loc356)
      %outputs_710:6, %control_711 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_708, %outputs_422, %outputs_420, %outputs_418, %outputs_416) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<1x14x14x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc357)
      %outputs_712, %control_713 = tf_executor.island wraps "tf.Relu6"(%outputs_710#0) {device = ""} : (tensor<1x14x14x192xf32>) -> tensor<1x14x14x192xf32> loc(#loc358)
      %outputs_714, %control_715 = tf_executor.island wraps "tf.Conv2D"(%outputs_712, %outputs_446) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x192xf32>, tensor<1x1x192x64xf32>) -> tensor<1x14x14x64xf32> loc(#loc359)
      %outputs_716:6, %control_717 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_714, %outputs_444, %outputs_442, %outputs_440, %outputs_438) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<1x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc360)
      %outputs_718, %control_719 = tf_executor.island wraps "tf.Conv2D"(%outputs_716#0, %outputs_470) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc361)
      %outputs_720:6, %control_721 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_718, %outputs_468, %outputs_466, %outputs_464, %outputs_462) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc362)
      %outputs_722, %control_723 = tf_executor.island wraps "tf.Relu6"(%outputs_720#0) {device = ""} : (tensor<1x14x14x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc363)
      %outputs_724, %control_725 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_722, %outputs_460) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<1x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<1x14x14x384xf32> loc(#loc364)
      %outputs_726:6, %control_727 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_724, %outputs_458, %outputs_456, %outputs_454, %outputs_452) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc365)
      %outputs_728, %control_729 = tf_executor.island wraps "tf.Relu6"(%outputs_726#0) {device = ""} : (tensor<1x14x14x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc366)
      %outputs_730, %control_731 = tf_executor.island wraps "tf.Conv2D"(%outputs_728, %outputs_480) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<1x14x14x64xf32> loc(#loc367)
      %outputs_732:6, %control_733 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_730, %outputs_478, %outputs_476, %outputs_474, %outputs_472) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<1x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc368)
      %outputs_734, %control_735 = tf_executor.island wraps "tf.AddV2"(%outputs_716#0, %outputs_732#0) {device = ""} : (tensor<1x14x14x64xf32>, tensor<1x14x14x64xf32>) -> tensor<1x14x14x64xf32> loc(#loc369)
      %outputs_736, %control_737 = tf_executor.island wraps "tf.Conv2D"(%outputs_734, %outputs_504) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc370)
      %outputs_738:6, %control_739 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_736, %outputs_502, %outputs_500, %outputs_498, %outputs_496) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc371)
      %outputs_740, %control_741 = tf_executor.island wraps "tf.Relu6"(%outputs_738#0) {device = ""} : (tensor<1x14x14x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc372)
      %outputs_742, %control_743 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_740, %outputs_494) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<1x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<1x14x14x384xf32> loc(#loc373)
      %outputs_744:6, %control_745 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_742, %outputs_492, %outputs_490, %outputs_488, %outputs_486) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc374)
      %outputs_746, %control_747 = tf_executor.island wraps "tf.Relu6"(%outputs_744#0) {device = ""} : (tensor<1x14x14x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc375)
      %outputs_748, %control_749 = tf_executor.island wraps "tf.Conv2D"(%outputs_746, %outputs_514) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<1x14x14x64xf32> loc(#loc376)
      %outputs_750:6, %control_751 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_748, %outputs_512, %outputs_510, %outputs_508, %outputs_506) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<1x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc377)
      %outputs_752, %control_753 = tf_executor.island wraps "tf.AddV2"(%outputs_734, %outputs_750#0) {device = ""} : (tensor<1x14x14x64xf32>, tensor<1x14x14x64xf32>) -> tensor<1x14x14x64xf32> loc(#loc378)
      %outputs_754, %control_755 = tf_executor.island wraps "tf.Conv2D"(%outputs_752, %outputs_538) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc379)
      %outputs_756:6, %control_757 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_754, %outputs_536, %outputs_534, %outputs_532, %outputs_530) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc380)
      %outputs_758, %control_759 = tf_executor.island wraps "tf.Relu6"(%outputs_756#0) {device = ""} : (tensor<1x14x14x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc381)
      %outputs_760, %control_761 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_758, %outputs_528) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<1x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<1x14x14x384xf32> loc(#loc382)
      %outputs_762:6, %control_763 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_760, %outputs_526, %outputs_524, %outputs_522, %outputs_520) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc383)
      %outputs_764, %control_765 = tf_executor.island wraps "tf.Relu6"(%outputs_762#0) {device = ""} : (tensor<1x14x14x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc384)
      %outputs_766, %control_767 = tf_executor.island wraps "tf.Conv2D"(%outputs_764, %outputs_548) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<1x14x14x64xf32> loc(#loc385)
      %outputs_768:6, %control_769 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_766, %outputs_546, %outputs_544, %outputs_542, %outputs_540) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<1x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc386)
      %outputs_770, %control_771 = tf_executor.island wraps "tf.AddV2"(%outputs_752, %outputs_768#0) {device = ""} : (tensor<1x14x14x64xf32>, tensor<1x14x14x64xf32>) -> tensor<1x14x14x64xf32> loc(#loc387)
      %outputs_772, %control_773 = tf_executor.island wraps "tf.Conv2D"(%outputs_770, %outputs_20) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc388)
      %outputs_774:6, %control_775 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_772, %outputs_18, %outputs_16, %outputs_14, %outputs_12) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc389)
      %outputs_776, %control_777 = tf_executor.island wraps "tf.Relu6"(%outputs_774#0) {device = ""} : (tensor<1x14x14x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc390)
      %outputs_778, %control_779 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_776, %outputs_10) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<1x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<1x14x14x384xf32> loc(#loc391)
      %outputs_780:6, %control_781 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_778, %outputs_8, %outputs_6, %outputs_4, %outputs_2) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<1x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc392)
      %outputs_782, %control_783 = tf_executor.island wraps "tf.Relu6"(%outputs_780#0) {device = ""} : (tensor<1x14x14x384xf32>) -> tensor<1x14x14x384xf32> loc(#loc393)
      %outputs_784, %control_785 = tf_executor.island wraps "tf.Conv2D"(%outputs_782, %outputs_30) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x384xf32>, tensor<1x1x384x96xf32>) -> tensor<1x14x14x96xf32> loc(#loc394)
      %outputs_786:6, %control_787 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_784, %outputs_28, %outputs_26, %outputs_24, %outputs_22) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<1x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc395)
      %outputs_788, %control_789 = tf_executor.island wraps "tf.Conv2D"(%outputs_786#0, %outputs_54) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<1x14x14x576xf32> loc(#loc396)
      %outputs_790:6, %control_791 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_788, %outputs_52, %outputs_50, %outputs_48, %outputs_46) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc397)
      %outputs_792, %control_793 = tf_executor.island wraps "tf.Relu6"(%outputs_790#0) {device = ""} : (tensor<1x14x14x576xf32>) -> tensor<1x14x14x576xf32> loc(#loc398)
      %outputs_794, %control_795 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_792, %outputs_44) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<1x14x14x576xf32>, tensor<3x3x576x1xf32>) -> tensor<1x14x14x576xf32> loc(#loc399)
      %outputs_796:6, %control_797 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_794, %outputs_42, %outputs_40, %outputs_38, %outputs_36) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc400)
      %outputs_798, %control_799 = tf_executor.island wraps "tf.Relu6"(%outputs_796#0) {device = ""} : (tensor<1x14x14x576xf32>) -> tensor<1x14x14x576xf32> loc(#loc401)
      %outputs_800, %control_801 = tf_executor.island wraps "tf.Conv2D"(%outputs_798, %outputs_64) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<1x14x14x96xf32> loc(#loc402)
      %outputs_802:6, %control_803 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_800, %outputs_62, %outputs_60, %outputs_58, %outputs_56) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<1x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc403)
      %outputs_804, %control_805 = tf_executor.island wraps "tf.AddV2"(%outputs_786#0, %outputs_802#0) {device = ""} : (tensor<1x14x14x96xf32>, tensor<1x14x14x96xf32>) -> tensor<1x14x14x96xf32> loc(#loc404)
      %outputs_806, %control_807 = tf_executor.island wraps "tf.Conv2D"(%outputs_804, %outputs_88) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<1x14x14x576xf32> loc(#loc405)
      %outputs_808:6, %control_809 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_806, %outputs_86, %outputs_84, %outputs_82, %outputs_80) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc406)
      %outputs_810, %control_811 = tf_executor.island wraps "tf.Relu6"(%outputs_808#0) {device = ""} : (tensor<1x14x14x576xf32>) -> tensor<1x14x14x576xf32> loc(#loc407)
      %outputs_812, %control_813 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_810, %outputs_78) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<1x14x14x576xf32>, tensor<3x3x576x1xf32>) -> tensor<1x14x14x576xf32> loc(#loc408)
      %outputs_814:6, %control_815 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_812, %outputs_76, %outputs_74, %outputs_72, %outputs_70) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc409)
      %outputs_816, %control_817 = tf_executor.island wraps "tf.Relu6"(%outputs_814#0) {device = ""} : (tensor<1x14x14x576xf32>) -> tensor<1x14x14x576xf32> loc(#loc410)
      %outputs_818, %control_819 = tf_executor.island wraps "tf.Conv2D"(%outputs_816, %outputs_98) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<1x14x14x96xf32> loc(#loc411)
      %outputs_820:6, %control_821 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_818, %outputs_96, %outputs_94, %outputs_92, %outputs_90) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<1x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc412)
      %outputs_822, %control_823 = tf_executor.island wraps "tf.AddV2"(%outputs_804, %outputs_820#0) {device = ""} : (tensor<1x14x14x96xf32>, tensor<1x14x14x96xf32>) -> tensor<1x14x14x96xf32> loc(#loc413)
      %outputs_824, %control_825 = tf_executor.island wraps "tf.Conv2D"(%outputs_822, %outputs_122) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<1x14x14x576xf32> loc(#loc414)
      %outputs_826:6, %control_827 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_824, %outputs_120, %outputs_118, %outputs_116, %outputs_114) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<1x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc415)
      %outputs_828, %control_829 = tf_executor.island wraps "tf.Relu6"(%outputs_826#0) {device = ""} : (tensor<1x14x14x576xf32>) -> tensor<1x14x14x576xf32> loc(#loc416)
      %outputs_830, %control_831 = tf_executor.island wraps "tf.Pad"(%outputs_828, %outputs_124) {device = ""} : (tensor<1x14x14x576xf32>, tensor<4x2xi32>) -> tensor<1x15x15x576xf32> loc(#loc417)
      %outputs_832, %control_833 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_830, %outputs_112) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<1x15x15x576xf32>, tensor<3x3x576x1xf32>) -> tensor<1x7x7x576xf32> loc(#loc418)
      %outputs_834:6, %control_835 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_832, %outputs_110, %outputs_108, %outputs_106, %outputs_104) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x7x7x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<1x7x7x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc419)
      %outputs_836, %control_837 = tf_executor.island wraps "tf.Relu6"(%outputs_834#0) {device = ""} : (tensor<1x7x7x576xf32>) -> tensor<1x7x7x576xf32> loc(#loc420)
      %outputs_838, %control_839 = tf_executor.island wraps "tf.Conv2D"(%outputs_836, %outputs_134) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x7x7x576xf32>, tensor<1x1x576x160xf32>) -> tensor<1x7x7x160xf32> loc(#loc421)
      %outputs_840:6, %control_841 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_838, %outputs_132, %outputs_130, %outputs_128, %outputs_126) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<1x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc422)
      %outputs_842, %control_843 = tf_executor.island wraps "tf.Conv2D"(%outputs_840#0, %outputs_158) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc423)
      %outputs_844:6, %control_845 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_842, %outputs_156, %outputs_154, %outputs_152, %outputs_150) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc424)
      %outputs_846, %control_847 = tf_executor.island wraps "tf.Relu6"(%outputs_844#0) {device = ""} : (tensor<1x7x7x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc425)
      %outputs_848, %control_849 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_846, %outputs_148) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<1x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<1x7x7x960xf32> loc(#loc426)
      %outputs_850:6, %control_851 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_848, %outputs_146, %outputs_144, %outputs_142, %outputs_140) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc427)
      %outputs_852, %control_853 = tf_executor.island wraps "tf.Relu6"(%outputs_850#0) {device = ""} : (tensor<1x7x7x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc428)
      %outputs_854, %control_855 = tf_executor.island wraps "tf.Conv2D"(%outputs_852, %outputs_168) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<1x7x7x160xf32> loc(#loc429)
      %outputs_856:6, %control_857 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_854, %outputs_166, %outputs_164, %outputs_162, %outputs_160) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<1x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc430)
      %outputs_858, %control_859 = tf_executor.island wraps "tf.AddV2"(%outputs_840#0, %outputs_856#0) {device = ""} : (tensor<1x7x7x160xf32>, tensor<1x7x7x160xf32>) -> tensor<1x7x7x160xf32> loc(#loc431)
      %outputs_860, %control_861 = tf_executor.island wraps "tf.Conv2D"(%outputs_858, %outputs_192) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc432)
      %outputs_862:6, %control_863 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_860, %outputs_190, %outputs_188, %outputs_186, %outputs_184) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc433)
      %outputs_864, %control_865 = tf_executor.island wraps "tf.Relu6"(%outputs_862#0) {device = ""} : (tensor<1x7x7x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc434)
      %outputs_866, %control_867 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_864, %outputs_182) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<1x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<1x7x7x960xf32> loc(#loc435)
      %outputs_868:6, %control_869 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_866, %outputs_180, %outputs_178, %outputs_176, %outputs_174) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc436)
      %outputs_870, %control_871 = tf_executor.island wraps "tf.Relu6"(%outputs_868#0) {device = ""} : (tensor<1x7x7x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc437)
      %outputs_872, %control_873 = tf_executor.island wraps "tf.Conv2D"(%outputs_870, %outputs_202) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<1x7x7x160xf32> loc(#loc438)
      %outputs_874:6, %control_875 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_872, %outputs_200, %outputs_198, %outputs_196, %outputs_194) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<1x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc439)
      %outputs_876, %control_877 = tf_executor.island wraps "tf.AddV2"(%outputs_858, %outputs_874#0) {device = ""} : (tensor<1x7x7x160xf32>, tensor<1x7x7x160xf32>) -> tensor<1x7x7x160xf32> loc(#loc440)
      %outputs_878, %control_879 = tf_executor.island wraps "tf.Conv2D"(%outputs_876, %outputs_226) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc441)
      %outputs_880:6, %control_881 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_878, %outputs_224, %outputs_222, %outputs_220, %outputs_218) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc442)
      %outputs_882, %control_883 = tf_executor.island wraps "tf.Relu6"(%outputs_880#0) {device = ""} : (tensor<1x7x7x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc443)
      %outputs_884, %control_885 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_882, %outputs_216) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<1x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<1x7x7x960xf32> loc(#loc444)
      %outputs_886:6, %control_887 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_884, %outputs_214, %outputs_212, %outputs_210, %outputs_208) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<1x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc445)
      %outputs_888, %control_889 = tf_executor.island wraps "tf.Relu6"(%outputs_886#0) {device = ""} : (tensor<1x7x7x960xf32>) -> tensor<1x7x7x960xf32> loc(#loc446)
      %outputs_890, %control_891 = tf_executor.island wraps "tf.Conv2D"(%outputs_888, %outputs_236) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x7x7x960xf32>, tensor<1x1x960x320xf32>) -> tensor<1x7x7x320xf32> loc(#loc447)
      %outputs_892:6, %control_893 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_890, %outputs_234, %outputs_232, %outputs_230, %outputs_228) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x7x7x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>) -> (tensor<1x7x7x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<*xf32>) loc(#loc448)
      %outputs_894, %control_895 = tf_executor.island wraps "tf.Conv2D"(%outputs_892#0, %outputs_574) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<1x7x7x320xf32>, tensor<1x1x320x1280xf32>) -> tensor<1x7x7x1280xf32> loc(#loc449)
      %outputs_896:6, %control_897 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_894, %outputs_572, %outputs_570, %outputs_568, %outputs_566) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<1x7x7x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>) -> (tensor<1x7x7x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<*xf32>) loc(#loc450)
      %outputs_898, %control_899 = tf_executor.island wraps "tf.Relu6"(%outputs_896#0) {device = ""} : (tensor<1x7x7x1280xf32>) -> tensor<1x7x7x1280xf32> loc(#loc451)
      %outputs_900, %control_901 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[1, 2]> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc452)
      %outputs_902, %control_903 = tf_executor.island wraps "tf.Mean"(%outputs_898, %outputs_900) {device = "", keep_dims = false} : (tensor<1x7x7x1280xf32>, tensor<2xi32>) -> tensor<1x1280xf32> loc(#loc453)
      %outputs_904, %control_905 = tf_executor.island wraps "tf.ReadVariableOp"(%261) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1000xf32> loc(#loc454)
      %outputs_906, %control_907 = tf_executor.island wraps "tf.ReadVariableOp"(%260) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280x1000xf32> loc(#loc455)
      %control_908 = tf_executor.island(%control_559, %control_557, %control_555, %control_553, %control_551, %control_589, %control_587, %control_585, %control_583, %control_581, %control_605, %control_603, %control_601, %control_599, %control_597, %control_261, %control_259, %control_257, %control_255, %control_253, %control_251, %control_249, %control_247, %control_245, %control_243, %control_273, %control_271, %control_269, %control_267, %control_265, %control_297, %control_295, %control_293, %control_291, %control_289, %control_287, %control_285, %control_283, %control_281, %control_279, %control_307, %control_305, %control_303, %control_301, %control_299, %control_331, %control_329, %control_327, %control_325, %control_323, %control_321, %control_319, %control_317, %control_315, %control_313, %control_343, %control_341, %control_339, %control_337, %control_335, %control_367, %control_365, %control_363, %control_361, %control_359, %control_357, %control_355, %control_353, %control_351, %control_349, %control_377, %control_375, %control_373, %control_371, %control_369, %control_401, %control_399, %control_397, %control_395, %control_393, %control_391, %control_389, %control_387, %control_385, %control_383, %control_411, %control_409, %control_407, %control_405, %control_403, %control_435, %control_433, %control_431, %control_429, %control_427, %control_425, %control_423, %control_421, %control_419, %control_417, %control_447, %control_445, %control_443, %control_441, %control_439, %control_471, %control_469, %control_467, %control_465, %control_463, %control_461, %control_459, %control_457, %control_455, %control_453, %control_481, %control_479, %control_477, %control_475, %control_473, %control_505, %control_503, %control_501, %control_499, %control_497, %control_495, %control_493, %control_491, %control_489, %control_487, %control_515, %control_513, %control_511, %control_509, %control_507, %control_539, %control_537, %control_535, %control_533, %control_531, %control_529, %control_527, %control_525, %control_523, %control_521, %control_549, %control_547, %control_545, %control_543, %control_541, %control_21, %control_19, %control_17, %control_15, %control_13, %control_11, %control_9, %control_7, %control_5, %control_3, %control_31, %control_29, %control_27, %control_25, %control_23, %control_55, %control_53, %control_51, %control_49, %control_47, %control_45, %control_43, %control_41, %control_39, %control_37, %control_65, %control_63, %control_61, %control_59, %control_57, %control_89, %control_87, %control_85, %control_83, %control_81, %control_79, %control_77, %control_75, %control_73, %control_71, %control_99, %control_97, %control_95, %control_93, %control_91, %control_123, %control_121, %control_119, %control_117, %control_115, %control_113, %control_111, %control_109, %control_107, %control_105, %control_135, %control_133, %control_131, %control_129, %control_127, %control_159, %control_157, %control_155, %control_153, %control_151, %control_149, %control_147, %control_145, %control_143, %control_141, %control_169, %control_167, %control_165, %control_163, %control_161, %control_193, %control_191, %control_189, %control_187, %control_185, %control_183, %control_181, %control_179, %control_177, %control_175, %control_203, %control_201, %control_199, %control_197, %control_195, %control_227, %control_225, %control_223, %control_221, %control_219, %control_217, %control_215, %control_213, %control_211, %control_209, %control_237, %control_235, %control_233, %control_231, %control_229, %control_575, %control_573, %control_571, %control_569, %control_567, %control_907, %control_905) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc456)
      %outputs_909, %control_910 = tf_executor.island wraps "tf.MatMul"(%outputs_902, %outputs_906) {device = "", transpose_a = false, transpose_b = false} : (tensor<1x1280xf32>, tensor<1280x1000xf32>) -> tensor<1x1000xf32> loc(#loc457)
      %outputs_911, %control_912 = tf_executor.island wraps "tf.BiasAdd"(%outputs_909, %outputs_904) {data_format = "NHWC", device = ""} : (tensor<1x1000xf32>, tensor<1000xf32>) -> tensor<1x1000xf32> loc(#loc458)
      %outputs_913, %control_914 = tf_executor.island wraps "tf.Softmax"(%outputs_911) {device = ""} : (tensor<1x1000xf32>) -> tensor<1x1000xf32> loc(#loc459)
      %outputs_915, %control_916 = tf_executor.island(%control_908) wraps "tf.Identity"(%outputs_913) {device = ""} : (tensor<1x1000xf32>) -> tensor<1x1000xf32> loc(#loc460)
      tf_executor.fetch %outputs_915, %control_559, %control_557, %control_555, %control_553, %control_551, %control_589, %control_587, %control_585, %control_583, %control_581, %control_605, %control_603, %control_601, %control_599, %control_597, %control_261, %control_259, %control_257, %control_255, %control_253, %control_251, %control_249, %control_247, %control_245, %control_243, %control_273, %control_271, %control_269, %control_267, %control_265, %control_297, %control_295, %control_293, %control_291, %control_289, %control_287, %control_285, %control_283, %control_281, %control_279, %control_307, %control_305, %control_303, %control_301, %control_299, %control_331, %control_329, %control_327, %control_325, %control_323, %control_321, %control_319, %control_317, %control_315, %control_313, %control_343, %control_341, %control_339, %control_337, %control_335, %control_367, %control_365, %control_363, %control_361, %control_359, %control_357, %control_355, %control_353, %control_351, %control_349, %control_377, %control_375, %control_373, %control_371, %control_369, %control_401, %control_399, %control_397, %control_395, %control_393, %control_391, %control_389, %control_387, %control_385, %control_383, %control_411, %control_409, %control_407, %control_405, %control_403, %control_435, %control_433, %control_431, %control_429, %control_427, %control_425, %control_423, %control_421, %control_419, %control_417, %control_447, %control_445, %control_443, %control_441, %control_439, %control_471, %control_469, %control_467, %control_465, %control_463, %control_461, %control_459, %control_457, %control_455, %control_453, %control_481, %control_479, %control_477, %control_475, %control_473, %control_505, %control_503, %control_501, %control_499, %control_497, %control_495, %control_493, %control_491, %control_489, %control_487, %control_515, %control_513, %control_511, %control_509, %control_507, %control_539, %control_537, %control_535, %control_533, %control_531, %control_529, %control_527, %control_525, %control_523, %control_521, %control_549, %control_547, %control_545, %control_543, %control_541, %control_21, %control_19, %control_17, %control_15, %control_13, %control_11, %control_9, %control_7, %control_5, %control_3, %control_31, %control_29, %control_27, %control_25, %control_23, %control_55, %control_53, %control_51, %control_49, %control_47, %control_45, %control_43, %control_41, %control_39, %control_37, %control_65, %control_63, %control_61, %control_59, %control_57, %control_89, %control_87, %control_85, %control_83, %control_81, %control_79, %control_77, %control_75, %control_73, %control_71, %control_99, %control_97, %control_95, %control_93, %control_91, %control_123, %control_121, %control_119, %control_117, %control_115, %control_113, %control_111, %control_109, %control_107, %control_105, %control_135, %control_133, %control_131, %control_129, %control_127, %control_159, %control_157, %control_155, %control_153, %control_151, %control_149, %control_147, %control_145, %control_143, %control_141, %control_169, %control_167, %control_165, %control_163, %control_161, %control_193, %control_191, %control_189, %control_187, %control_185, %control_183, %control_181, %control_179, %control_177, %control_175, %control_203, %control_201, %control_199, %control_197, %control_195, %control_227, %control_225, %control_223, %control_221, %control_219, %control_217, %control_215, %control_213, %control_211, %control_209, %control_237, %control_235, %control_233, %control_231, %control_229, %control_575, %control_573, %control_571, %control_569, %control_567, %control_907, %control_905 : tensor<1x1000xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %262 : tensor<1x1000xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv1_layer_call_and_return_conditional_losses_183260(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x112x112x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x3x32xf32> loc(#loc461)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc462)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 2, 2, 1], use_cudnn_on_gpu = true} : (tensor<?x224x224x3xf32>, tensor<3x3x3x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc463)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc464)
      tf_executor.fetch %outputs_3, %control : tensor<?x112x112x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv1_layer_call_and_return_conditional_losses_90020(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x112x112x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x3x32xf32> loc(#loc465)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc466)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 2, 2, 1], use_cudnn_on_gpu = true} : (tensor<?x224x224x3xf32>, tensor<3x3x3x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc467)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc468)
      tf_executor.fetch %outputs_3, %control : tensor<?x112x112x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv1_layer_call_fn_183190(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x112x112x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv1_layer_call_and_return_conditional_losses_90020} : (tensor<?x224x224x3xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc469)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc470)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc471)
      tf_executor.fetch %outputs_1, %control : tensor<?x112x112x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv1_relu_layer_call_and_return_conditional_losses_183980(%arg0: tensor<?x112x112x32xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x112x112x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x32>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc472)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc473)
      tf_executor.fetch %outputs_0 : tensor<?x112x112x32xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv1_relu_layer_call_and_return_conditional_losses_90200(%arg0: tensor<?x112x112x32xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x112x112x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x32>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc474)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc475)
      tf_executor.fetch %outputs_0 : tensor<?x112x112x32xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv1_relu_layer_call_fn_183930(%arg0: tensor<?x112x112x32xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x112x112x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x32>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv1_relu_layer_call_and_return_conditional_losses_90200} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc476)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc477)
      tf_executor.fetch %outputs_0 : tensor<?x112x112x32xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv_1_bn_layer_call_and_return_conditional_losses_227840(%arg0: tensor<?x?x?x1280xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x1280xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x1280>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc478)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc479)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc480)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc481)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>) -> (tensor<?x?x?x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<*xf32>) loc(#loc482)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc483)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x1280xf32>) -> tensor<?x?x?x1280xf32> loc(#loc484)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x1280xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x1280xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv_1_bn_layer_call_and_return_conditional_losses_228020(%arg0: tensor<?x?x?x1280xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x1280xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x1280>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc485)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc486)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc487)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc488)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>) -> (tensor<?x?x?x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<*xf32>) loc(#loc489)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<1280xf32>) -> () loc(#loc490)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<1280xf32>) -> () loc(#loc491)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc492)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x1280xf32>) -> tensor<?x?x?x1280xf32> loc(#loc493)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x1280xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x1280xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv_1_bn_layer_call_and_return_conditional_losses_89330(%arg0: tensor<?x?x?x1280xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x1280xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x1280>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc494)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc495)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc496)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc497)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>) -> (tensor<?x?x?x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<*xf32>) loc(#loc498)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc499)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x1280xf32>) -> tensor<?x?x?x1280xf32> loc(#loc500)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x1280xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x1280xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv_1_bn_layer_call_and_return_conditional_losses_89640(%arg0: tensor<?x?x?x1280xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x1280xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x1280>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc501)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc502)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc503)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc504)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>) -> (tensor<?x?x?x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<*xf32>) loc(#loc505)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<1280xf32>) -> () loc(#loc506)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<1280xf32>) -> () loc(#loc507)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc508)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x1280xf32>) -> tensor<?x?x?x1280xf32> loc(#loc509)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x1280xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x1280xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv_1_bn_layer_call_fn_227530(%arg0: tensor<?x?x?x1280xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x1280xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x1280>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv_1_bn_layer_call_and_return_conditional_losses_89330} : (tensor<?x?x?x1280xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x1280xf32> loc(#loc510)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc511)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x1280xf32>) -> tensor<?x?x?x1280xf32> loc(#loc512)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x1280xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x1280xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv_1_bn_layer_call_fn_227660(%arg0: tensor<?x?x?x1280xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x1280xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x1280>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv_1_bn_layer_call_and_return_conditional_losses_89640} : (tensor<?x?x?x1280xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x1280xf32> loc(#loc513)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc514)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x1280xf32>) -> tensor<?x?x?x1280xf32> loc(#loc515)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x1280xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x1280xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv_1_layer_call_and_return_conditional_losses_103780(%arg0: tensor<?x7x7x320xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x1280xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x320>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x320x1280xf32> loc(#loc516)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc517)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x320xf32>, tensor<1x1x320x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc518)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc519)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x1280xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x1280xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv_1_layer_call_and_return_conditional_losses_227400(%arg0: tensor<?x7x7x320xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x1280xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x320>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x320x1280xf32> loc(#loc520)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc521)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x320xf32>, tensor<1x1x320x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc522)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc523)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x1280xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x1280xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_Conv_1_layer_call_fn_227330(%arg0: tensor<?x7x7x320xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x320>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv_1_layer_call_and_return_conditional_losses_103780} : (tensor<?x7x7x320xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc524)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc525)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc526)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference__wrapped_model_55950(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "input_1"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown), %arg5: tensor<!tf_type.resource> loc(unknown), %arg6: tensor<!tf_type.resource> loc(unknown), %arg7: tensor<!tf_type.resource> loc(unknown), %arg8: tensor<!tf_type.resource> loc(unknown), %arg9: tensor<!tf_type.resource> loc(unknown), %arg10: tensor<!tf_type.resource> loc(unknown), %arg11: tensor<!tf_type.resource> loc(unknown), %arg12: tensor<!tf_type.resource> loc(unknown), %arg13: tensor<!tf_type.resource> loc(unknown), %arg14: tensor<!tf_type.resource> loc(unknown), %arg15: tensor<!tf_type.resource> loc(unknown), %arg16: tensor<!tf_type.resource> loc(unknown), %arg17: tensor<!tf_type.resource> loc(unknown), %arg18: tensor<!tf_type.resource> loc(unknown), %arg19: tensor<!tf_type.resource> loc(unknown), %arg20: tensor<!tf_type.resource> loc(unknown), %arg21: tensor<!tf_type.resource> loc(unknown), %arg22: tensor<!tf_type.resource> loc(unknown), %arg23: tensor<!tf_type.resource> loc(unknown), %arg24: tensor<!tf_type.resource> loc(unknown), %arg25: tensor<!tf_type.resource> loc(unknown), %arg26: tensor<!tf_type.resource> loc(unknown), %arg27: tensor<!tf_type.resource> loc(unknown), %arg28: tensor<!tf_type.resource> loc(unknown), %arg29: tensor<!tf_type.resource> loc(unknown), %arg30: tensor<!tf_type.resource> loc(unknown), %arg31: tensor<!tf_type.resource> loc(unknown), %arg32: tensor<!tf_type.resource> loc(unknown), %arg33: tensor<!tf_type.resource> loc(unknown), %arg34: tensor<!tf_type.resource> loc(unknown), %arg35: tensor<!tf_type.resource> loc(unknown), %arg36: tensor<!tf_type.resource> loc(unknown), %arg37: tensor<!tf_type.resource> loc(unknown), %arg38: tensor<!tf_type.resource> loc(unknown), %arg39: tensor<!tf_type.resource> loc(unknown), %arg40: tensor<!tf_type.resource> loc(unknown), %arg41: tensor<!tf_type.resource> loc(unknown), %arg42: tensor<!tf_type.resource> loc(unknown), %arg43: tensor<!tf_type.resource> loc(unknown), %arg44: tensor<!tf_type.resource> loc(unknown), %arg45: tensor<!tf_type.resource> loc(unknown), %arg46: tensor<!tf_type.resource> loc(unknown), %arg47: tensor<!tf_type.resource> loc(unknown), %arg48: tensor<!tf_type.resource> loc(unknown), %arg49: tensor<!tf_type.resource> loc(unknown), %arg50: tensor<!tf_type.resource> loc(unknown), %arg51: tensor<!tf_type.resource> loc(unknown), %arg52: tensor<!tf_type.resource> loc(unknown), %arg53: tensor<!tf_type.resource> loc(unknown), %arg54: tensor<!tf_type.resource> loc(unknown), %arg55: tensor<!tf_type.resource> loc(unknown), %arg56: tensor<!tf_type.resource> loc(unknown), %arg57: tensor<!tf_type.resource> loc(unknown), %arg58: tensor<!tf_type.resource> loc(unknown), %arg59: tensor<!tf_type.resource> loc(unknown), %arg60: tensor<!tf_type.resource> loc(unknown), %arg61: tensor<!tf_type.resource> loc(unknown), %arg62: tensor<!tf_type.resource> loc(unknown), %arg63: tensor<!tf_type.resource> loc(unknown), %arg64: tensor<!tf_type.resource> loc(unknown), %arg65: tensor<!tf_type.resource> loc(unknown), %arg66: tensor<!tf_type.resource> loc(unknown), %arg67: tensor<!tf_type.resource> loc(unknown), %arg68: tensor<!tf_type.resource> loc(unknown), %arg69: tensor<!tf_type.resource> loc(unknown), %arg70: tensor<!tf_type.resource> loc(unknown), %arg71: tensor<!tf_type.resource> loc(unknown), %arg72: tensor<!tf_type.resource> loc(unknown), %arg73: tensor<!tf_type.resource> loc(unknown), %arg74: tensor<!tf_type.resource> loc(unknown), %arg75: tensor<!tf_type.resource> loc(unknown), %arg76: tensor<!tf_type.resource> loc(unknown), %arg77: tensor<!tf_type.resource> loc(unknown), %arg78: tensor<!tf_type.resource> loc(unknown), %arg79: tensor<!tf_type.resource> loc(unknown), %arg80: tensor<!tf_type.resource> loc(unknown), %arg81: tensor<!tf_type.resource> loc(unknown), %arg82: tensor<!tf_type.resource> loc(unknown), %arg83: tensor<!tf_type.resource> loc(unknown), %arg84: tensor<!tf_type.resource> loc(unknown), %arg85: tensor<!tf_type.resource> loc(unknown), %arg86: tensor<!tf_type.resource> loc(unknown), %arg87: tensor<!tf_type.resource> loc(unknown), %arg88: tensor<!tf_type.resource> loc(unknown), %arg89: tensor<!tf_type.resource> loc(unknown), %arg90: tensor<!tf_type.resource> loc(unknown), %arg91: tensor<!tf_type.resource> loc(unknown), %arg92: tensor<!tf_type.resource> loc(unknown), %arg93: tensor<!tf_type.resource> loc(unknown), %arg94: tensor<!tf_type.resource> loc(unknown), %arg95: tensor<!tf_type.resource> loc(unknown), %arg96: tensor<!tf_type.resource> loc(unknown), %arg97: tensor<!tf_type.resource> loc(unknown), %arg98: tensor<!tf_type.resource> loc(unknown), %arg99: tensor<!tf_type.resource> loc(unknown), %arg100: tensor<!tf_type.resource> loc(unknown), %arg101: tensor<!tf_type.resource> loc(unknown), %arg102: tensor<!tf_type.resource> loc(unknown), %arg103: tensor<!tf_type.resource> loc(unknown), %arg104: tensor<!tf_type.resource> loc(unknown), %arg105: tensor<!tf_type.resource> loc(unknown), %arg106: tensor<!tf_type.resource> loc(unknown), %arg107: tensor<!tf_type.resource> loc(unknown), %arg108: tensor<!tf_type.resource> loc(unknown), %arg109: tensor<!tf_type.resource> loc(unknown), %arg110: tensor<!tf_type.resource> loc(unknown), %arg111: tensor<!tf_type.resource> loc(unknown), %arg112: tensor<!tf_type.resource> loc(unknown), %arg113: tensor<!tf_type.resource> loc(unknown), %arg114: tensor<!tf_type.resource> loc(unknown), %arg115: tensor<!tf_type.resource> loc(unknown), %arg116: tensor<!tf_type.resource> loc(unknown), %arg117: tensor<!tf_type.resource> loc(unknown), %arg118: tensor<!tf_type.resource> loc(unknown), %arg119: tensor<!tf_type.resource> loc(unknown), %arg120: tensor<!tf_type.resource> loc(unknown), %arg121: tensor<!tf_type.resource> loc(unknown), %arg122: tensor<!tf_type.resource> loc(unknown), %arg123: tensor<!tf_type.resource> loc(unknown), %arg124: tensor<!tf_type.resource> loc(unknown), %arg125: tensor<!tf_type.resource> loc(unknown), %arg126: tensor<!tf_type.resource> loc(unknown), %arg127: tensor<!tf_type.resource> loc(unknown), %arg128: tensor<!tf_type.resource> loc(unknown), %arg129: tensor<!tf_type.resource> loc(unknown), %arg130: tensor<!tf_type.resource> loc(unknown), %arg131: tensor<!tf_type.resource> loc(unknown), %arg132: tensor<!tf_type.resource> loc(unknown), %arg133: tensor<!tf_type.resource> loc(unknown), %arg134: tensor<!tf_type.resource> loc(unknown), %arg135: tensor<!tf_type.resource> loc(unknown), %arg136: tensor<!tf_type.resource> loc(unknown), %arg137: tensor<!tf_type.resource> loc(unknown), %arg138: tensor<!tf_type.resource> loc(unknown), %arg139: tensor<!tf_type.resource> loc(unknown), %arg140: tensor<!tf_type.resource> loc(unknown), %arg141: tensor<!tf_type.resource> loc(unknown), %arg142: tensor<!tf_type.resource> loc(unknown), %arg143: tensor<!tf_type.resource> loc(unknown), %arg144: tensor<!tf_type.resource> loc(unknown), %arg145: tensor<!tf_type.resource> loc(unknown), %arg146: tensor<!tf_type.resource> loc(unknown), %arg147: tensor<!tf_type.resource> loc(unknown), %arg148: tensor<!tf_type.resource> loc(unknown), %arg149: tensor<!tf_type.resource> loc(unknown), %arg150: tensor<!tf_type.resource> loc(unknown), %arg151: tensor<!tf_type.resource> loc(unknown), %arg152: tensor<!tf_type.resource> loc(unknown), %arg153: tensor<!tf_type.resource> loc(unknown), %arg154: tensor<!tf_type.resource> loc(unknown), %arg155: tensor<!tf_type.resource> loc(unknown), %arg156: tensor<!tf_type.resource> loc(unknown), %arg157: tensor<!tf_type.resource> loc(unknown), %arg158: tensor<!tf_type.resource> loc(unknown), %arg159: tensor<!tf_type.resource> loc(unknown), %arg160: tensor<!tf_type.resource> loc(unknown), %arg161: tensor<!tf_type.resource> loc(unknown), %arg162: tensor<!tf_type.resource> loc(unknown), %arg163: tensor<!tf_type.resource> loc(unknown), %arg164: tensor<!tf_type.resource> loc(unknown), %arg165: tensor<!tf_type.resource> loc(unknown), %arg166: tensor<!tf_type.resource> loc(unknown), %arg167: tensor<!tf_type.resource> loc(unknown), %arg168: tensor<!tf_type.resource> loc(unknown), %arg169: tensor<!tf_type.resource> loc(unknown), %arg170: tensor<!tf_type.resource> loc(unknown), %arg171: tensor<!tf_type.resource> loc(unknown), %arg172: tensor<!tf_type.resource> loc(unknown), %arg173: tensor<!tf_type.resource> loc(unknown), %arg174: tensor<!tf_type.resource> loc(unknown), %arg175: tensor<!tf_type.resource> loc(unknown), %arg176: tensor<!tf_type.resource> loc(unknown), %arg177: tensor<!tf_type.resource> loc(unknown), %arg178: tensor<!tf_type.resource> loc(unknown), %arg179: tensor<!tf_type.resource> loc(unknown), %arg180: tensor<!tf_type.resource> loc(unknown), %arg181: tensor<!tf_type.resource> loc(unknown), %arg182: tensor<!tf_type.resource> loc(unknown), %arg183: tensor<!tf_type.resource> loc(unknown), %arg184: tensor<!tf_type.resource> loc(unknown), %arg185: tensor<!tf_type.resource> loc(unknown), %arg186: tensor<!tf_type.resource> loc(unknown), %arg187: tensor<!tf_type.resource> loc(unknown), %arg188: tensor<!tf_type.resource> loc(unknown), %arg189: tensor<!tf_type.resource> loc(unknown), %arg190: tensor<!tf_type.resource> loc(unknown), %arg191: tensor<!tf_type.resource> loc(unknown), %arg192: tensor<!tf_type.resource> loc(unknown), %arg193: tensor<!tf_type.resource> loc(unknown), %arg194: tensor<!tf_type.resource> loc(unknown), %arg195: tensor<!tf_type.resource> loc(unknown), %arg196: tensor<!tf_type.resource> loc(unknown), %arg197: tensor<!tf_type.resource> loc(unknown), %arg198: tensor<!tf_type.resource> loc(unknown), %arg199: tensor<!tf_type.resource> loc(unknown), %arg200: tensor<!tf_type.resource> loc(unknown), %arg201: tensor<!tf_type.resource> loc(unknown), %arg202: tensor<!tf_type.resource> loc(unknown), %arg203: tensor<!tf_type.resource> loc(unknown), %arg204: tensor<!tf_type.resource> loc(unknown), %arg205: tensor<!tf_type.resource> loc(unknown), %arg206: tensor<!tf_type.resource> loc(unknown), %arg207: tensor<!tf_type.resource> loc(unknown), %arg208: tensor<!tf_type.resource> loc(unknown), %arg209: tensor<!tf_type.resource> loc(unknown), %arg210: tensor<!tf_type.resource> loc(unknown), %arg211: tensor<!tf_type.resource> loc(unknown), %arg212: tensor<!tf_type.resource> loc(unknown), %arg213: tensor<!tf_type.resource> loc(unknown), %arg214: tensor<!tf_type.resource> loc(unknown), %arg215: tensor<!tf_type.resource> loc(unknown), %arg216: tensor<!tf_type.resource> loc(unknown), %arg217: tensor<!tf_type.resource> loc(unknown), %arg218: tensor<!tf_type.resource> loc(unknown), %arg219: tensor<!tf_type.resource> loc(unknown), %arg220: tensor<!tf_type.resource> loc(unknown), %arg221: tensor<!tf_type.resource> loc(unknown), %arg222: tensor<!tf_type.resource> loc(unknown), %arg223: tensor<!tf_type.resource> loc(unknown), %arg224: tensor<!tf_type.resource> loc(unknown), %arg225: tensor<!tf_type.resource> loc(unknown), %arg226: tensor<!tf_type.resource> loc(unknown), %arg227: tensor<!tf_type.resource> loc(unknown), %arg228: tensor<!tf_type.resource> loc(unknown), %arg229: tensor<!tf_type.resource> loc(unknown), %arg230: tensor<!tf_type.resource> loc(unknown), %arg231: tensor<!tf_type.resource> loc(unknown), %arg232: tensor<!tf_type.resource> loc(unknown), %arg233: tensor<!tf_type.resource> loc(unknown), %arg234: tensor<!tf_type.resource> loc(unknown), %arg235: tensor<!tf_type.resource> loc(unknown), %arg236: tensor<!tf_type.resource> loc(unknown), %arg237: tensor<!tf_type.resource> loc(unknown), %arg238: tensor<!tf_type.resource> loc(unknown), %arg239: tensor<!tf_type.resource> loc(unknown), %arg240: tensor<!tf_type.resource> loc(unknown), %arg241: tensor<!tf_type.resource> loc(unknown), %arg242: tensor<!tf_type.resource> loc(unknown), %arg243: tensor<!tf_type.resource> loc(unknown), %arg244: tensor<!tf_type.resource> loc(unknown), %arg245: tensor<!tf_type.resource> loc(unknown), %arg246: tensor<!tf_type.resource> loc(unknown), %arg247: tensor<!tf_type.resource> loc(unknown), %arg248: tensor<!tf_type.resource> loc(unknown), %arg249: tensor<!tf_type.resource> loc(unknown), %arg250: tensor<!tf_type.resource> loc(unknown), %arg251: tensor<!tf_type.resource> loc(unknown), %arg252: tensor<!tf_type.resource> loc(unknown), %arg253: tensor<!tf_type.resource> loc(unknown), %arg254: tensor<!tf_type.resource> loc(unknown), %arg255: tensor<!tf_type.resource> loc(unknown), %arg256: tensor<!tf_type.resource> loc(unknown), %arg257: tensor<!tf_type.resource> loc(unknown), %arg258: tensor<!tf_type.resource> loc(unknown), %arg259: tensor<!tf_type.resource> loc(unknown), %arg260: tensor<!tf_type.resource> loc(unknown), %arg261: tensor<!tf_type.resource> loc(unknown), %arg262: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x1000xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc527)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc528)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc529)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc530)
      %outputs_6, %control_7 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc531)
      %outputs_8, %control_9 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc532)
      %outputs_10, %control_11 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc533)
      %outputs_12, %control_13 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc534)
      %outputs_14, %control_15 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc535)
      %outputs_16, %control_17 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc536)
      %outputs_18, %control_19 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc537)
      %outputs_20, %control_21 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc538)
      %outputs_22, %control_23 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc539)
      %outputs_24, %control_25 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc540)
      %outputs_26, %control_27 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc541)
      %outputs_28, %control_29 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 96, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc542)
      %outputs_30, %control_31 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc543)
      %outputs_32, %control_33 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc544)
      %outputs_34, %control_35 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 144, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc545)
      %outputs_36, %control_37 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc546)
      %outputs_38, %control_39 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 144, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc547)
      %outputs_40, %control_41 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc548)
      %outputs_42, %control_43 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc549)
      %outputs_44, %control_45 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc550)
      %outputs_46, %control_47 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc551)
      %outputs_48, %control_49 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc552)
      %outputs_50, %control_51 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc553)
      %outputs_52, %control_53 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc554)
      %outputs_54, %control_55 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc555)
      %outputs_56, %control_57 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc556)
      %outputs_58, %control_59 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc557)
      %outputs_60, %control_61 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc558)
      %outputs_62, %control_63 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc559)
      %outputs_64, %control_65 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc560)
      %outputs_66, %control_67 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc561)
      %outputs_68, %control_69 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc562)
      %outputs_70, %control_71 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 32, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc563)
      %outputs_72, %control_73 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc564)
      %outputs_74, %control_75 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[1, 2]> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc565)
      %outputs_76, %control_77 = tf_executor.island wraps "tf.ReadVariableOp"(%arg160) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc566)
      %outputs_78, %control_79 = tf_executor.island wraps "tf.ReadVariableOp"(%arg159) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc567)
      %outputs_80, %control_81 = tf_executor.island wraps "tf.ReadVariableOp"(%arg158) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc568)
      %outputs_82, %control_83 = tf_executor.island wraps "tf.ReadVariableOp"(%arg157) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc569)
      %outputs_84, %control_85 = tf_executor.island wraps "tf.ReadVariableOp"(%arg156) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc570)
      %outputs_86, %control_87 = tf_executor.island wraps "tf.ReadVariableOp"(%arg155) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc571)
      %outputs_88, %control_89 = tf_executor.island wraps "tf.ReadVariableOp"(%arg154) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc572)
      %outputs_90, %control_91 = tf_executor.island wraps "tf.ReadVariableOp"(%arg153) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc573)
      %outputs_92, %control_93 = tf_executor.island wraps "tf.ReadVariableOp"(%arg152) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc574)
      %outputs_94, %control_95 = tf_executor.island wraps "tf.ReadVariableOp"(%arg151) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc575)
      %outputs_96, %control_97 = tf_executor.island wraps "tf.ReadVariableOp"(%arg165) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc576)
      %outputs_98, %control_99 = tf_executor.island wraps "tf.ReadVariableOp"(%arg164) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc577)
      %outputs_100, %control_101 = tf_executor.island wraps "tf.ReadVariableOp"(%arg163) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc578)
      %outputs_102, %control_103 = tf_executor.island wraps "tf.ReadVariableOp"(%arg162) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc579)
      %outputs_104, %control_105 = tf_executor.island wraps "tf.ReadVariableOp"(%arg161) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x96xf32> loc(#loc580)
      %outputs_106, %control_107 = tf_executor.island wraps "tf.ReadVariableOp"(%arg175) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc581)
      %outputs_108, %control_109 = tf_executor.island wraps "tf.ReadVariableOp"(%arg174) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc582)
      %outputs_110, %control_111 = tf_executor.island wraps "tf.ReadVariableOp"(%arg173) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc583)
      %outputs_112, %control_113 = tf_executor.island wraps "tf.ReadVariableOp"(%arg172) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc584)
      %outputs_114, %control_115 = tf_executor.island wraps "tf.ReadVariableOp"(%arg171) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc585)
      %outputs_116, %control_117 = tf_executor.island wraps "tf.ReadVariableOp"(%arg170) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc586)
      %outputs_118, %control_119 = tf_executor.island wraps "tf.ReadVariableOp"(%arg169) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc587)
      %outputs_120, %control_121 = tf_executor.island wraps "tf.ReadVariableOp"(%arg168) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc588)
      %outputs_122, %control_123 = tf_executor.island wraps "tf.ReadVariableOp"(%arg167) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc589)
      %outputs_124, %control_125 = tf_executor.island wraps "tf.ReadVariableOp"(%arg166) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc590)
      %outputs_126, %control_127 = tf_executor.island wraps "tf.ReadVariableOp"(%arg180) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc591)
      %outputs_128, %control_129 = tf_executor.island wraps "tf.ReadVariableOp"(%arg179) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc592)
      %outputs_130, %control_131 = tf_executor.island wraps "tf.ReadVariableOp"(%arg178) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc593)
      %outputs_132, %control_133 = tf_executor.island wraps "tf.ReadVariableOp"(%arg177) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc594)
      %outputs_134, %control_135 = tf_executor.island wraps "tf.ReadVariableOp"(%arg176) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x96xf32> loc(#loc595)
      %outputs_136, %control_137 = tf_executor.island wraps "tf.ReadVariableOp"(%arg190) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc596)
      %outputs_138, %control_139 = tf_executor.island wraps "tf.ReadVariableOp"(%arg189) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc597)
      %outputs_140, %control_141 = tf_executor.island wraps "tf.ReadVariableOp"(%arg188) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc598)
      %outputs_142, %control_143 = tf_executor.island wraps "tf.ReadVariableOp"(%arg187) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc599)
      %outputs_144, %control_145 = tf_executor.island wraps "tf.ReadVariableOp"(%arg186) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc600)
      %outputs_146, %control_147 = tf_executor.island wraps "tf.ReadVariableOp"(%arg185) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc601)
      %outputs_148, %control_149 = tf_executor.island wraps "tf.ReadVariableOp"(%arg184) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc602)
      %outputs_150, %control_151 = tf_executor.island wraps "tf.ReadVariableOp"(%arg183) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc603)
      %outputs_152, %control_153 = tf_executor.island wraps "tf.ReadVariableOp"(%arg182) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc604)
      %outputs_154, %control_155 = tf_executor.island wraps "tf.ReadVariableOp"(%arg181) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc605)
      %outputs_156, %control_157 = tf_executor.island wraps "tf.ReadVariableOp"(%arg195) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc606)
      %outputs_158, %control_159 = tf_executor.island wraps "tf.ReadVariableOp"(%arg194) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc607)
      %outputs_160, %control_161 = tf_executor.island wraps "tf.ReadVariableOp"(%arg193) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc608)
      %outputs_162, %control_163 = tf_executor.island wraps "tf.ReadVariableOp"(%arg192) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc609)
      %outputs_164, %control_165 = tf_executor.island wraps "tf.ReadVariableOp"(%arg191) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x96xf32> loc(#loc610)
      %outputs_166, %control_167 = tf_executor.island wraps "tf.ReadVariableOp"(%arg205) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc611)
      %outputs_168, %control_169 = tf_executor.island wraps "tf.ReadVariableOp"(%arg204) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc612)
      %outputs_170, %control_171 = tf_executor.island wraps "tf.ReadVariableOp"(%arg203) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc613)
      %outputs_172, %control_173 = tf_executor.island wraps "tf.ReadVariableOp"(%arg202) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc614)
      %outputs_174, %control_175 = tf_executor.island wraps "tf.ReadVariableOp"(%arg201) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc615)
      %outputs_176, %control_177 = tf_executor.island wraps "tf.ReadVariableOp"(%arg200) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc616)
      %outputs_178, %control_179 = tf_executor.island wraps "tf.ReadVariableOp"(%arg199) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc617)
      %outputs_180, %control_181 = tf_executor.island wraps "tf.ReadVariableOp"(%arg198) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc618)
      %outputs_182, %control_183 = tf_executor.island wraps "tf.ReadVariableOp"(%arg197) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc619)
      %outputs_184, %control_185 = tf_executor.island wraps "tf.ReadVariableOp"(%arg196) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc620)
      %outputs_186, %control_187 = tf_executor.island wraps "tf.ReadVariableOp"(%arg210) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc621)
      %outputs_188, %control_189 = tf_executor.island wraps "tf.ReadVariableOp"(%arg209) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc622)
      %outputs_190, %control_191 = tf_executor.island wraps "tf.ReadVariableOp"(%arg208) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc623)
      %outputs_192, %control_193 = tf_executor.island wraps "tf.ReadVariableOp"(%arg207) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc624)
      %outputs_194, %control_195 = tf_executor.island wraps "tf.ReadVariableOp"(%arg206) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x160xf32> loc(#loc625)
      %outputs_196, %control_197 = tf_executor.island wraps "tf.ReadVariableOp"(%arg220) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc626)
      %outputs_198, %control_199 = tf_executor.island wraps "tf.ReadVariableOp"(%arg219) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc627)
      %outputs_200, %control_201 = tf_executor.island wraps "tf.ReadVariableOp"(%arg218) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc628)
      %outputs_202, %control_203 = tf_executor.island wraps "tf.ReadVariableOp"(%arg217) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc629)
      %outputs_204, %control_205 = tf_executor.island wraps "tf.ReadVariableOp"(%arg216) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc630)
      %outputs_206, %control_207 = tf_executor.island wraps "tf.ReadVariableOp"(%arg215) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc631)
      %outputs_208, %control_209 = tf_executor.island wraps "tf.ReadVariableOp"(%arg214) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc632)
      %outputs_210, %control_211 = tf_executor.island wraps "tf.ReadVariableOp"(%arg213) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc633)
      %outputs_212, %control_213 = tf_executor.island wraps "tf.ReadVariableOp"(%arg212) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc634)
      %outputs_214, %control_215 = tf_executor.island wraps "tf.ReadVariableOp"(%arg211) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc635)
      %outputs_216, %control_217 = tf_executor.island wraps "tf.ReadVariableOp"(%arg225) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc636)
      %outputs_218, %control_219 = tf_executor.island wraps "tf.ReadVariableOp"(%arg224) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc637)
      %outputs_220, %control_221 = tf_executor.island wraps "tf.ReadVariableOp"(%arg223) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc638)
      %outputs_222, %control_223 = tf_executor.island wraps "tf.ReadVariableOp"(%arg222) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc639)
      %outputs_224, %control_225 = tf_executor.island wraps "tf.ReadVariableOp"(%arg221) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x160xf32> loc(#loc640)
      %outputs_226, %control_227 = tf_executor.island wraps "tf.ReadVariableOp"(%arg235) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc641)
      %outputs_228, %control_229 = tf_executor.island wraps "tf.ReadVariableOp"(%arg234) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc642)
      %outputs_230, %control_231 = tf_executor.island wraps "tf.ReadVariableOp"(%arg233) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc643)
      %outputs_232, %control_233 = tf_executor.island wraps "tf.ReadVariableOp"(%arg232) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc644)
      %outputs_234, %control_235 = tf_executor.island wraps "tf.ReadVariableOp"(%arg231) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc645)
      %outputs_236, %control_237 = tf_executor.island wraps "tf.ReadVariableOp"(%arg230) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc646)
      %outputs_238, %control_239 = tf_executor.island wraps "tf.ReadVariableOp"(%arg229) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc647)
      %outputs_240, %control_241 = tf_executor.island wraps "tf.ReadVariableOp"(%arg228) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc648)
      %outputs_242, %control_243 = tf_executor.island wraps "tf.ReadVariableOp"(%arg227) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc649)
      %outputs_244, %control_245 = tf_executor.island wraps "tf.ReadVariableOp"(%arg226) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc650)
      %outputs_246, %control_247 = tf_executor.island wraps "tf.ReadVariableOp"(%arg240) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc651)
      %outputs_248, %control_249 = tf_executor.island wraps "tf.ReadVariableOp"(%arg239) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc652)
      %outputs_250, %control_251 = tf_executor.island wraps "tf.ReadVariableOp"(%arg238) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc653)
      %outputs_252, %control_253 = tf_executor.island wraps "tf.ReadVariableOp"(%arg237) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc654)
      %outputs_254, %control_255 = tf_executor.island wraps "tf.ReadVariableOp"(%arg236) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x160xf32> loc(#loc655)
      %outputs_256, %control_257 = tf_executor.island wraps "tf.ReadVariableOp"(%arg250) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc656)
      %outputs_258, %control_259 = tf_executor.island wraps "tf.ReadVariableOp"(%arg249) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc657)
      %outputs_260, %control_261 = tf_executor.island wraps "tf.ReadVariableOp"(%arg248) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc658)
      %outputs_262, %control_263 = tf_executor.island wraps "tf.ReadVariableOp"(%arg247) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc659)
      %outputs_264, %control_265 = tf_executor.island wraps "tf.ReadVariableOp"(%arg246) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc660)
      %outputs_266, %control_267 = tf_executor.island wraps "tf.ReadVariableOp"(%arg245) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc661)
      %outputs_268, %control_269 = tf_executor.island wraps "tf.ReadVariableOp"(%arg244) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc662)
      %outputs_270, %control_271 = tf_executor.island wraps "tf.ReadVariableOp"(%arg243) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc663)
      %outputs_272, %control_273 = tf_executor.island wraps "tf.ReadVariableOp"(%arg242) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc664)
      %outputs_274, %control_275 = tf_executor.island wraps "tf.ReadVariableOp"(%arg241) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc665)
      %outputs_276, %control_277 = tf_executor.island wraps "tf.ReadVariableOp"(%arg255) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc666)
      %outputs_278, %control_279 = tf_executor.island wraps "tf.ReadVariableOp"(%arg254) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc667)
      %outputs_280, %control_281 = tf_executor.island wraps "tf.ReadVariableOp"(%arg253) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc668)
      %outputs_282, %control_283 = tf_executor.island wraps "tf.ReadVariableOp"(%arg252) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc669)
      %outputs_284, %control_285 = tf_executor.island wraps "tf.ReadVariableOp"(%arg251) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x320xf32> loc(#loc670)
      %outputs_286, %control_287 = tf_executor.island wraps "tf.ReadVariableOp"(%arg25) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc671)
      %outputs_288, %control_289 = tf_executor.island wraps "tf.ReadVariableOp"(%arg24) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc672)
      %outputs_290, %control_291 = tf_executor.island wraps "tf.ReadVariableOp"(%arg23) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc673)
      %outputs_292, %control_293 = tf_executor.island wraps "tf.ReadVariableOp"(%arg22) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc674)
      %outputs_294, %control_295 = tf_executor.island wraps "tf.ReadVariableOp"(%arg21) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x96x1xf32> loc(#loc675)
      %outputs_296, %control_297 = tf_executor.island wraps "tf.ReadVariableOp"(%arg20) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc676)
      %outputs_298, %control_299 = tf_executor.island wraps "tf.ReadVariableOp"(%arg19) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc677)
      %outputs_300, %control_301 = tf_executor.island wraps "tf.ReadVariableOp"(%arg18) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc678)
      %outputs_302, %control_303 = tf_executor.island wraps "tf.ReadVariableOp"(%arg17) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc679)
      %outputs_304, %control_305 = tf_executor.island wraps "tf.ReadVariableOp"(%arg16) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x16x96xf32> loc(#loc680)
      %outputs_306, %control_307 = tf_executor.island wraps "tf.ReadVariableOp"(%arg30) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc681)
      %outputs_308, %control_309 = tf_executor.island wraps "tf.ReadVariableOp"(%arg29) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc682)
      %outputs_310, %control_311 = tf_executor.island wraps "tf.ReadVariableOp"(%arg28) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc683)
      %outputs_312, %control_313 = tf_executor.island wraps "tf.ReadVariableOp"(%arg27) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc684)
      %outputs_314, %control_315 = tf_executor.island wraps "tf.ReadVariableOp"(%arg26) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x24xf32> loc(#loc685)
      %outputs_316, %control_317 = tf_executor.island wraps "tf.ReadVariableOp"(%arg40) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc686)
      %outputs_318, %control_319 = tf_executor.island wraps "tf.ReadVariableOp"(%arg39) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc687)
      %outputs_320, %control_321 = tf_executor.island wraps "tf.ReadVariableOp"(%arg38) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc688)
      %outputs_322, %control_323 = tf_executor.island wraps "tf.ReadVariableOp"(%arg37) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc689)
      %outputs_324, %control_325 = tf_executor.island wraps "tf.ReadVariableOp"(%arg36) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x144x1xf32> loc(#loc690)
      %outputs_326, %control_327 = tf_executor.island wraps "tf.ReadVariableOp"(%arg35) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc691)
      %outputs_328, %control_329 = tf_executor.island wraps "tf.ReadVariableOp"(%arg34) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc692)
      %outputs_330, %control_331 = tf_executor.island wraps "tf.ReadVariableOp"(%arg33) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc693)
      %outputs_332, %control_333 = tf_executor.island wraps "tf.ReadVariableOp"(%arg32) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc694)
      %outputs_334, %control_335 = tf_executor.island wraps "tf.ReadVariableOp"(%arg31) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x24x144xf32> loc(#loc695)
      %outputs_336, %control_337 = tf_executor.island wraps "tf.ReadVariableOp"(%arg45) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc696)
      %outputs_338, %control_339 = tf_executor.island wraps "tf.ReadVariableOp"(%arg44) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc697)
      %outputs_340, %control_341 = tf_executor.island wraps "tf.ReadVariableOp"(%arg43) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc698)
      %outputs_342, %control_343 = tf_executor.island wraps "tf.ReadVariableOp"(%arg42) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc699)
      %outputs_344, %control_345 = tf_executor.island wraps "tf.ReadVariableOp"(%arg41) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x144x24xf32> loc(#loc700)
      %outputs_346, %control_347 = tf_executor.island wraps "tf.ReadVariableOp"(%arg55) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc701)
      %outputs_348, %control_349 = tf_executor.island wraps "tf.ReadVariableOp"(%arg54) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc702)
      %outputs_350, %control_351 = tf_executor.island wraps "tf.ReadVariableOp"(%arg53) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc703)
      %outputs_352, %control_353 = tf_executor.island wraps "tf.ReadVariableOp"(%arg52) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc704)
      %outputs_354, %control_355 = tf_executor.island wraps "tf.ReadVariableOp"(%arg51) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x144x1xf32> loc(#loc705)
      %outputs_356, %control_357 = tf_executor.island wraps "tf.ReadVariableOp"(%arg50) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc706)
      %outputs_358, %control_359 = tf_executor.island wraps "tf.ReadVariableOp"(%arg49) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc707)
      %outputs_360, %control_361 = tf_executor.island wraps "tf.ReadVariableOp"(%arg48) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc708)
      %outputs_362, %control_363 = tf_executor.island wraps "tf.ReadVariableOp"(%arg47) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc709)
      %outputs_364, %control_365 = tf_executor.island wraps "tf.ReadVariableOp"(%arg46) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x24x144xf32> loc(#loc710)
      %outputs_366, %control_367 = tf_executor.island wraps "tf.ReadVariableOp"(%arg60) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc711)
      %outputs_368, %control_369 = tf_executor.island wraps "tf.ReadVariableOp"(%arg59) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc712)
      %outputs_370, %control_371 = tf_executor.island wraps "tf.ReadVariableOp"(%arg58) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc713)
      %outputs_372, %control_373 = tf_executor.island wraps "tf.ReadVariableOp"(%arg57) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc714)
      %outputs_374, %control_375 = tf_executor.island wraps "tf.ReadVariableOp"(%arg56) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x144x32xf32> loc(#loc715)
      %outputs_376, %control_377 = tf_executor.island wraps "tf.ReadVariableOp"(%arg70) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc716)
      %outputs_378, %control_379 = tf_executor.island wraps "tf.ReadVariableOp"(%arg69) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc717)
      %outputs_380, %control_381 = tf_executor.island wraps "tf.ReadVariableOp"(%arg68) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc718)
      %outputs_382, %control_383 = tf_executor.island wraps "tf.ReadVariableOp"(%arg67) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc719)
      %outputs_384, %control_385 = tf_executor.island wraps "tf.ReadVariableOp"(%arg66) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc720)
      %outputs_386, %control_387 = tf_executor.island wraps "tf.ReadVariableOp"(%arg65) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc721)
      %outputs_388, %control_389 = tf_executor.island wraps "tf.ReadVariableOp"(%arg64) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc722)
      %outputs_390, %control_391 = tf_executor.island wraps "tf.ReadVariableOp"(%arg63) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc723)
      %outputs_392, %control_393 = tf_executor.island wraps "tf.ReadVariableOp"(%arg62) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc724)
      %outputs_394, %control_395 = tf_executor.island wraps "tf.ReadVariableOp"(%arg61) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc725)
      %outputs_396, %control_397 = tf_executor.island wraps "tf.ReadVariableOp"(%arg75) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc726)
      %outputs_398, %control_399 = tf_executor.island wraps "tf.ReadVariableOp"(%arg74) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc727)
      %outputs_400, %control_401 = tf_executor.island wraps "tf.ReadVariableOp"(%arg73) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc728)
      %outputs_402, %control_403 = tf_executor.island wraps "tf.ReadVariableOp"(%arg72) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc729)
      %outputs_404, %control_405 = tf_executor.island wraps "tf.ReadVariableOp"(%arg71) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x32xf32> loc(#loc730)
      %outputs_406, %control_407 = tf_executor.island wraps "tf.ReadVariableOp"(%arg85) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc731)
      %outputs_408, %control_409 = tf_executor.island wraps "tf.ReadVariableOp"(%arg84) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc732)
      %outputs_410, %control_411 = tf_executor.island wraps "tf.ReadVariableOp"(%arg83) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc733)
      %outputs_412, %control_413 = tf_executor.island wraps "tf.ReadVariableOp"(%arg82) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc734)
      %outputs_414, %control_415 = tf_executor.island wraps "tf.ReadVariableOp"(%arg81) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc735)
      %outputs_416, %control_417 = tf_executor.island wraps "tf.ReadVariableOp"(%arg80) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc736)
      %outputs_418, %control_419 = tf_executor.island wraps "tf.ReadVariableOp"(%arg79) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc737)
      %outputs_420, %control_421 = tf_executor.island wraps "tf.ReadVariableOp"(%arg78) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc738)
      %outputs_422, %control_423 = tf_executor.island wraps "tf.ReadVariableOp"(%arg77) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc739)
      %outputs_424, %control_425 = tf_executor.island wraps "tf.ReadVariableOp"(%arg76) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc740)
      %outputs_426, %control_427 = tf_executor.island wraps "tf.ReadVariableOp"(%arg90) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc741)
      %outputs_428, %control_429 = tf_executor.island wraps "tf.ReadVariableOp"(%arg89) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc742)
      %outputs_430, %control_431 = tf_executor.island wraps "tf.ReadVariableOp"(%arg88) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc743)
      %outputs_432, %control_433 = tf_executor.island wraps "tf.ReadVariableOp"(%arg87) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc744)
      %outputs_434, %control_435 = tf_executor.island wraps "tf.ReadVariableOp"(%arg86) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x32xf32> loc(#loc745)
      %outputs_436, %control_437 = tf_executor.island wraps "tf.ReadVariableOp"(%arg100) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc746)
      %outputs_438, %control_439 = tf_executor.island wraps "tf.ReadVariableOp"(%arg99) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc747)
      %outputs_440, %control_441 = tf_executor.island wraps "tf.ReadVariableOp"(%arg98) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc748)
      %outputs_442, %control_443 = tf_executor.island wraps "tf.ReadVariableOp"(%arg97) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc749)
      %outputs_444, %control_445 = tf_executor.island wraps "tf.ReadVariableOp"(%arg96) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc750)
      %outputs_446, %control_447 = tf_executor.island wraps "tf.ReadVariableOp"(%arg95) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc751)
      %outputs_448, %control_449 = tf_executor.island wraps "tf.ReadVariableOp"(%arg94) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc752)
      %outputs_450, %control_451 = tf_executor.island wraps "tf.ReadVariableOp"(%arg93) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc753)
      %outputs_452, %control_453 = tf_executor.island wraps "tf.ReadVariableOp"(%arg92) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc754)
      %outputs_454, %control_455 = tf_executor.island wraps "tf.ReadVariableOp"(%arg91) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc755)
      %outputs_456, %control_457 = tf_executor.island wraps "tf.ReadVariableOp"(%arg105) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc756)
      %outputs_458, %control_459 = tf_executor.island wraps "tf.ReadVariableOp"(%arg104) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc757)
      %outputs_460, %control_461 = tf_executor.island wraps "tf.ReadVariableOp"(%arg103) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc758)
      %outputs_462, %control_463 = tf_executor.island wraps "tf.ReadVariableOp"(%arg102) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc759)
      %outputs_464, %control_465 = tf_executor.island wraps "tf.ReadVariableOp"(%arg101) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x64xf32> loc(#loc760)
      %outputs_466, %control_467 = tf_executor.island wraps "tf.ReadVariableOp"(%arg115) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc761)
      %outputs_468, %control_469 = tf_executor.island wraps "tf.ReadVariableOp"(%arg114) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc762)
      %outputs_470, %control_471 = tf_executor.island wraps "tf.ReadVariableOp"(%arg113) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc763)
      %outputs_472, %control_473 = tf_executor.island wraps "tf.ReadVariableOp"(%arg112) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc764)
      %outputs_474, %control_475 = tf_executor.island wraps "tf.ReadVariableOp"(%arg111) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc765)
      %outputs_476, %control_477 = tf_executor.island wraps "tf.ReadVariableOp"(%arg110) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc766)
      %outputs_478, %control_479 = tf_executor.island wraps "tf.ReadVariableOp"(%arg109) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc767)
      %outputs_480, %control_481 = tf_executor.island wraps "tf.ReadVariableOp"(%arg108) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc768)
      %outputs_482, %control_483 = tf_executor.island wraps "tf.ReadVariableOp"(%arg107) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc769)
      %outputs_484, %control_485 = tf_executor.island wraps "tf.ReadVariableOp"(%arg106) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc770)
      %outputs_486, %control_487 = tf_executor.island wraps "tf.ReadVariableOp"(%arg120) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc771)
      %outputs_488, %control_489 = tf_executor.island wraps "tf.ReadVariableOp"(%arg119) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc772)
      %outputs_490, %control_491 = tf_executor.island wraps "tf.ReadVariableOp"(%arg118) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc773)
      %outputs_492, %control_493 = tf_executor.island wraps "tf.ReadVariableOp"(%arg117) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc774)
      %outputs_494, %control_495 = tf_executor.island wraps "tf.ReadVariableOp"(%arg116) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc775)
      %outputs_496, %control_497 = tf_executor.island wraps "tf.ReadVariableOp"(%arg130) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc776)
      %outputs_498, %control_499 = tf_executor.island wraps "tf.ReadVariableOp"(%arg129) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc777)
      %outputs_500, %control_501 = tf_executor.island wraps "tf.ReadVariableOp"(%arg128) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc778)
      %outputs_502, %control_503 = tf_executor.island wraps "tf.ReadVariableOp"(%arg127) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc779)
      %outputs_504, %control_505 = tf_executor.island wraps "tf.ReadVariableOp"(%arg126) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc780)
      %outputs_506, %control_507 = tf_executor.island wraps "tf.ReadVariableOp"(%arg125) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc781)
      %outputs_508, %control_509 = tf_executor.island wraps "tf.ReadVariableOp"(%arg124) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc782)
      %outputs_510, %control_511 = tf_executor.island wraps "tf.ReadVariableOp"(%arg123) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc783)
      %outputs_512, %control_513 = tf_executor.island wraps "tf.ReadVariableOp"(%arg122) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc784)
      %outputs_514, %control_515 = tf_executor.island wraps "tf.ReadVariableOp"(%arg121) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc785)
      %outputs_516, %control_517 = tf_executor.island wraps "tf.ReadVariableOp"(%arg135) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc786)
      %outputs_518, %control_519 = tf_executor.island wraps "tf.ReadVariableOp"(%arg134) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc787)
      %outputs_520, %control_521 = tf_executor.island wraps "tf.ReadVariableOp"(%arg133) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc788)
      %outputs_522, %control_523 = tf_executor.island wraps "tf.ReadVariableOp"(%arg132) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc789)
      %outputs_524, %control_525 = tf_executor.island wraps "tf.ReadVariableOp"(%arg131) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc790)
      %outputs_526, %control_527 = tf_executor.island wraps "tf.ReadVariableOp"(%arg145) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc791)
      %outputs_528, %control_529 = tf_executor.island wraps "tf.ReadVariableOp"(%arg144) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc792)
      %outputs_530, %control_531 = tf_executor.island wraps "tf.ReadVariableOp"(%arg143) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc793)
      %outputs_532, %control_533 = tf_executor.island wraps "tf.ReadVariableOp"(%arg142) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc794)
      %outputs_534, %control_535 = tf_executor.island wraps "tf.ReadVariableOp"(%arg141) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc795)
      %outputs_536, %control_537 = tf_executor.island wraps "tf.ReadVariableOp"(%arg140) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc796)
      %outputs_538, %control_539 = tf_executor.island wraps "tf.ReadVariableOp"(%arg139) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc797)
      %outputs_540, %control_541 = tf_executor.island wraps "tf.ReadVariableOp"(%arg138) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc798)
      %outputs_542, %control_543 = tf_executor.island wraps "tf.ReadVariableOp"(%arg137) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc799)
      %outputs_544, %control_545 = tf_executor.island wraps "tf.ReadVariableOp"(%arg136) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc800)
      %outputs_546, %control_547 = tf_executor.island wraps "tf.ReadVariableOp"(%arg150) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc801)
      %outputs_548, %control_549 = tf_executor.island wraps "tf.ReadVariableOp"(%arg149) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc802)
      %outputs_550, %control_551 = tf_executor.island wraps "tf.ReadVariableOp"(%arg148) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc803)
      %outputs_552, %control_553 = tf_executor.island wraps "tf.ReadVariableOp"(%arg147) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc804)
      %outputs_554, %control_555 = tf_executor.island wraps "tf.ReadVariableOp"(%arg146) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc805)
      %outputs_556, %control_557 = tf_executor.island wraps "tf.ReadVariableOp"(%arg5) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc806)
      %outputs_558, %control_559 = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc807)
      %outputs_560, %control_561 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc808)
      %outputs_562, %control_563 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc809)
      %outputs_564, %control_565 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x3x32xf32> loc(#loc810)
      %outputs_566, %control_567 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs_564) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 2, 2, 1], use_cudnn_on_gpu = true} : (tensor<?x224x224x3xf32>, tensor<3x3x3x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc811)
      %outputs_568:6, %control_569 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_566, %outputs_562, %outputs_560, %outputs_558, %outputs_556) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc812)
      %outputs_570, %control_571 = tf_executor.island wraps "tf.Relu6"(%outputs_568#0) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc813)
      %outputs_572, %control_573 = tf_executor.island wraps "tf.ReadVariableOp"(%arg260) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc814)
      %outputs_574, %control_575 = tf_executor.island wraps "tf.ReadVariableOp"(%arg259) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc815)
      %outputs_576, %control_577 = tf_executor.island wraps "tf.ReadVariableOp"(%arg258) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc816)
      %outputs_578, %control_579 = tf_executor.island wraps "tf.ReadVariableOp"(%arg257) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc817)
      %outputs_580, %control_581 = tf_executor.island wraps "tf.ReadVariableOp"(%arg256) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x320x1280xf32> loc(#loc818)
      %outputs_582, %control_583 = tf_executor.island wraps "tf.ReadVariableOp"(%arg10) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc819)
      %outputs_584, %control_585 = tf_executor.island wraps "tf.ReadVariableOp"(%arg9) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc820)
      %outputs_586, %control_587 = tf_executor.island wraps "tf.ReadVariableOp"(%arg8) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc821)
      %outputs_588, %control_589 = tf_executor.island wraps "tf.ReadVariableOp"(%arg7) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc822)
      %outputs_590, %control_591 = tf_executor.island wraps "tf.ReadVariableOp"(%arg6) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x32x1xf32> loc(#loc823)
      %outputs_592, %control_593 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_570, %outputs_590) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x112x112x32xf32>, tensor<3x3x32x1xf32>) -> tensor<?x112x112x32xf32> loc(#loc824)
      %outputs_594:6, %control_595 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_592, %outputs_588, %outputs_586, %outputs_584, %outputs_582) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc825)
      %outputs_596, %control_597 = tf_executor.island wraps "tf.Relu6"(%outputs_594#0) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc826)
      %outputs_598, %control_599 = tf_executor.island wraps "tf.ReadVariableOp"(%arg15) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc827)
      %outputs_600, %control_601 = tf_executor.island wraps "tf.ReadVariableOp"(%arg14) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc828)
      %outputs_602, %control_603 = tf_executor.island wraps "tf.ReadVariableOp"(%arg13) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc829)
      %outputs_604, %control_605 = tf_executor.island wraps "tf.ReadVariableOp"(%arg12) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc830)
      %outputs_606, %control_607 = tf_executor.island wraps "tf.ReadVariableOp"(%arg11) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x16xf32> loc(#loc831)
      %outputs_608, %control_609 = tf_executor.island wraps "tf.Conv2D"(%outputs_596, %outputs_606) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x112x112x32xf32>, tensor<1x1x32x16xf32>) -> tensor<?x112x112x16xf32> loc(#loc832)
      %outputs_610:6, %control_611 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_608, %outputs_604, %outputs_602, %outputs_600, %outputs_598) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x112x112x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> (tensor<?x112x112x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<*xf32>) loc(#loc833)
      %outputs_612, %control_613 = tf_executor.island wraps "tf.Conv2D"(%outputs_610#0, %outputs_304) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x112x112x16xf32>, tensor<1x1x16x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc834)
      %outputs_614:6, %control_615 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_612, %outputs_302, %outputs_300, %outputs_298, %outputs_296) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x112x112x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x112x112x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc835)
      %outputs_616, %control_617 = tf_executor.island wraps "tf.Relu6"(%outputs_614#0) {device = ""} : (tensor<?x112x112x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc836)
      %outputs_618, %control_619 = tf_executor.island wraps "tf.Pad"(%outputs_616, %outputs_32) {device = ""} : (tensor<?x112x112x96xf32>, tensor<4x2xi32>) -> tensor<?x113x113x96xf32> loc(#loc837)
      %outputs_620, %control_621 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_618, %outputs_294) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x113x113x96xf32>, tensor<3x3x96x1xf32>) -> tensor<?x56x56x96xf32> loc(#loc838)
      %outputs_622:6, %control_623 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_620, %outputs_292, %outputs_290, %outputs_288, %outputs_286) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x56x56x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x56x56x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc839)
      %outputs_624, %control_625 = tf_executor.island wraps "tf.Relu6"(%outputs_622#0) {device = ""} : (tensor<?x56x56x96xf32>) -> tensor<?x56x56x96xf32> loc(#loc840)
      %outputs_626, %control_627 = tf_executor.island wraps "tf.Conv2D"(%outputs_624, %outputs_314) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x96xf32>, tensor<1x1x96x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc841)
      %outputs_628:6, %control_629 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_626, %outputs_312, %outputs_310, %outputs_308, %outputs_306) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc842)
      %outputs_630, %control_631 = tf_executor.island wraps "tf.Conv2D"(%outputs_628#0, %outputs_334) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc843)
      %outputs_632:6, %control_633 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_630, %outputs_332, %outputs_330, %outputs_328, %outputs_326) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc844)
      %outputs_634, %control_635 = tf_executor.island wraps "tf.Relu6"(%outputs_632#0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc845)
      %outputs_636, %control_637 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_634, %outputs_324) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x56x56x144xf32>, tensor<3x3x144x1xf32>) -> tensor<?x56x56x144xf32> loc(#loc846)
      %outputs_638:6, %control_639 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_636, %outputs_322, %outputs_320, %outputs_318, %outputs_316) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc847)
      %outputs_640, %control_641 = tf_executor.island wraps "tf.Relu6"(%outputs_638#0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc848)
      %outputs_642, %control_643 = tf_executor.island wraps "tf.Conv2D"(%outputs_640, %outputs_344) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x144xf32>, tensor<1x1x144x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc849)
      %outputs_644:6, %control_645 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_642, %outputs_342, %outputs_340, %outputs_338, %outputs_336) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc850)
      %outputs_646, %control_647 = tf_executor.island wraps "tf.AddV2"(%outputs_628#0, %outputs_644#0) {device = ""} : (tensor<?x56x56x24xf32>, tensor<?x56x56x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc851)
      %outputs_648, %control_649 = tf_executor.island wraps "tf.Conv2D"(%outputs_646, %outputs_364) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc852)
      %outputs_650:6, %control_651 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_648, %outputs_362, %outputs_360, %outputs_358, %outputs_356) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc853)
      %outputs_652, %control_653 = tf_executor.island wraps "tf.Relu6"(%outputs_650#0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc854)
      %outputs_654, %control_655 = tf_executor.island wraps "tf.Pad"(%outputs_652, %outputs_42) {device = ""} : (tensor<?x56x56x144xf32>, tensor<4x2xi32>) -> tensor<?x57x57x144xf32> loc(#loc855)
      %outputs_656, %control_657 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_654, %outputs_354) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x57x57x144xf32>, tensor<3x3x144x1xf32>) -> tensor<?x28x28x144xf32> loc(#loc856)
      %outputs_658:6, %control_659 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_656, %outputs_352, %outputs_350, %outputs_348, %outputs_346) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x28x28x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc857)
      %outputs_660, %control_661 = tf_executor.island wraps "tf.Relu6"(%outputs_658#0) {device = ""} : (tensor<?x28x28x144xf32>) -> tensor<?x28x28x144xf32> loc(#loc858)
      %outputs_662, %control_663 = tf_executor.island wraps "tf.Conv2D"(%outputs_660, %outputs_374) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x144xf32>, tensor<1x1x144x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc859)
      %outputs_664:6, %control_665 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_662, %outputs_372, %outputs_370, %outputs_368, %outputs_366) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc860)
      %outputs_666, %control_667 = tf_executor.island wraps "tf.Conv2D"(%outputs_664#0, %outputs_394) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc861)
      %outputs_668:6, %control_669 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_666, %outputs_392, %outputs_390, %outputs_388, %outputs_386) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc862)
      %outputs_670, %control_671 = tf_executor.island wraps "tf.Relu6"(%outputs_668#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc863)
      %outputs_672, %control_673 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_670, %outputs_384) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x28x28x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x28x28x192xf32> loc(#loc864)
      %outputs_674:6, %control_675 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_672, %outputs_382, %outputs_380, %outputs_378, %outputs_376) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc865)
      %outputs_676, %control_677 = tf_executor.island wraps "tf.Relu6"(%outputs_674#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc866)
      %outputs_678, %control_679 = tf_executor.island wraps "tf.Conv2D"(%outputs_676, %outputs_404) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc867)
      %outputs_680:6, %control_681 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_678, %outputs_402, %outputs_400, %outputs_398, %outputs_396) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc868)
      %outputs_682, %control_683 = tf_executor.island wraps "tf.AddV2"(%outputs_664#0, %outputs_680#0) {device = ""} : (tensor<?x28x28x32xf32>, tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc869)
      %outputs_684, %control_685 = tf_executor.island wraps "tf.Conv2D"(%outputs_682, %outputs_424) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc870)
      %outputs_686:6, %control_687 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_684, %outputs_422, %outputs_420, %outputs_418, %outputs_416) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc871)
      %outputs_688, %control_689 = tf_executor.island wraps "tf.Relu6"(%outputs_686#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc872)
      %outputs_690, %control_691 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_688, %outputs_414) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x28x28x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x28x28x192xf32> loc(#loc873)
      %outputs_692:6, %control_693 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_690, %outputs_412, %outputs_410, %outputs_408, %outputs_406) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc874)
      %outputs_694, %control_695 = tf_executor.island wraps "tf.Relu6"(%outputs_692#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc875)
      %outputs_696, %control_697 = tf_executor.island wraps "tf.Conv2D"(%outputs_694, %outputs_434) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc876)
      %outputs_698:6, %control_699 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_696, %outputs_432, %outputs_430, %outputs_428, %outputs_426) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc877)
      %outputs_700, %control_701 = tf_executor.island wraps "tf.AddV2"(%outputs_682, %outputs_698#0) {device = ""} : (tensor<?x28x28x32xf32>, tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc878)
      %outputs_702, %control_703 = tf_executor.island wraps "tf.Conv2D"(%outputs_700, %outputs_454) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc879)
      %outputs_704:6, %control_705 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_702, %outputs_452, %outputs_450, %outputs_448, %outputs_446) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc880)
      %outputs_706, %control_707 = tf_executor.island wraps "tf.Relu6"(%outputs_704#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc881)
      %outputs_708, %control_709 = tf_executor.island wraps "tf.Pad"(%outputs_706, %outputs_56) {device = ""} : (tensor<?x28x28x192xf32>, tensor<4x2xi32>) -> tensor<?x29x29x192xf32> loc(#loc882)
      %outputs_710, %control_711 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_708, %outputs_444) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x29x29x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x14x14x192xf32> loc(#loc883)
      %outputs_712:6, %control_713 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_710, %outputs_442, %outputs_440, %outputs_438, %outputs_436) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x14x14x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc884)
      %outputs_714, %control_715 = tf_executor.island wraps "tf.Relu6"(%outputs_712#0) {device = ""} : (tensor<?x14x14x192xf32>) -> tensor<?x14x14x192xf32> loc(#loc885)
      %outputs_716, %control_717 = tf_executor.island wraps "tf.Conv2D"(%outputs_714, %outputs_464) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x192xf32>, tensor<1x1x192x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc886)
      %outputs_718:6, %control_719 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_716, %outputs_462, %outputs_460, %outputs_458, %outputs_456) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc887)
      %outputs_720, %control_721 = tf_executor.island wraps "tf.Conv2D"(%outputs_718#0, %outputs_484) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc888)
      %outputs_722:6, %control_723 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_720, %outputs_482, %outputs_480, %outputs_478, %outputs_476) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc889)
      %outputs_724, %control_725 = tf_executor.island wraps "tf.Relu6"(%outputs_722#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc890)
      %outputs_726, %control_727 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_724, %outputs_474) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc891)
      %outputs_728:6, %control_729 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_726, %outputs_472, %outputs_470, %outputs_468, %outputs_466) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc892)
      %outputs_730, %control_731 = tf_executor.island wraps "tf.Relu6"(%outputs_728#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc893)
      %outputs_732, %control_733 = tf_executor.island wraps "tf.Conv2D"(%outputs_730, %outputs_494) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc894)
      %outputs_734:6, %control_735 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_732, %outputs_492, %outputs_490, %outputs_488, %outputs_486) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc895)
      %outputs_736, %control_737 = tf_executor.island wraps "tf.AddV2"(%outputs_718#0, %outputs_734#0) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc896)
      %outputs_738, %control_739 = tf_executor.island wraps "tf.Conv2D"(%outputs_736, %outputs_514) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc897)
      %outputs_740:6, %control_741 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_738, %outputs_512, %outputs_510, %outputs_508, %outputs_506) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc898)
      %outputs_742, %control_743 = tf_executor.island wraps "tf.Relu6"(%outputs_740#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc899)
      %outputs_744, %control_745 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_742, %outputs_504) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc900)
      %outputs_746:6, %control_747 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_744, %outputs_502, %outputs_500, %outputs_498, %outputs_496) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc901)
      %outputs_748, %control_749 = tf_executor.island wraps "tf.Relu6"(%outputs_746#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc902)
      %outputs_750, %control_751 = tf_executor.island wraps "tf.Conv2D"(%outputs_748, %outputs_524) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc903)
      %outputs_752:6, %control_753 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_750, %outputs_522, %outputs_520, %outputs_518, %outputs_516) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc904)
      %outputs_754, %control_755 = tf_executor.island wraps "tf.AddV2"(%outputs_736, %outputs_752#0) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc905)
      %outputs_756, %control_757 = tf_executor.island wraps "tf.Conv2D"(%outputs_754, %outputs_544) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc906)
      %outputs_758:6, %control_759 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_756, %outputs_542, %outputs_540, %outputs_538, %outputs_536) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc907)
      %outputs_760, %control_761 = tf_executor.island wraps "tf.Relu6"(%outputs_758#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc908)
      %outputs_762, %control_763 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_760, %outputs_534) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc909)
      %outputs_764:6, %control_765 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_762, %outputs_532, %outputs_530, %outputs_528, %outputs_526) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc910)
      %outputs_766, %control_767 = tf_executor.island wraps "tf.Relu6"(%outputs_764#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc911)
      %outputs_768, %control_769 = tf_executor.island wraps "tf.Conv2D"(%outputs_766, %outputs_554) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc912)
      %outputs_770:6, %control_771 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_768, %outputs_552, %outputs_550, %outputs_548, %outputs_546) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc913)
      %outputs_772, %control_773 = tf_executor.island wraps "tf.AddV2"(%outputs_754, %outputs_770#0) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc914)
      %outputs_774, %control_775 = tf_executor.island wraps "tf.Conv2D"(%outputs_772, %outputs_94) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc915)
      %outputs_776:6, %control_777 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_774, %outputs_92, %outputs_90, %outputs_88, %outputs_86) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc916)
      %outputs_778, %control_779 = tf_executor.island wraps "tf.Relu6"(%outputs_776#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc917)
      %outputs_780, %control_781 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_778, %outputs_84) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc918)
      %outputs_782:6, %control_783 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_780, %outputs_82, %outputs_80, %outputs_78, %outputs_76) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc919)
      %outputs_784, %control_785 = tf_executor.island wraps "tf.Relu6"(%outputs_782#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc920)
      %outputs_786, %control_787 = tf_executor.island wraps "tf.Conv2D"(%outputs_784, %outputs_104) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc921)
      %outputs_788:6, %control_789 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_786, %outputs_102, %outputs_100, %outputs_98, %outputs_96) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc922)
      %outputs_790, %control_791 = tf_executor.island wraps "tf.Conv2D"(%outputs_788#0, %outputs_124) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc923)
      %outputs_792:6, %control_793 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_790, %outputs_122, %outputs_120, %outputs_118, %outputs_116) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc924)
      %outputs_794, %control_795 = tf_executor.island wraps "tf.Relu6"(%outputs_792#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc925)
      %outputs_796, %control_797 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_794, %outputs_114) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x14x14x576xf32> loc(#loc926)
      %outputs_798:6, %control_799 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_796, %outputs_112, %outputs_110, %outputs_108, %outputs_106) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc927)
      %outputs_800, %control_801 = tf_executor.island wraps "tf.Relu6"(%outputs_798#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc928)
      %outputs_802, %control_803 = tf_executor.island wraps "tf.Conv2D"(%outputs_800, %outputs_134) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc929)
      %outputs_804:6, %control_805 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_802, %outputs_132, %outputs_130, %outputs_128, %outputs_126) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc930)
      %outputs_806, %control_807 = tf_executor.island wraps "tf.AddV2"(%outputs_788#0, %outputs_804#0) {device = ""} : (tensor<?x14x14x96xf32>, tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc931)
      %outputs_808, %control_809 = tf_executor.island wraps "tf.Conv2D"(%outputs_806, %outputs_154) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc932)
      %outputs_810:6, %control_811 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_808, %outputs_152, %outputs_150, %outputs_148, %outputs_146) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc933)
      %outputs_812, %control_813 = tf_executor.island wraps "tf.Relu6"(%outputs_810#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc934)
      %outputs_814, %control_815 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_812, %outputs_144) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x14x14x576xf32> loc(#loc935)
      %outputs_816:6, %control_817 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_814, %outputs_142, %outputs_140, %outputs_138, %outputs_136) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc936)
      %outputs_818, %control_819 = tf_executor.island wraps "tf.Relu6"(%outputs_816#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc937)
      %outputs_820, %control_821 = tf_executor.island wraps "tf.Conv2D"(%outputs_818, %outputs_164) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc938)
      %outputs_822:6, %control_823 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_820, %outputs_162, %outputs_160, %outputs_158, %outputs_156) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc939)
      %outputs_824, %control_825 = tf_executor.island wraps "tf.AddV2"(%outputs_806, %outputs_822#0) {device = ""} : (tensor<?x14x14x96xf32>, tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc940)
      %outputs_826, %control_827 = tf_executor.island wraps "tf.Conv2D"(%outputs_824, %outputs_184) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc941)
      %outputs_828:6, %control_829 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_826, %outputs_182, %outputs_180, %outputs_178, %outputs_176) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc942)
      %outputs_830, %control_831 = tf_executor.island wraps "tf.Relu6"(%outputs_828#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc943)
      %outputs_832, %control_833 = tf_executor.island wraps "tf.Pad"(%outputs_830, %outputs_14) {device = ""} : (tensor<?x14x14x576xf32>, tensor<4x2xi32>) -> tensor<?x15x15x576xf32> loc(#loc944)
      %outputs_834, %control_835 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_832, %outputs_174) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x15x15x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x7x7x576xf32> loc(#loc945)
      %outputs_836:6, %control_837 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_834, %outputs_172, %outputs_170, %outputs_168, %outputs_166) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x7x7x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc946)
      %outputs_838, %control_839 = tf_executor.island wraps "tf.Relu6"(%outputs_836#0) {device = ""} : (tensor<?x7x7x576xf32>) -> tensor<?x7x7x576xf32> loc(#loc947)
      %outputs_840, %control_841 = tf_executor.island wraps "tf.Conv2D"(%outputs_838, %outputs_194) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x576xf32>, tensor<1x1x576x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc948)
      %outputs_842:6, %control_843 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_840, %outputs_192, %outputs_190, %outputs_188, %outputs_186) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc949)
      %outputs_844, %control_845 = tf_executor.island wraps "tf.Conv2D"(%outputs_842#0, %outputs_214) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc950)
      %outputs_846:6, %control_847 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_844, %outputs_212, %outputs_210, %outputs_208, %outputs_206) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc951)
      %outputs_848, %control_849 = tf_executor.island wraps "tf.Relu6"(%outputs_846#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc952)
      %outputs_850, %control_851 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_848, %outputs_204) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc953)
      %outputs_852:6, %control_853 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_850, %outputs_202, %outputs_200, %outputs_198, %outputs_196) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc954)
      %outputs_854, %control_855 = tf_executor.island wraps "tf.Relu6"(%outputs_852#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc955)
      %outputs_856, %control_857 = tf_executor.island wraps "tf.Conv2D"(%outputs_854, %outputs_224) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc956)
      %outputs_858:6, %control_859 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_856, %outputs_222, %outputs_220, %outputs_218, %outputs_216) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc957)
      %outputs_860, %control_861 = tf_executor.island wraps "tf.AddV2"(%outputs_842#0, %outputs_858#0) {device = ""} : (tensor<?x7x7x160xf32>, tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc958)
      %outputs_862, %control_863 = tf_executor.island wraps "tf.Conv2D"(%outputs_860, %outputs_244) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc959)
      %outputs_864:6, %control_865 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_862, %outputs_242, %outputs_240, %outputs_238, %outputs_236) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc960)
      %outputs_866, %control_867 = tf_executor.island wraps "tf.Relu6"(%outputs_864#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc961)
      %outputs_868, %control_869 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_866, %outputs_234) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc962)
      %outputs_870:6, %control_871 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_868, %outputs_232, %outputs_230, %outputs_228, %outputs_226) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc963)
      %outputs_872, %control_873 = tf_executor.island wraps "tf.Relu6"(%outputs_870#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc964)
      %outputs_874, %control_875 = tf_executor.island wraps "tf.Conv2D"(%outputs_872, %outputs_254) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc965)
      %outputs_876:6, %control_877 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_874, %outputs_252, %outputs_250, %outputs_248, %outputs_246) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc966)
      %outputs_878, %control_879 = tf_executor.island wraps "tf.AddV2"(%outputs_860, %outputs_876#0) {device = ""} : (tensor<?x7x7x160xf32>, tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc967)
      %outputs_880, %control_881 = tf_executor.island wraps "tf.Conv2D"(%outputs_878, %outputs_274) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc968)
      %outputs_882:6, %control_883 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_880, %outputs_272, %outputs_270, %outputs_268, %outputs_266) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc969)
      %outputs_884, %control_885 = tf_executor.island wraps "tf.Relu6"(%outputs_882#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc970)
      %outputs_886, %control_887 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_884, %outputs_264) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc971)
      %outputs_888:6, %control_889 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_886, %outputs_262, %outputs_260, %outputs_258, %outputs_256) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc972)
      %outputs_890, %control_891 = tf_executor.island wraps "tf.Relu6"(%outputs_888#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc973)
      %outputs_892, %control_893 = tf_executor.island wraps "tf.Conv2D"(%outputs_890, %outputs_284) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x320xf32>) -> tensor<?x7x7x320xf32> loc(#loc974)
      %outputs_894:6, %control_895 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_892, %outputs_282, %outputs_280, %outputs_278, %outputs_276) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>) -> (tensor<?x7x7x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<*xf32>) loc(#loc975)
      %outputs_896, %control_897 = tf_executor.island wraps "tf.Conv2D"(%outputs_894#0, %outputs_580) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x320xf32>, tensor<1x1x320x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc976)
      %outputs_898:6, %control_899 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_896, %outputs_578, %outputs_576, %outputs_574, %outputs_572) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>) -> (tensor<?x7x7x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<*xf32>) loc(#loc977)
      %outputs_900, %control_901 = tf_executor.island wraps "tf.Relu6"(%outputs_898#0) {device = ""} : (tensor<?x7x7x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc978)
      %outputs_902, %control_903 = tf_executor.island wraps "tf.Mean"(%outputs_900, %outputs_74) {device = "", keep_dims = false} : (tensor<?x7x7x1280xf32>, tensor<2xi32>) -> tensor<?x1280xf32> loc(#loc979)
      %outputs_904, %control_905 = tf_executor.island wraps "tf.ReadVariableOp"(%arg262) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1000xf32> loc(#loc980)
      %outputs_906, %control_907 = tf_executor.island wraps "tf.ReadVariableOp"(%arg261) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280x1000xf32> loc(#loc981)
      %control_908 = tf_executor.island(%control_565, %control_563, %control_561, %control_559, %control_557, %control_591, %control_589, %control_587, %control_585, %control_583, %control_607, %control_605, %control_603, %control_601, %control_599, %control_305, %control_303, %control_301, %control_299, %control_297, %control_295, %control_293, %control_291, %control_289, %control_287, %control_315, %control_313, %control_311, %control_309, %control_307, %control_335, %control_333, %control_331, %control_329, %control_327, %control_325, %control_323, %control_321, %control_319, %control_317, %control_345, %control_343, %control_341, %control_339, %control_337, %control_365, %control_363, %control_361, %control_359, %control_357, %control_355, %control_353, %control_351, %control_349, %control_347, %control_375, %control_373, %control_371, %control_369, %control_367, %control_395, %control_393, %control_391, %control_389, %control_387, %control_385, %control_383, %control_381, %control_379, %control_377, %control_405, %control_403, %control_401, %control_399, %control_397, %control_425, %control_423, %control_421, %control_419, %control_417, %control_415, %control_413, %control_411, %control_409, %control_407, %control_435, %control_433, %control_431, %control_429, %control_427, %control_455, %control_453, %control_451, %control_449, %control_447, %control_445, %control_443, %control_441, %control_439, %control_437, %control_465, %control_463, %control_461, %control_459, %control_457, %control_485, %control_483, %control_481, %control_479, %control_477, %control_475, %control_473, %control_471, %control_469, %control_467, %control_495, %control_493, %control_491, %control_489, %control_487, %control_515, %control_513, %control_511, %control_509, %control_507, %control_505, %control_503, %control_501, %control_499, %control_497, %control_525, %control_523, %control_521, %control_519, %control_517, %control_545, %control_543, %control_541, %control_539, %control_537, %control_535, %control_533, %control_531, %control_529, %control_527, %control_555, %control_553, %control_551, %control_549, %control_547, %control_95, %control_93, %control_91, %control_89, %control_87, %control_85, %control_83, %control_81, %control_79, %control_77, %control_105, %control_103, %control_101, %control_99, %control_97, %control_125, %control_123, %control_121, %control_119, %control_117, %control_115, %control_113, %control_111, %control_109, %control_107, %control_135, %control_133, %control_131, %control_129, %control_127, %control_155, %control_153, %control_151, %control_149, %control_147, %control_145, %control_143, %control_141, %control_139, %control_137, %control_165, %control_163, %control_161, %control_159, %control_157, %control_185, %control_183, %control_181, %control_179, %control_177, %control_175, %control_173, %control_171, %control_169, %control_167, %control_195, %control_193, %control_191, %control_189, %control_187, %control_215, %control_213, %control_211, %control_209, %control_207, %control_205, %control_203, %control_201, %control_199, %control_197, %control_225, %control_223, %control_221, %control_219, %control_217, %control_245, %control_243, %control_241, %control_239, %control_237, %control_235, %control_233, %control_231, %control_229, %control_227, %control_255, %control_253, %control_251, %control_249, %control_247, %control_275, %control_273, %control_271, %control_269, %control_267, %control_265, %control_263, %control_261, %control_259, %control_257, %control_285, %control_283, %control_281, %control_279, %control_277, %control_581, %control_579, %control_577, %control_575, %control_573, %control_907, %control_905) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc982)
      %outputs_909, %control_910 = tf_executor.island wraps "tf.MatMul"(%outputs_902, %outputs_906) {device = "", transpose_a = false, transpose_b = false} : (tensor<?x1280xf32>, tensor<1280x1000xf32>) -> tensor<?x1000xf32> loc(#loc983)
      %outputs_911, %control_912 = tf_executor.island wraps "tf.BiasAdd"(%outputs_909, %outputs_904) {data_format = "NHWC", device = ""} : (tensor<?x1000xf32>, tensor<1000xf32>) -> tensor<?x1000xf32> loc(#loc984)
      %outputs_913, %control_914 = tf_executor.island wraps "tf.Softmax"(%outputs_911) {device = ""} : (tensor<?x1000xf32>) -> tensor<?x1000xf32> loc(#loc985)
      %outputs_915, %control_916 = tf_executor.island(%control_908) wraps "tf.Identity"(%outputs_913) {device = ""} : (tensor<?x1000xf32>) -> tensor<?x1000xf32> loc(#loc986)
      tf_executor.fetch %outputs_915, %control_565, %control_563, %control_561, %control_559, %control_557, %control_591, %control_589, %control_587, %control_585, %control_583, %control_607, %control_605, %control_603, %control_601, %control_599, %control_305, %control_303, %control_301, %control_299, %control_297, %control_295, %control_293, %control_291, %control_289, %control_287, %control_315, %control_313, %control_311, %control_309, %control_307, %control_335, %control_333, %control_331, %control_329, %control_327, %control_325, %control_323, %control_321, %control_319, %control_317, %control_345, %control_343, %control_341, %control_339, %control_337, %control_365, %control_363, %control_361, %control_359, %control_357, %control_355, %control_353, %control_351, %control_349, %control_347, %control_375, %control_373, %control_371, %control_369, %control_367, %control_395, %control_393, %control_391, %control_389, %control_387, %control_385, %control_383, %control_381, %control_379, %control_377, %control_405, %control_403, %control_401, %control_399, %control_397, %control_425, %control_423, %control_421, %control_419, %control_417, %control_415, %control_413, %control_411, %control_409, %control_407, %control_435, %control_433, %control_431, %control_429, %control_427, %control_455, %control_453, %control_451, %control_449, %control_447, %control_445, %control_443, %control_441, %control_439, %control_437, %control_465, %control_463, %control_461, %control_459, %control_457, %control_485, %control_483, %control_481, %control_479, %control_477, %control_475, %control_473, %control_471, %control_469, %control_467, %control_495, %control_493, %control_491, %control_489, %control_487, %control_515, %control_513, %control_511, %control_509, %control_507, %control_505, %control_503, %control_501, %control_499, %control_497, %control_525, %control_523, %control_521, %control_519, %control_517, %control_545, %control_543, %control_541, %control_539, %control_537, %control_535, %control_533, %control_531, %control_529, %control_527, %control_555, %control_553, %control_551, %control_549, %control_547, %control_95, %control_93, %control_91, %control_89, %control_87, %control_85, %control_83, %control_81, %control_79, %control_77, %control_105, %control_103, %control_101, %control_99, %control_97, %control_125, %control_123, %control_121, %control_119, %control_117, %control_115, %control_113, %control_111, %control_109, %control_107, %control_135, %control_133, %control_131, %control_129, %control_127, %control_155, %control_153, %control_151, %control_149, %control_147, %control_145, %control_143, %control_141, %control_139, %control_137, %control_165, %control_163, %control_161, %control_159, %control_157, %control_185, %control_183, %control_181, %control_179, %control_177, %control_175, %control_173, %control_171, %control_169, %control_167, %control_195, %control_193, %control_191, %control_189, %control_187, %control_215, %control_213, %control_211, %control_209, %control_207, %control_205, %control_203, %control_201, %control_199, %control_197, %control_225, %control_223, %control_221, %control_219, %control_217, %control_245, %control_243, %control_241, %control_239, %control_237, %control_235, %control_233, %control_231, %control_229, %control_227, %control_255, %control_253, %control_251, %control_249, %control_247, %control_275, %control_273, %control_271, %control_269, %control_267, %control_265, %control_263, %control_261, %control_259, %control_257, %control_285, %control_283, %control_281, %control_279, %control_277, %control_581, %control_579, %control_577, %control_575, %control_573, %control_907, %control_905 : tensor<?x1000xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x1000xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_210630(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc987)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc988)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc989)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc990)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc991)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc992)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc993)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_210810(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc994)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc995)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc996)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc997)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc998)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc999)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc1000)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1001)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc1002)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_76400(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1003)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1004)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1005)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1006)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc1007)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1008)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc1009)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_76710(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1010)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1011)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1012)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1013)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc1014)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc1015)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc1016)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1017)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc1018)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_depthwise_BN_layer_call_fn_210320(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_76400} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc1019)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1020)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc1021)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_depthwise_BN_layer_call_fn_210450(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_76710} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc1022)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1023)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc1024)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_depthwise_layer_call_and_return_conditional_losses_210190(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc1025)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc1026)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc1027)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1028)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc1029)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1030)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_depthwise_layer_call_and_return_conditional_losses_98420(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc1031)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc1032)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc1033)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1034)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc1035)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1036)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_depthwise_layer_call_fn_210100(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_layer_call_and_return_conditional_losses_98420} : (tensor<?x14x14x384xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc1037)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1038)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc1039)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_depthwise_relu_layer_call_and_return_conditional_losses_210910(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1040)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1041)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_depthwise_relu_layer_call_and_return_conditional_losses_98600(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1042)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1043)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_depthwise_relu_layer_call_fn_210860(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_relu_layer_call_and_return_conditional_losses_98600} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1044)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1045)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_209750(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1046)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1047)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1048)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1049)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc1050)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1051)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc1052)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_209930(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1053)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1054)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1055)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1056)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc1057)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc1058)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc1059)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1060)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc1061)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_75760(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1062)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1063)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1064)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1065)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc1066)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1067)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc1068)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_76070(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1069)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1070)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1071)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc1072)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc1073)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc1074)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc1075)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1076)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc1077)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_expand_BN_layer_call_fn_209440(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_75760} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc1078)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1079)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc1080)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_expand_BN_layer_call_fn_209570(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_76070} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc1081)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1082)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc1083)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_expand_layer_call_and_return_conditional_losses_209310(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc1084)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1085)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1086)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1087)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_expand_layer_call_and_return_conditional_losses_98130(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc1088)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1089)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1090)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1091)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_expand_layer_call_fn_209240(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_layer_call_and_return_conditional_losses_98130} : (tensor<?x14x14x64xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc1092)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1093)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc1094)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_expand_relu_layer_call_and_return_conditional_losses_210030(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1095)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1096)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_expand_relu_layer_call_and_return_conditional_losses_98310(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1097)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1098)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_expand_relu_layer_call_fn_209980(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_relu_layer_call_and_return_conditional_losses_98310} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1099)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc1100)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_project_BN_layer_call_and_return_conditional_losses_211490(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1101)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1102)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1103)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1104)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc1105)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1106)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1107)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_project_BN_layer_call_and_return_conditional_losses_211670(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1108)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1109)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1110)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1111)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc1112)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc1113)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc1114)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1115)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1116)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_project_BN_layer_call_and_return_conditional_losses_77040(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1117)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1118)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1119)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1120)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc1121)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1122)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1123)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_project_BN_layer_call_and_return_conditional_losses_77350(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1124)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1125)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1126)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1127)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc1128)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc1129)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc1130)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1131)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1132)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_project_BN_layer_call_fn_211180(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_project_BN_layer_call_and_return_conditional_losses_77040} : (tensor<?x?x?x96xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x96xf32> loc(#loc1133)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1134)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1135)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_project_BN_layer_call_fn_211310(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_project_BN_layer_call_and_return_conditional_losses_77350} : (tensor<?x?x?x96xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x96xf32> loc(#loc1136)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1137)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1138)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_project_layer_call_and_return_conditional_losses_211050(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x96xf32> loc(#loc1139)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1140)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1141)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1142)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_project_layer_call_and_return_conditional_losses_98690(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x96xf32> loc(#loc1143)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1144)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1145)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1146)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_10_project_layer_call_fn_210980(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_project_layer_call_and_return_conditional_losses_98690} : (tensor<?x14x14x384xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc1147)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1148)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc1149)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_add_layer_call_and_return_conditional_losses_214290(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x14x14x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<?x14x14x96>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x14x14x96xf32>, tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1150)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1151)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x96xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_add_layer_call_and_return_conditional_losses_99640(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<?x14x14x96>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x14x14x96xf32>, tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1152)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1153)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x96xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_add_layer_call_fn_214230(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x14x14x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<?x14x14x96>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_add_layer_call_and_return_conditional_losses_99640} : (tensor<?x14x14x96xf32>, tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1154)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1155)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x96xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_213130(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1156)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1157)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1158)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1159)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1160)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1161)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1162)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_213310(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1163)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1164)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1165)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1166)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1167)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1168)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1169)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1170)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1171)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_78320(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1172)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1173)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1174)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1175)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1176)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1177)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1178)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_78630(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1179)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1180)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1181)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1182)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1183)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1184)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1185)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1186)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1187)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_depthwise_BN_layer_call_fn_212820(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_78320} : (tensor<?x?x?x576xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x576xf32> loc(#loc1188)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1189)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1190)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_depthwise_BN_layer_call_fn_212950(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_78630} : (tensor<?x?x?x576xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x576xf32> loc(#loc1191)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1192)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1193)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_depthwise_layer_call_and_return_conditional_losses_212690(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc1194)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc1195)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc1196)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1197)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x14x14x576xf32> loc(#loc1198)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1199)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_depthwise_layer_call_and_return_conditional_losses_99180(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc1200)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc1201)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc1202)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1203)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x14x14x576xf32> loc(#loc1204)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1205)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_depthwise_layer_call_fn_212600(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_layer_call_and_return_conditional_losses_99180} : (tensor<?x14x14x576xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc1206)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1207)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc1208)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_depthwise_relu_layer_call_and_return_conditional_losses_213410(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1209)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1210)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_depthwise_relu_layer_call_and_return_conditional_losses_99360(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1211)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1212)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_depthwise_relu_layer_call_fn_213360(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_relu_layer_call_and_return_conditional_losses_99360} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1213)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1214)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_212250(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1215)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1216)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1217)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1218)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1219)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1220)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1221)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_212430(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1222)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1223)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1224)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1225)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1226)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1227)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1228)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1229)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1230)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_77680(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1231)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1232)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1233)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1234)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1235)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1236)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1237)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_77990(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1238)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1239)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1240)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1241)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1242)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1243)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1244)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1245)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1246)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_expand_BN_layer_call_fn_211940(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_77680} : (tensor<?x?x?x576xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x576xf32> loc(#loc1247)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1248)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1249)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_expand_BN_layer_call_fn_212070(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_77990} : (tensor<?x?x?x576xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x576xf32> loc(#loc1250)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1251)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1252)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_expand_layer_call_and_return_conditional_losses_211810(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc1253)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1254)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1255)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1256)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_expand_layer_call_and_return_conditional_losses_98890(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc1257)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1258)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1259)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1260)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_expand_layer_call_fn_211740(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_layer_call_and_return_conditional_losses_98890} : (tensor<?x14x14x96xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc1261)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1262)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc1263)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_expand_relu_layer_call_and_return_conditional_losses_212530(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1264)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1265)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_expand_relu_layer_call_and_return_conditional_losses_99070(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1266)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1267)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_expand_relu_layer_call_fn_212480(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_relu_layer_call_and_return_conditional_losses_99070} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1268)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1269)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_project_BN_layer_call_and_return_conditional_losses_213990(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1270)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1271)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1272)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1273)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc1274)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1275)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1276)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_project_BN_layer_call_and_return_conditional_losses_214170(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1277)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1278)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1279)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1280)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc1281)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc1282)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc1283)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1284)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1285)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_project_BN_layer_call_and_return_conditional_losses_78960(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1286)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1287)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1288)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1289)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc1290)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1291)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1292)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_project_BN_layer_call_and_return_conditional_losses_79270(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1293)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1294)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1295)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1296)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc1297)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc1298)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc1299)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1300)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1301)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_project_BN_layer_call_fn_213680(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_project_BN_layer_call_and_return_conditional_losses_78960} : (tensor<?x?x?x96xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x96xf32> loc(#loc1302)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1303)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1304)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_project_BN_layer_call_fn_213810(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_project_BN_layer_call_and_return_conditional_losses_79270} : (tensor<?x?x?x96xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x96xf32> loc(#loc1305)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1306)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1307)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_project_layer_call_and_return_conditional_losses_213550(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x96xf32> loc(#loc1308)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1309)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1310)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1311)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_project_layer_call_and_return_conditional_losses_99450(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x96xf32> loc(#loc1312)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1313)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1314)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1315)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_11_project_layer_call_fn_213480(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_project_layer_call_and_return_conditional_losses_99450} : (tensor<?x14x14x576xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc1316)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1317)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc1318)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_add_layer_call_and_return_conditional_losses_100480(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<?x14x14x96>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x14x14x96xf32>, tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1319)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1320)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x96xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_add_layer_call_and_return_conditional_losses_216910(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x14x14x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<?x14x14x96>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x14x14x96xf32>, tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1321)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1322)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x96xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_add_layer_call_fn_216850(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x14x14x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<?x14x14x96>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_add_layer_call_and_return_conditional_losses_100480} : (tensor<?x14x14x96xf32>, tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1323)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1324)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x96xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_215750(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1325)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1326)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1327)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1328)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1329)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1330)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1331)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_215930(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1332)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1333)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1334)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1335)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1336)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1337)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1338)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1339)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1340)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_80240(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1341)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1342)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1343)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1344)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1345)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1346)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1347)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_80550(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1348)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1349)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1350)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1351)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1352)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1353)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1354)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1355)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1356)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_depthwise_BN_layer_call_fn_215440(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_80240} : (tensor<?x?x?x576xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x576xf32> loc(#loc1357)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1358)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1359)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_depthwise_BN_layer_call_fn_215570(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_80550} : (tensor<?x?x?x576xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x576xf32> loc(#loc1360)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1361)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1362)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_depthwise_layer_call_and_return_conditional_losses_100020(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc1363)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc1364)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc1365)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1366)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x14x14x576xf32> loc(#loc1367)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1368)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_depthwise_layer_call_and_return_conditional_losses_215310(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc1369)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc1370)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc1371)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1372)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x14x14x576xf32> loc(#loc1373)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1374)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_depthwise_layer_call_fn_215220(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_layer_call_and_return_conditional_losses_100020} : (tensor<?x14x14x576xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc1375)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1376)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc1377)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_depthwise_relu_layer_call_and_return_conditional_losses_100200(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1378)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1379)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_depthwise_relu_layer_call_and_return_conditional_losses_216030(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1380)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1381)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_depthwise_relu_layer_call_fn_215980(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_relu_layer_call_and_return_conditional_losses_100200} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1382)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1383)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_214870(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1384)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1385)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1386)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1387)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1388)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1389)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1390)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_215050(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1391)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1392)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1393)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1394)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1395)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1396)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1397)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1398)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1399)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_79600(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1400)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1401)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1402)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1403)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1404)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1405)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1406)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_79910(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1407)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1408)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1409)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1410)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1411)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1412)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1413)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1414)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1415)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_expand_BN_layer_call_fn_214560(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_79600} : (tensor<?x?x?x576xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x576xf32> loc(#loc1416)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1417)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1418)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_expand_BN_layer_call_fn_214690(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_79910} : (tensor<?x?x?x576xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x576xf32> loc(#loc1419)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1420)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1421)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_expand_layer_call_and_return_conditional_losses_214430(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc1422)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1423)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1424)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1425)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_expand_layer_call_and_return_conditional_losses_99730(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc1426)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1427)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1428)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1429)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_expand_layer_call_fn_214360(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_layer_call_and_return_conditional_losses_99730} : (tensor<?x14x14x96xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc1430)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1431)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc1432)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_expand_relu_layer_call_and_return_conditional_losses_215150(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1433)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1434)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_expand_relu_layer_call_and_return_conditional_losses_99910(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1435)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1436)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_expand_relu_layer_call_fn_215100(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_relu_layer_call_and_return_conditional_losses_99910} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1437)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1438)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_project_BN_layer_call_and_return_conditional_losses_216610(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1439)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1440)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1441)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1442)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc1443)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1444)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1445)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_project_BN_layer_call_and_return_conditional_losses_216790(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1446)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1447)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1448)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1449)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc1450)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc1451)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc1452)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1453)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1454)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_project_BN_layer_call_and_return_conditional_losses_80880(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1455)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1456)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1457)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1458)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc1459)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1460)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1461)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_project_BN_layer_call_and_return_conditional_losses_81190(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1462)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1463)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1464)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc1465)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc1466)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc1467)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc1468)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1469)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1470)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_project_BN_layer_call_fn_216300(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_project_BN_layer_call_and_return_conditional_losses_80880} : (tensor<?x?x?x96xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x96xf32> loc(#loc1471)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1472)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1473)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_project_BN_layer_call_fn_216430(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_project_BN_layer_call_and_return_conditional_losses_81190} : (tensor<?x?x?x96xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x96xf32> loc(#loc1474)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1475)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc1476)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_project_layer_call_and_return_conditional_losses_100290(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x96xf32> loc(#loc1477)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1478)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1479)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1480)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_project_layer_call_and_return_conditional_losses_216170(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x96xf32> loc(#loc1481)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1482)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1483)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc1484)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_12_project_layer_call_fn_216100(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_project_layer_call_and_return_conditional_losses_100290} : (tensor<?x14x14x576xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc1485)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1486)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc1487)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_218480(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1488)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1489)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1490)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1491)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1492)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1493)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1494)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_218660(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1495)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1496)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1497)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1498)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1499)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1500)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1501)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1502)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1503)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_82290(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1504)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1505)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1506)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1507)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1508)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1509)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1510)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_82600(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1511)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1512)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1513)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1514)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1515)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1516)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1517)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1518)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1519)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_depthwise_BN_layer_call_fn_218170(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_82290} : (tensor<?x?x?x576xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x576xf32> loc(#loc1520)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1521)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1522)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_depthwise_BN_layer_call_fn_218300(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_82600} : (tensor<?x?x?x576xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x576xf32> loc(#loc1523)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1524)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1525)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_depthwise_layer_call_and_return_conditional_losses_100870(%arg0: tensor<?x15x15x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x15x15x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc1526)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc1527)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc1528)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1529)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x15x15x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x7x7x576xf32> loc(#loc1530)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x7x7x576xf32>) -> tensor<?x7x7x576xf32> loc(#loc1531)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x7x7x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_depthwise_layer_call_and_return_conditional_losses_218040(%arg0: tensor<?x15x15x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x15x15x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc1532)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc1533)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc1534)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1535)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x15x15x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x7x7x576xf32> loc(#loc1536)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x7x7x576xf32>) -> tensor<?x7x7x576xf32> loc(#loc1537)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x7x7x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_depthwise_layer_call_fn_217950(%arg0: tensor<?x15x15x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x15x15x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_layer_call_and_return_conditional_losses_100870} : (tensor<?x15x15x576xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc1538)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1539)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc1540)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_depthwise_relu_layer_call_and_return_conditional_losses_101050(%arg0: tensor<?x7x7x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x576xf32>) -> tensor<?x7x7x576xf32> loc(#loc1541)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x576xf32>) -> tensor<?x7x7x576xf32> loc(#loc1542)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_depthwise_relu_layer_call_and_return_conditional_losses_218760(%arg0: tensor<?x7x7x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x576xf32>) -> tensor<?x7x7x576xf32> loc(#loc1543)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x576xf32>) -> tensor<?x7x7x576xf32> loc(#loc1544)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_depthwise_relu_layer_call_fn_218710(%arg0: tensor<?x7x7x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_relu_layer_call_and_return_conditional_losses_101050} : (tensor<?x7x7x576xf32>) -> tensor<?x7x7x576xf32> loc(#loc1545)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x576xf32>) -> tensor<?x7x7x576xf32> loc(#loc1546)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_217490(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1547)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1548)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1549)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1550)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1551)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1552)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1553)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_217670(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1554)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1555)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1556)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1557)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1558)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1559)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1560)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1561)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1562)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_81520(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1563)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1564)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1565)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1566)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1567)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1568)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1569)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_81830(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1570)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1571)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1572)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc1573)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x?x?x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc1574)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1575)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc1576)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1577)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1578)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x576xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_expand_BN_layer_call_fn_217180(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_81520} : (tensor<?x?x?x576xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x576xf32> loc(#loc1579)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1580)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1581)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_expand_BN_layer_call_fn_217310(%arg0: tensor<?x?x?x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x576>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_81830} : (tensor<?x?x?x576xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x576xf32> loc(#loc1582)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1583)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x576xf32>) -> tensor<?x?x?x576xf32> loc(#loc1584)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_expand_layer_call_and_return_conditional_losses_100570(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc1585)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1586)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1587)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1588)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_expand_layer_call_and_return_conditional_losses_217050(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc1589)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1590)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1591)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1592)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x576xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_expand_layer_call_fn_216980(%arg0: tensor<?x14x14x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_layer_call_and_return_conditional_losses_100570} : (tensor<?x14x14x96xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc1593)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1594)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc1595)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_expand_relu_layer_call_and_return_conditional_losses_100750(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1596)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1597)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_expand_relu_layer_call_and_return_conditional_losses_217770(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1598)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1599)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_expand_relu_layer_call_fn_217720(%arg0: tensor<?x14x14x576xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x576xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x576>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_relu_layer_call_and_return_conditional_losses_100750} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1600)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc1601)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x576xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x576xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_pad_layer_call_and_return_conditional_losses_217880(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc1602)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Pad"(%arg0, %outputs) {device = ""} : (tensor<?x?x?x?xf32>, tensor<4x2xi32>) -> tensor<?x?x?x?xf32> loc(#loc1603)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.Identity"(%outputs_0) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc1604)
      tf_executor.fetch %outputs_2 : tensor<?x?x?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_pad_layer_call_and_return_conditional_losses_82040(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc1605)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Pad"(%arg0, %outputs) {device = ""} : (tensor<?x?x?x?xf32>, tensor<4x2xi32>) -> tensor<?x?x?x?xf32> loc(#loc1606)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.Identity"(%outputs_0) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc1607)
      tf_executor.fetch %outputs_2 : tensor<?x?x?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_pad_layer_call_fn_217820(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_pad_layer_call_and_return_conditional_losses_82040} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc1608)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc1609)
      tf_executor.fetch %outputs_0 : tensor<?x?x?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_project_BN_layer_call_and_return_conditional_losses_219340(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1610)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1611)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1612)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1613)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc1614)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1615)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1616)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x160xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_project_BN_layer_call_and_return_conditional_losses_219520(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1617)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1618)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1619)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1620)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc1621)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc1622)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc1623)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1624)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1625)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x160xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_project_BN_layer_call_and_return_conditional_losses_82930(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1626)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1627)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1628)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1629)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc1630)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1631)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1632)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x160xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_project_BN_layer_call_and_return_conditional_losses_83240(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1633)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1634)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1635)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1636)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc1637)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc1638)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc1639)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1640)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1641)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x160xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_project_BN_layer_call_fn_219030(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_project_BN_layer_call_and_return_conditional_losses_82930} : (tensor<?x?x?x160xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x160xf32> loc(#loc1642)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1643)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1644)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x160xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_project_BN_layer_call_fn_219160(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_project_BN_layer_call_and_return_conditional_losses_83240} : (tensor<?x?x?x160xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x160xf32> loc(#loc1645)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1646)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1647)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x160xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_project_layer_call_and_return_conditional_losses_101140(%arg0: tensor<?x7x7x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x160xf32> loc(#loc1648)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1649)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x576xf32>, tensor<1x1x576x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1650)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1651)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x160xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_project_layer_call_and_return_conditional_losses_218900(%arg0: tensor<?x7x7x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x160xf32> loc(#loc1652)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1653)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x576xf32>, tensor<1x1x576x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1654)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1655)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x160xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_13_project_layer_call_fn_218830(%arg0: tensor<?x7x7x576xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x576>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_project_layer_call_and_return_conditional_losses_101140} : (tensor<?x7x7x576xf32>, tensor<!tf_type.resource>) -> tensor<?x7x7x?xf32> loc(#loc1656)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1657)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x?xf32>) -> tensor<?x7x7x?xf32> loc(#loc1658)
      tf_executor.fetch %outputs_1, %control : tensor<?x7x7x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_add_layer_call_and_return_conditional_losses_102090(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<?x7x7x160>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x7x7x160xf32>, tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1659)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1660)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x160xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_add_layer_call_and_return_conditional_losses_222140(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x7x7x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<?x7x7x160>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x7x7x160xf32>, tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1661)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1662)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x160xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_add_layer_call_fn_222080(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x7x7x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<?x7x7x160>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_add_layer_call_and_return_conditional_losses_102090} : (tensor<?x7x7x160xf32>, tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1663)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1664)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x160xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_220980(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1665)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1666)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1667)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1668)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1669)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1670)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1671)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_221160(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1672)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1673)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1674)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1675)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1676)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1677)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1678)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1679)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1680)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_84210(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1681)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1682)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1683)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1684)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1685)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1686)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1687)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_84520(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1688)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1689)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1690)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1691)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1692)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1693)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1694)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1695)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1696)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_depthwise_BN_layer_call_fn_220670(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_84210} : (tensor<?x?x?x960xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x960xf32> loc(#loc1697)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1698)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1699)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_depthwise_BN_layer_call_fn_220800(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_84520} : (tensor<?x?x?x960xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x960xf32> loc(#loc1700)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1701)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1702)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_depthwise_layer_call_and_return_conditional_losses_101630(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc1703)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc1704)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc1705)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1706)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc1707)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1708)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x7x7x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_depthwise_layer_call_and_return_conditional_losses_220540(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc1709)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc1710)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc1711)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1712)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc1713)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1714)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x7x7x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_depthwise_layer_call_fn_220450(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_layer_call_and_return_conditional_losses_101630} : (tensor<?x7x7x960xf32>, tensor<!tf_type.resource>) -> tensor<?x7x7x?xf32> loc(#loc1715)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1716)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x?xf32>) -> tensor<?x7x7x?xf32> loc(#loc1717)
      tf_executor.fetch %outputs_1, %control : tensor<?x7x7x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_depthwise_relu_layer_call_and_return_conditional_losses_101810(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1718)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1719)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_depthwise_relu_layer_call_and_return_conditional_losses_221260(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1720)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1721)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_depthwise_relu_layer_call_fn_221210(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_relu_layer_call_and_return_conditional_losses_101810} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1722)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1723)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_220100(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1724)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1725)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1726)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1727)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1728)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1729)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1730)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_220280(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1731)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1732)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1733)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1734)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1735)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1736)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1737)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1738)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1739)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_83570(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1740)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1741)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1742)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1743)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1744)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1745)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1746)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_83880(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1747)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1748)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1749)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1750)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1751)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1752)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1753)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1754)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1755)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_expand_BN_layer_call_fn_219790(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_83570} : (tensor<?x?x?x960xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x960xf32> loc(#loc1756)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1757)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1758)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_expand_BN_layer_call_fn_219920(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_83880} : (tensor<?x?x?x960xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x960xf32> loc(#loc1759)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1760)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1761)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_expand_layer_call_and_return_conditional_losses_101340(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc1762)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1763)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1764)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1765)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_expand_layer_call_and_return_conditional_losses_219660(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc1766)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1767)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1768)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1769)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_expand_layer_call_fn_219590(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_layer_call_and_return_conditional_losses_101340} : (tensor<?x7x7x160xf32>, tensor<!tf_type.resource>) -> tensor<?x7x7x?xf32> loc(#loc1770)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1771)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x?xf32>) -> tensor<?x7x7x?xf32> loc(#loc1772)
      tf_executor.fetch %outputs_1, %control : tensor<?x7x7x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_expand_relu_layer_call_and_return_conditional_losses_101520(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1773)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1774)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_expand_relu_layer_call_and_return_conditional_losses_220380(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1775)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1776)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_expand_relu_layer_call_fn_220330(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_relu_layer_call_and_return_conditional_losses_101520} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1777)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1778)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_project_BN_layer_call_and_return_conditional_losses_221840(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1779)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1780)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1781)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1782)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc1783)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1784)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1785)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x160xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_project_BN_layer_call_and_return_conditional_losses_222020(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1786)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1787)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1788)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1789)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc1790)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc1791)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc1792)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1793)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1794)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x160xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_project_BN_layer_call_and_return_conditional_losses_84850(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1795)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1796)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1797)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1798)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc1799)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1800)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1801)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x160xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_project_BN_layer_call_and_return_conditional_losses_85160(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1802)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1803)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1804)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1805)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc1806)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc1807)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc1808)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1809)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1810)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x160xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_project_BN_layer_call_fn_221530(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_project_BN_layer_call_and_return_conditional_losses_84850} : (tensor<?x?x?x160xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x160xf32> loc(#loc1811)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1812)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1813)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x160xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_project_BN_layer_call_fn_221660(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_project_BN_layer_call_and_return_conditional_losses_85160} : (tensor<?x?x?x160xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x160xf32> loc(#loc1814)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1815)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1816)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x160xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_project_layer_call_and_return_conditional_losses_101900(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x160xf32> loc(#loc1817)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1818)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1819)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1820)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x160xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_project_layer_call_and_return_conditional_losses_221400(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x160xf32> loc(#loc1821)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1822)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1823)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1824)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x160xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_14_project_layer_call_fn_221330(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_project_layer_call_and_return_conditional_losses_101900} : (tensor<?x7x7x960xf32>, tensor<!tf_type.resource>) -> tensor<?x7x7x?xf32> loc(#loc1825)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1826)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x?xf32>) -> tensor<?x7x7x?xf32> loc(#loc1827)
      tf_executor.fetch %outputs_1, %control : tensor<?x7x7x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_add_layer_call_and_return_conditional_losses_102930(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<?x7x7x160>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x7x7x160xf32>, tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1828)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1829)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x160xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_add_layer_call_and_return_conditional_losses_224760(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x7x7x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<?x7x7x160>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x7x7x160xf32>, tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1830)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1831)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x160xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_add_layer_call_fn_224700(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x7x7x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<?x7x7x160>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_add_layer_call_and_return_conditional_losses_102930} : (tensor<?x7x7x160xf32>, tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1832)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1833)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x160xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_223600(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1834)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1835)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1836)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1837)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1838)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1839)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1840)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_223780(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1841)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1842)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1843)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1844)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1845)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1846)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1847)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1848)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1849)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_86130(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1850)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1851)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1852)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1853)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1854)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1855)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1856)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_86440(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1857)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1858)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1859)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1860)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1861)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1862)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1863)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1864)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1865)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_depthwise_BN_layer_call_fn_223290(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_86130} : (tensor<?x?x?x960xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x960xf32> loc(#loc1866)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1867)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1868)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_depthwise_BN_layer_call_fn_223420(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_86440} : (tensor<?x?x?x960xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x960xf32> loc(#loc1869)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1870)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1871)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_depthwise_layer_call_and_return_conditional_losses_102470(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc1872)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc1873)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc1874)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1875)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc1876)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1877)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x7x7x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_depthwise_layer_call_and_return_conditional_losses_223160(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc1878)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc1879)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc1880)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1881)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc1882)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1883)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x7x7x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_depthwise_layer_call_fn_223070(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_layer_call_and_return_conditional_losses_102470} : (tensor<?x7x7x960xf32>, tensor<!tf_type.resource>) -> tensor<?x7x7x?xf32> loc(#loc1884)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1885)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x?xf32>) -> tensor<?x7x7x?xf32> loc(#loc1886)
      tf_executor.fetch %outputs_1, %control : tensor<?x7x7x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_depthwise_relu_layer_call_and_return_conditional_losses_102650(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1887)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1888)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_depthwise_relu_layer_call_and_return_conditional_losses_223880(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1889)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1890)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_depthwise_relu_layer_call_fn_223830(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_relu_layer_call_and_return_conditional_losses_102650} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1891)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1892)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_222720(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1893)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1894)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1895)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1896)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1897)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1898)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1899)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_222900(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1900)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1901)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1902)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1903)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1904)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1905)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1906)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1907)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1908)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_85490(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1909)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1910)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1911)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1912)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1913)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1914)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1915)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_85800(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1916)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1917)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1918)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1919)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc1920)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1921)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc1922)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1923)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1924)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_expand_BN_layer_call_fn_222410(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_85490} : (tensor<?x?x?x960xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x960xf32> loc(#loc1925)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1926)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1927)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_expand_BN_layer_call_fn_222540(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_85800} : (tensor<?x?x?x960xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x960xf32> loc(#loc1928)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1929)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc1930)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_expand_layer_call_and_return_conditional_losses_102180(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc1931)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1932)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1933)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1934)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_expand_layer_call_and_return_conditional_losses_222280(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc1935)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1936)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1937)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1938)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_expand_layer_call_fn_222210(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_layer_call_and_return_conditional_losses_102180} : (tensor<?x7x7x160xf32>, tensor<!tf_type.resource>) -> tensor<?x7x7x?xf32> loc(#loc1939)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1940)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x?xf32>) -> tensor<?x7x7x?xf32> loc(#loc1941)
      tf_executor.fetch %outputs_1, %control : tensor<?x7x7x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_expand_relu_layer_call_and_return_conditional_losses_102360(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1942)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1943)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_expand_relu_layer_call_and_return_conditional_losses_223000(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1944)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1945)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_expand_relu_layer_call_fn_222950(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_relu_layer_call_and_return_conditional_losses_102360} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1946)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc1947)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_project_BN_layer_call_and_return_conditional_losses_224460(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1948)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1949)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1950)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1951)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc1952)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1953)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1954)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x160xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_project_BN_layer_call_and_return_conditional_losses_224640(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1955)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1956)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1957)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1958)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc1959)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc1960)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc1961)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1962)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1963)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x160xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_project_BN_layer_call_and_return_conditional_losses_86770(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1964)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1965)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1966)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1967)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc1968)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1969)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1970)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x160xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_project_BN_layer_call_and_return_conditional_losses_87080(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1971)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1972)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1973)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc1974)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x?x?x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc1975)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc1976)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc1977)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1978)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1979)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x160xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_project_BN_layer_call_fn_224150(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_project_BN_layer_call_and_return_conditional_losses_86770} : (tensor<?x?x?x160xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x160xf32> loc(#loc1980)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1981)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1982)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x160xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_project_BN_layer_call_fn_224280(%arg0: tensor<?x?x?x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x160>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_project_BN_layer_call_and_return_conditional_losses_87080} : (tensor<?x?x?x160xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x160xf32> loc(#loc1983)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1984)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x160xf32>) -> tensor<?x?x?x160xf32> loc(#loc1985)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x160xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_project_layer_call_and_return_conditional_losses_102740(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x160xf32> loc(#loc1986)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1987)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1988)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1989)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x160xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_project_layer_call_and_return_conditional_losses_224020(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x160xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x160xf32> loc(#loc1990)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1991)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1992)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc1993)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x160xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x160xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_15_project_layer_call_fn_223950(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_project_layer_call_and_return_conditional_losses_102740} : (tensor<?x7x7x960xf32>, tensor<!tf_type.resource>) -> tensor<?x7x7x?xf32> loc(#loc1994)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc1995)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x?xf32>) -> tensor<?x7x7x?xf32> loc(#loc1996)
      tf_executor.fetch %outputs_1, %control : tensor<?x7x7x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_226220(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1997)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1998)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc1999)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2000)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc2001)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2002)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc2003)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_226400(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2004)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2005)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2006)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2007)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc2008)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc2009)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc2010)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2011)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc2012)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_88050(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2013)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2014)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2015)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2016)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc2017)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2018)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc2019)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_88360(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2020)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2021)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2022)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2023)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc2024)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc2025)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc2026)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2027)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc2028)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_depthwise_BN_layer_call_fn_225910(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_88050} : (tensor<?x?x?x960xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x960xf32> loc(#loc2029)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2030)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc2031)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_depthwise_BN_layer_call_fn_226040(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_88360} : (tensor<?x?x?x960xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x960xf32> loc(#loc2032)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2033)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc2034)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_depthwise_layer_call_and_return_conditional_losses_103310(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc2035)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc2036)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc2037)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2038)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc2039)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2040)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x7x7x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_depthwise_layer_call_and_return_conditional_losses_225780(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc2041)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc2042)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc2043)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2044)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc2045)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2046)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x7x7x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_depthwise_layer_call_fn_225690(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_layer_call_and_return_conditional_losses_103310} : (tensor<?x7x7x960xf32>, tensor<!tf_type.resource>) -> tensor<?x7x7x?xf32> loc(#loc2047)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2048)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x?xf32>) -> tensor<?x7x7x?xf32> loc(#loc2049)
      tf_executor.fetch %outputs_1, %control : tensor<?x7x7x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_depthwise_relu_layer_call_and_return_conditional_losses_103490(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2050)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2051)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_depthwise_relu_layer_call_and_return_conditional_losses_226500(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2052)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2053)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_depthwise_relu_layer_call_fn_226450(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_relu_layer_call_and_return_conditional_losses_103490} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2054)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2055)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_225340(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2056)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2057)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2058)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2059)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc2060)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2061)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc2062)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_225520(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2063)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2064)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2065)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2066)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc2067)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc2068)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc2069)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2070)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc2071)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_87410(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2072)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2073)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2074)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2075)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc2076)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2077)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc2078)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_87720(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2079)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2080)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2081)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc2082)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x?x?x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc2083)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc2084)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc2085)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2086)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc2087)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x960xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_expand_BN_layer_call_fn_225030(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_87410} : (tensor<?x?x?x960xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x960xf32> loc(#loc2088)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2089)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc2090)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_expand_BN_layer_call_fn_225160(%arg0: tensor<?x?x?x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x960>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_87720} : (tensor<?x?x?x960xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x960xf32> loc(#loc2091)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2092)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x960xf32>) -> tensor<?x?x?x960xf32> loc(#loc2093)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_expand_layer_call_and_return_conditional_losses_103020(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc2094)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2095)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2096)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2097)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_expand_layer_call_and_return_conditional_losses_224900(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc2098)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2099)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2100)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2101)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x960xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_expand_layer_call_fn_224830(%arg0: tensor<?x7x7x160xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x160>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_layer_call_and_return_conditional_losses_103020} : (tensor<?x7x7x160xf32>, tensor<!tf_type.resource>) -> tensor<?x7x7x?xf32> loc(#loc2102)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2103)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x?xf32>) -> tensor<?x7x7x?xf32> loc(#loc2104)
      tf_executor.fetch %outputs_1, %control : tensor<?x7x7x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_expand_relu_layer_call_and_return_conditional_losses_103200(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2105)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2106)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_expand_relu_layer_call_and_return_conditional_losses_225620(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2107)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2108)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_expand_relu_layer_call_fn_225570(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x960xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_relu_layer_call_and_return_conditional_losses_103200} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2109)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc2110)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x960xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x960xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_project_BN_layer_call_and_return_conditional_losses_227080(%arg0: tensor<?x?x?x320xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x320xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x320>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2111)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2112)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2113)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2114)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>) -> (tensor<?x?x?x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<*xf32>) loc(#loc2115)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2116)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x320xf32>) -> tensor<?x?x?x320xf32> loc(#loc2117)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x320xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x320xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_project_BN_layer_call_and_return_conditional_losses_227260(%arg0: tensor<?x?x?x320xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x320xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x320>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2118)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2119)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2120)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2121)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>) -> (tensor<?x?x?x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<*xf32>) loc(#loc2122)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<320xf32>) -> () loc(#loc2123)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<320xf32>) -> () loc(#loc2124)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2125)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x320xf32>) -> tensor<?x?x?x320xf32> loc(#loc2126)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x320xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x320xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_project_BN_layer_call_and_return_conditional_losses_88690(%arg0: tensor<?x?x?x320xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x320xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x320>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2127)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2128)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2129)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2130)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>) -> (tensor<?x?x?x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<*xf32>) loc(#loc2131)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2132)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x320xf32>) -> tensor<?x?x?x320xf32> loc(#loc2133)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x320xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x320xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_project_BN_layer_call_and_return_conditional_losses_89000(%arg0: tensor<?x?x?x320xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x320xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x320>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2134)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2135)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2136)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc2137)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>) -> (tensor<?x?x?x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<*xf32>) loc(#loc2138)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<320xf32>) -> () loc(#loc2139)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<320xf32>) -> () loc(#loc2140)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2141)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x320xf32>) -> tensor<?x?x?x320xf32> loc(#loc2142)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x320xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x320xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_project_BN_layer_call_fn_226770(%arg0: tensor<?x?x?x320xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x320xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x320>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_project_BN_layer_call_and_return_conditional_losses_88690} : (tensor<?x?x?x320xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x320xf32> loc(#loc2143)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2144)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x320xf32>) -> tensor<?x?x?x320xf32> loc(#loc2145)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x320xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x320xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_project_BN_layer_call_fn_226900(%arg0: tensor<?x?x?x320xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x320xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x320>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_project_BN_layer_call_and_return_conditional_losses_89000} : (tensor<?x?x?x320xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x320xf32> loc(#loc2146)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2147)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x320xf32>) -> tensor<?x?x?x320xf32> loc(#loc2148)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x320xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x320xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_project_layer_call_and_return_conditional_losses_103580(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x320xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x320xf32> loc(#loc2149)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2150)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x320xf32>) -> tensor<?x7x7x320xf32> loc(#loc2151)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x320xf32>) -> tensor<?x7x7x320xf32> loc(#loc2152)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x320xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x320xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_project_layer_call_and_return_conditional_losses_226640(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x320xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x320xf32> loc(#loc2153)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2154)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x320xf32>) -> tensor<?x7x7x320xf32> loc(#loc2155)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x7x7x320xf32>) -> tensor<?x7x7x320xf32> loc(#loc2156)
      tf_executor.fetch %outputs_3, %control : tensor<?x7x7x320xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x320xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_16_project_layer_call_fn_226570(%arg0: tensor<?x7x7x960xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x7x7x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x960>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_project_layer_call_and_return_conditional_losses_103580} : (tensor<?x7x7x960xf32>, tensor<!tf_type.resource>) -> tensor<?x7x7x?xf32> loc(#loc2157)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2158)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x?xf32>) -> tensor<?x7x7x?xf32> loc(#loc2159)
      tf_executor.fetch %outputs_1, %control : tensor<?x7x7x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_187190(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2160)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2161)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2162)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2163)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc2164)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2165)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc2166)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_187370(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2167)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2168)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2169)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2170)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc2171)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc2172)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc2173)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2174)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc2175)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_58860(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2176)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2177)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2178)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2179)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc2180)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2181)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc2182)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_59170(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2183)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2184)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2185)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2186)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc2187)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc2188)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc2189)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2190)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc2191)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_depthwise_BN_layer_call_fn_186880(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_58860} : (tensor<?x?x?x96xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x96xf32> loc(#loc2192)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2193)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc2194)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_depthwise_BN_layer_call_fn_187010(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_59170} : (tensor<?x?x?x96xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x96xf32> loc(#loc2195)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2196)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc2197)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_depthwise_layer_call_and_return_conditional_losses_186750(%arg0: tensor<?x113x113x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x113x113x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 96, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc2198)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc2199)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x96x1xf32> loc(#loc2200)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2201)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x113x113x96xf32>, tensor<3x3x96x1xf32>) -> tensor<?x56x56x96xf32> loc(#loc2202)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x56x56x96xf32>) -> tensor<?x56x56x96xf32> loc(#loc2203)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x56x56x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_depthwise_layer_call_and_return_conditional_losses_91080(%arg0: tensor<?x113x113x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x113x113x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 96, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc2204)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc2205)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x96x1xf32> loc(#loc2206)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2207)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x113x113x96xf32>, tensor<3x3x96x1xf32>) -> tensor<?x56x56x96xf32> loc(#loc2208)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x56x56x96xf32>) -> tensor<?x56x56x96xf32> loc(#loc2209)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x56x56x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_depthwise_layer_call_fn_186660(%arg0: tensor<?x113x113x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x113x113x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_layer_call_and_return_conditional_losses_91080} : (tensor<?x113x113x96xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc2210)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2211)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc2212)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_depthwise_relu_layer_call_and_return_conditional_losses_187470(%arg0: tensor<?x56x56x96xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x56x56x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x96>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x56x56x96xf32>) -> tensor<?x56x56x96xf32> loc(#loc2213)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x96xf32>) -> tensor<?x56x56x96xf32> loc(#loc2214)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x96xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_depthwise_relu_layer_call_and_return_conditional_losses_91260(%arg0: tensor<?x56x56x96xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x56x56x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x96>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x56x56x96xf32>) -> tensor<?x56x56x96xf32> loc(#loc2215)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x96xf32>) -> tensor<?x56x56x96xf32> loc(#loc2216)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x96xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_depthwise_relu_layer_call_fn_187420(%arg0: tensor<?x56x56x96xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x56x56x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x96>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_relu_layer_call_and_return_conditional_losses_91260} : (tensor<?x56x56x96xf32>) -> tensor<?x56x56x96xf32> loc(#loc2217)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x96xf32>) -> tensor<?x56x56x96xf32> loc(#loc2218)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x96xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_186200(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2219)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2220)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2221)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2222)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc2223)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2224)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc2225)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_186380(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2226)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2227)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2228)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2229)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc2230)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc2231)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc2232)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2233)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc2234)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_58090(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2235)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2236)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2237)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2238)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc2239)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2240)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc2241)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_58400(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2242)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2243)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2244)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc2245)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x?x?x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc2246)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc2247)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc2248)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2249)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc2250)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x96xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_expand_BN_layer_call_fn_185890(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_58090} : (tensor<?x?x?x96xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x96xf32> loc(#loc2251)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2252)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc2253)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_expand_BN_layer_call_fn_186020(%arg0: tensor<?x?x?x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x96>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_58400} : (tensor<?x?x?x96xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x96xf32> loc(#loc2254)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2255)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x96xf32>) -> tensor<?x?x?x96xf32> loc(#loc2256)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_expand_layer_call_and_return_conditional_losses_185760(%arg0: tensor<?x112x112x16xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x112x112x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x16>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x16x96xf32> loc(#loc2257)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2258)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x112x112x16xf32>, tensor<1x1x16x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc2259)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x112x112x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc2260)
      tf_executor.fetch %outputs_3, %control : tensor<?x112x112x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_expand_layer_call_and_return_conditional_losses_90780(%arg0: tensor<?x112x112x16xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x112x112x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x16>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x16x96xf32> loc(#loc2261)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2262)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x112x112x16xf32>, tensor<1x1x16x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc2263)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x112x112x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc2264)
      tf_executor.fetch %outputs_3, %control : tensor<?x112x112x96xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_expand_layer_call_fn_185690(%arg0: tensor<?x112x112x16xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x112x112x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x16>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_layer_call_and_return_conditional_losses_90780} : (tensor<?x112x112x16xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc2265)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2266)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc2267)
      tf_executor.fetch %outputs_1, %control : tensor<?x112x112x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_expand_relu_layer_call_and_return_conditional_losses_186480(%arg0: tensor<?x112x112x96xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x112x112x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x96>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x112x112x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc2268)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x112x112x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc2269)
      tf_executor.fetch %outputs_0 : tensor<?x112x112x96xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_expand_relu_layer_call_and_return_conditional_losses_90960(%arg0: tensor<?x112x112x96xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x112x112x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x96>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x112x112x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc2270)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x112x112x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc2271)
      tf_executor.fetch %outputs_0 : tensor<?x112x112x96xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_expand_relu_layer_call_fn_186430(%arg0: tensor<?x112x112x96xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x112x112x96xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x96>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_relu_layer_call_and_return_conditional_losses_90960} : (tensor<?x112x112x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc2272)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x112x112x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc2273)
      tf_executor.fetch %outputs_0 : tensor<?x112x112x96xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x96xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_pad_layer_call_and_return_conditional_losses_186590(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc2274)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Pad"(%arg0, %outputs) {device = ""} : (tensor<?x?x?x?xf32>, tensor<4x2xi32>) -> tensor<?x?x?x?xf32> loc(#loc2275)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.Identity"(%outputs_0) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc2276)
      tf_executor.fetch %outputs_2 : tensor<?x?x?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_pad_layer_call_and_return_conditional_losses_58610(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc2277)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Pad"(%arg0, %outputs) {device = ""} : (tensor<?x?x?x?xf32>, tensor<4x2xi32>) -> tensor<?x?x?x?xf32> loc(#loc2278)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.Identity"(%outputs_0) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc2279)
      tf_executor.fetch %outputs_2 : tensor<?x?x?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_pad_layer_call_fn_186530(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_pad_layer_call_and_return_conditional_losses_58610} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc2280)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc2281)
      tf_executor.fetch %outputs_0 : tensor<?x?x?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_project_BN_layer_call_and_return_conditional_losses_188050(%arg0: tensor<?x?x?x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x24>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2282)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2283)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2284)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2285)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc2286)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2287)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x24xf32>) -> tensor<?x?x?x24xf32> loc(#loc2288)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x24xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_project_BN_layer_call_and_return_conditional_losses_188230(%arg0: tensor<?x?x?x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x24>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2289)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2290)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2291)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2292)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc2293)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<24xf32>) -> () loc(#loc2294)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<24xf32>) -> () loc(#loc2295)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2296)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x24xf32>) -> tensor<?x?x?x24xf32> loc(#loc2297)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x24xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_project_BN_layer_call_and_return_conditional_losses_59500(%arg0: tensor<?x?x?x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x24>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2298)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2299)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2300)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2301)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc2302)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2303)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x24xf32>) -> tensor<?x?x?x24xf32> loc(#loc2304)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x24xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_project_BN_layer_call_and_return_conditional_losses_59810(%arg0: tensor<?x?x?x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x24>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2305)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2306)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2307)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2308)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc2309)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<24xf32>) -> () loc(#loc2310)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<24xf32>) -> () loc(#loc2311)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2312)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x24xf32>) -> tensor<?x?x?x24xf32> loc(#loc2313)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x24xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_project_BN_layer_call_fn_187740(%arg0: tensor<?x?x?x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x24>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_project_BN_layer_call_and_return_conditional_losses_59500} : (tensor<?x?x?x24xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x24xf32> loc(#loc2314)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2315)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x24xf32>) -> tensor<?x?x?x24xf32> loc(#loc2316)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x24xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_project_BN_layer_call_fn_187870(%arg0: tensor<?x?x?x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x24>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_project_BN_layer_call_and_return_conditional_losses_59810} : (tensor<?x?x?x24xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x24xf32> loc(#loc2317)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2318)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x24xf32>) -> tensor<?x?x?x24xf32> loc(#loc2319)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x24xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_project_layer_call_and_return_conditional_losses_187610(%arg0: tensor<?x56x56x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x24xf32> loc(#loc2320)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2321)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x96xf32>, tensor<1x1x96x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2322)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x56x56x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2323)
      tf_executor.fetch %outputs_3, %control : tensor<?x56x56x24xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_project_layer_call_and_return_conditional_losses_91350(%arg0: tensor<?x56x56x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x24xf32> loc(#loc2324)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2325)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x96xf32>, tensor<1x1x96x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2326)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x56x56x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2327)
      tf_executor.fetch %outputs_3, %control : tensor<?x56x56x24xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_1_project_layer_call_fn_187540(%arg0: tensor<?x56x56x96xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x96>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_project_layer_call_and_return_conditional_losses_91350} : (tensor<?x56x56x96xf32>, tensor<!tf_type.resource>) -> tensor<?x56x56x?xf32> loc(#loc2328)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2329)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x?xf32>) -> tensor<?x56x56x?xf32> loc(#loc2330)
      tf_executor.fetch %outputs_1, %control : tensor<?x56x56x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_add_layer_call_and_return_conditional_losses_190850(%arg0: tensor<?x56x56x24xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x56x56x24xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x56x56x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x24>, #tf_type.shape<?x56x56x24>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x56x56x24xf32>, tensor<?x56x56x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2331)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2332)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x24xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_add_layer_call_and_return_conditional_losses_92300(%arg0: tensor<?x56x56x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<?x56x56x24xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x56x56x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x24>, #tf_type.shape<?x56x56x24>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x56x56x24xf32>, tensor<?x56x56x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2333)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2334)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x24xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_add_layer_call_fn_190790(%arg0: tensor<?x56x56x24xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x56x56x24xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x56x56x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x24>, #tf_type.shape<?x56x56x24>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_add_layer_call_and_return_conditional_losses_92300} : (tensor<?x56x56x24xf32>, tensor<?x56x56x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2335)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2336)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x24xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_189690(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2337)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2338)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2339)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2340)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2341)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2342)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2343)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_189870(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2344)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2345)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2346)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2347)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2348)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2349)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2350)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2351)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2352)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_60780(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2353)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2354)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2355)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2356)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2357)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2358)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2359)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_61090(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2360)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2361)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2362)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2363)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2364)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2365)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2366)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2367)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2368)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_depthwise_BN_layer_call_fn_189380(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_60780} : (tensor<?x?x?x144xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x144xf32> loc(#loc2369)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2370)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2371)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_depthwise_BN_layer_call_fn_189510(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_61090} : (tensor<?x?x?x144xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x144xf32> loc(#loc2372)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2373)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2374)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_depthwise_layer_call_and_return_conditional_losses_189250(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 144, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc2375)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc2376)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x144x1xf32> loc(#loc2377)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2378)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x56x56x144xf32>, tensor<3x3x144x1xf32>) -> tensor<?x56x56x144xf32> loc(#loc2379)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2380)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x56x56x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_depthwise_layer_call_and_return_conditional_losses_91840(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 144, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc2381)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc2382)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x144x1xf32> loc(#loc2383)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2384)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x56x56x144xf32>, tensor<3x3x144x1xf32>) -> tensor<?x56x56x144xf32> loc(#loc2385)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2386)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x56x56x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_depthwise_layer_call_fn_189160(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_layer_call_and_return_conditional_losses_91840} : (tensor<?x56x56x144xf32>, tensor<!tf_type.resource>) -> tensor<?x56x56x?xf32> loc(#loc2387)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2388)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x?xf32>) -> tensor<?x56x56x?xf32> loc(#loc2389)
      tf_executor.fetch %outputs_1, %control : tensor<?x56x56x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_depthwise_relu_layer_call_and_return_conditional_losses_189970(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2390)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2391)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x144xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_depthwise_relu_layer_call_and_return_conditional_losses_92020(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2392)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2393)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x144xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_depthwise_relu_layer_call_fn_189920(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_relu_layer_call_and_return_conditional_losses_92020} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2394)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2395)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x144xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_188810(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2396)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2397)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2398)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2399)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2400)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2401)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2402)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_188990(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2403)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2404)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2405)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2406)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2407)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2408)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2409)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2410)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2411)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_60140(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2412)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2413)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2414)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2415)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2416)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2417)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2418)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_60450(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2419)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2420)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2421)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2422)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2423)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2424)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2425)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2426)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2427)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_expand_BN_layer_call_fn_188500(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_60140} : (tensor<?x?x?x144xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x144xf32> loc(#loc2428)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2429)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2430)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_expand_BN_layer_call_fn_188630(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_60450} : (tensor<?x?x?x144xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x144xf32> loc(#loc2431)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2432)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2433)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_expand_layer_call_and_return_conditional_losses_188370(%arg0: tensor<?x56x56x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x24>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x24x144xf32> loc(#loc2434)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2435)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2436)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2437)
      tf_executor.fetch %outputs_3, %control : tensor<?x56x56x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_expand_layer_call_and_return_conditional_losses_91550(%arg0: tensor<?x56x56x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x24>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x24x144xf32> loc(#loc2438)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2439)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2440)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2441)
      tf_executor.fetch %outputs_3, %control : tensor<?x56x56x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_expand_layer_call_fn_188300(%arg0: tensor<?x56x56x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x24>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_layer_call_and_return_conditional_losses_91550} : (tensor<?x56x56x24xf32>, tensor<!tf_type.resource>) -> tensor<?x56x56x?xf32> loc(#loc2442)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2443)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x?xf32>) -> tensor<?x56x56x?xf32> loc(#loc2444)
      tf_executor.fetch %outputs_1, %control : tensor<?x56x56x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_expand_relu_layer_call_and_return_conditional_losses_189090(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2445)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2446)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x144xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_expand_relu_layer_call_and_return_conditional_losses_91730(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2447)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2448)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x144xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_expand_relu_layer_call_fn_189040(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_relu_layer_call_and_return_conditional_losses_91730} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2449)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2450)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x144xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_project_BN_layer_call_and_return_conditional_losses_190550(%arg0: tensor<?x?x?x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x24>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2451)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2452)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2453)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2454)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc2455)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2456)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x24xf32>) -> tensor<?x?x?x24xf32> loc(#loc2457)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x24xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_project_BN_layer_call_and_return_conditional_losses_190730(%arg0: tensor<?x?x?x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x24>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2458)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2459)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2460)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2461)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc2462)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<24xf32>) -> () loc(#loc2463)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<24xf32>) -> () loc(#loc2464)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2465)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x24xf32>) -> tensor<?x?x?x24xf32> loc(#loc2466)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x24xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_project_BN_layer_call_and_return_conditional_losses_61420(%arg0: tensor<?x?x?x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x24>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2467)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2468)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2469)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2470)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc2471)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2472)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x24xf32>) -> tensor<?x?x?x24xf32> loc(#loc2473)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x24xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_project_BN_layer_call_and_return_conditional_losses_61730(%arg0: tensor<?x?x?x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x24>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2474)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2475)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2476)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc2477)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x?x?x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc2478)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<24xf32>) -> () loc(#loc2479)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<24xf32>) -> () loc(#loc2480)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2481)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x24xf32>) -> tensor<?x?x?x24xf32> loc(#loc2482)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x24xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_project_BN_layer_call_fn_190240(%arg0: tensor<?x?x?x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x24>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_project_BN_layer_call_and_return_conditional_losses_61420} : (tensor<?x?x?x24xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x24xf32> loc(#loc2483)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2484)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x24xf32>) -> tensor<?x?x?x24xf32> loc(#loc2485)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x24xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_project_BN_layer_call_fn_190370(%arg0: tensor<?x?x?x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x24>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_project_BN_layer_call_and_return_conditional_losses_61730} : (tensor<?x?x?x24xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x24xf32> loc(#loc2486)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2487)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x24xf32>) -> tensor<?x?x?x24xf32> loc(#loc2488)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x24xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_project_layer_call_and_return_conditional_losses_190110(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x144x24xf32> loc(#loc2489)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2490)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x144xf32>, tensor<1x1x144x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2491)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x56x56x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2492)
      tf_executor.fetch %outputs_3, %control : tensor<?x56x56x24xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_project_layer_call_and_return_conditional_losses_92110(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x24xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x144x24xf32> loc(#loc2493)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2494)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x144xf32>, tensor<1x1x144x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2495)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x56x56x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc2496)
      tf_executor.fetch %outputs_3, %control : tensor<?x56x56x24xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x24xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_2_project_layer_call_fn_190040(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_project_layer_call_and_return_conditional_losses_92110} : (tensor<?x56x56x144xf32>, tensor<!tf_type.resource>) -> tensor<?x56x56x?xf32> loc(#loc2497)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2498)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x?xf32>) -> tensor<?x56x56x?xf32> loc(#loc2499)
      tf_executor.fetch %outputs_1, %control : tensor<?x56x56x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_192420(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2500)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2501)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2502)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2503)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2504)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2505)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2506)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_192600(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2507)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2508)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2509)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2510)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2511)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2512)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2513)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2514)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2515)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_62830(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2516)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2517)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2518)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2519)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2520)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2521)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2522)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_63140(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2523)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2524)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2525)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2526)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2527)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2528)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2529)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2530)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2531)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_depthwise_BN_layer_call_fn_192110(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_62830} : (tensor<?x?x?x144xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x144xf32> loc(#loc2532)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2533)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2534)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_depthwise_BN_layer_call_fn_192240(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_63140} : (tensor<?x?x?x144xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x144xf32> loc(#loc2535)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2536)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2537)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_depthwise_layer_call_and_return_conditional_losses_191980(%arg0: tensor<?x57x57x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x57x57x144>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 144, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc2538)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc2539)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x144x1xf32> loc(#loc2540)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2541)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x57x57x144xf32>, tensor<3x3x144x1xf32>) -> tensor<?x28x28x144xf32> loc(#loc2542)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x28x28x144xf32>) -> tensor<?x28x28x144xf32> loc(#loc2543)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x28x28x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_depthwise_layer_call_and_return_conditional_losses_92690(%arg0: tensor<?x57x57x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x57x57x144>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 144, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc2544)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc2545)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x144x1xf32> loc(#loc2546)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2547)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x57x57x144xf32>, tensor<3x3x144x1xf32>) -> tensor<?x28x28x144xf32> loc(#loc2548)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x28x28x144xf32>) -> tensor<?x28x28x144xf32> loc(#loc2549)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x28x28x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_depthwise_layer_call_fn_191890(%arg0: tensor<?x57x57x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x57x57x144>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_layer_call_and_return_conditional_losses_92690} : (tensor<?x57x57x144xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc2550)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2551)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc2552)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_depthwise_relu_layer_call_and_return_conditional_losses_192700(%arg0: tensor<?x28x28x144xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x144>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x28x28x144xf32>) -> tensor<?x28x28x144xf32> loc(#loc2553)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x144xf32>) -> tensor<?x28x28x144xf32> loc(#loc2554)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x144xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_depthwise_relu_layer_call_and_return_conditional_losses_92870(%arg0: tensor<?x28x28x144xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x144>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x28x28x144xf32>) -> tensor<?x28x28x144xf32> loc(#loc2555)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x144xf32>) -> tensor<?x28x28x144xf32> loc(#loc2556)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x144xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_depthwise_relu_layer_call_fn_192650(%arg0: tensor<?x28x28x144xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x144>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_relu_layer_call_and_return_conditional_losses_92870} : (tensor<?x28x28x144xf32>) -> tensor<?x28x28x144xf32> loc(#loc2557)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x144xf32>) -> tensor<?x28x28x144xf32> loc(#loc2558)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x144xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_191430(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2559)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2560)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2561)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2562)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2563)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2564)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2565)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_191610(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2566)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2567)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2568)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2569)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2570)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2571)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2572)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2573)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2574)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_62060(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2575)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2576)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2577)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2578)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2579)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2580)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2581)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_62370(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2582)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2583)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2584)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc2585)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x?x?x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc2586)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2587)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc2588)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2589)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2590)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x144xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_expand_BN_layer_call_fn_191120(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_62060} : (tensor<?x?x?x144xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x144xf32> loc(#loc2591)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2592)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2593)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_expand_BN_layer_call_fn_191250(%arg0: tensor<?x?x?x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x144>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_62370} : (tensor<?x?x?x144xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x144xf32> loc(#loc2594)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2595)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x144xf32>) -> tensor<?x?x?x144xf32> loc(#loc2596)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_expand_layer_call_and_return_conditional_losses_190990(%arg0: tensor<?x56x56x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x24>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x24x144xf32> loc(#loc2597)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2598)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2599)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2600)
      tf_executor.fetch %outputs_3, %control : tensor<?x56x56x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_expand_layer_call_and_return_conditional_losses_92390(%arg0: tensor<?x56x56x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x24>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x24x144xf32> loc(#loc2601)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2602)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2603)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2604)
      tf_executor.fetch %outputs_3, %control : tensor<?x56x56x144xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_expand_layer_call_fn_190920(%arg0: tensor<?x56x56x24xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x56x56x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x24>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_layer_call_and_return_conditional_losses_92390} : (tensor<?x56x56x24xf32>, tensor<!tf_type.resource>) -> tensor<?x56x56x?xf32> loc(#loc2605)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2606)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x?xf32>) -> tensor<?x56x56x?xf32> loc(#loc2607)
      tf_executor.fetch %outputs_1, %control : tensor<?x56x56x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_expand_relu_layer_call_and_return_conditional_losses_191710(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2608)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2609)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x144xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_expand_relu_layer_call_and_return_conditional_losses_92570(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2610)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2611)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x144xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_expand_relu_layer_call_fn_191660(%arg0: tensor<?x56x56x144xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x56x56x144xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x56x56x144>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_relu_layer_call_and_return_conditional_losses_92570} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2612)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc2613)
      tf_executor.fetch %outputs_0 : tensor<?x56x56x144xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x56x56x144xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_pad_layer_call_and_return_conditional_losses_191820(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc2614)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Pad"(%arg0, %outputs) {device = ""} : (tensor<?x?x?x?xf32>, tensor<4x2xi32>) -> tensor<?x?x?x?xf32> loc(#loc2615)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.Identity"(%outputs_0) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc2616)
      tf_executor.fetch %outputs_2 : tensor<?x?x?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_pad_layer_call_and_return_conditional_losses_62580(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc2617)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Pad"(%arg0, %outputs) {device = ""} : (tensor<?x?x?x?xf32>, tensor<4x2xi32>) -> tensor<?x?x?x?xf32> loc(#loc2618)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.Identity"(%outputs_0) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc2619)
      tf_executor.fetch %outputs_2 : tensor<?x?x?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_pad_layer_call_fn_191760(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_pad_layer_call_and_return_conditional_losses_62580} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc2620)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc2621)
      tf_executor.fetch %outputs_0 : tensor<?x?x?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_project_BN_layer_call_and_return_conditional_losses_193280(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2622)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2623)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2624)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2625)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc2626)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2627)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2628)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_project_BN_layer_call_and_return_conditional_losses_193460(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2629)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2630)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2631)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2632)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc2633)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc2634)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc2635)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2636)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2637)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_project_BN_layer_call_and_return_conditional_losses_63470(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2638)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2639)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2640)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2641)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc2642)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2643)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2644)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_project_BN_layer_call_and_return_conditional_losses_63780(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2645)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2646)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2647)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2648)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc2649)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc2650)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc2651)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2652)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2653)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_project_BN_layer_call_fn_192970(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_project_BN_layer_call_and_return_conditional_losses_63470} : (tensor<?x?x?x32xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x32xf32> loc(#loc2654)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2655)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2656)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_project_BN_layer_call_fn_193100(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_project_BN_layer_call_and_return_conditional_losses_63780} : (tensor<?x?x?x32xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x32xf32> loc(#loc2657)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2658)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2659)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_project_layer_call_and_return_conditional_losses_192840(%arg0: tensor<?x28x28x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x144>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x144x32xf32> loc(#loc2660)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2661)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x144xf32>, tensor<1x1x144x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2662)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2663)
      tf_executor.fetch %outputs_3, %control : tensor<?x28x28x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_project_layer_call_and_return_conditional_losses_92960(%arg0: tensor<?x28x28x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x144>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x144x32xf32> loc(#loc2664)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2665)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x144xf32>, tensor<1x1x144x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2666)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2667)
      tf_executor.fetch %outputs_3, %control : tensor<?x28x28x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_3_project_layer_call_fn_192770(%arg0: tensor<?x28x28x144xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x144>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_project_layer_call_and_return_conditional_losses_92960} : (tensor<?x28x28x144xf32>, tensor<!tf_type.resource>) -> tensor<?x28x28x?xf32> loc(#loc2668)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2669)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x?xf32>) -> tensor<?x28x28x?xf32> loc(#loc2670)
      tf_executor.fetch %outputs_1, %control : tensor<?x28x28x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_add_layer_call_and_return_conditional_losses_196080(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x28x28x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<?x28x28x32>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x28x28x32xf32>, tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2671)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2672)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x32xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_add_layer_call_and_return_conditional_losses_93910(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<?x28x28x32>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x28x28x32xf32>, tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2673)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2674)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x32xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_add_layer_call_fn_196020(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x28x28x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<?x28x28x32>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_add_layer_call_and_return_conditional_losses_93910} : (tensor<?x28x28x32xf32>, tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2675)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2676)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x32xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_194920(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2677)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2678)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2679)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2680)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2681)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2682)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2683)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_195100(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2684)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2685)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2686)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2687)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2688)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2689)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2690)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2691)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2692)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_64750(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2693)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2694)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2695)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2696)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2697)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2698)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2699)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_65060(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2700)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2701)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2702)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2703)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2704)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2705)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2706)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2707)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2708)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_depthwise_BN_layer_call_fn_194610(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_64750} : (tensor<?x?x?x192xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x192xf32> loc(#loc2709)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2710)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2711)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_depthwise_BN_layer_call_fn_194740(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_65060} : (tensor<?x?x?x192xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x192xf32> loc(#loc2712)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2713)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2714)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_depthwise_layer_call_and_return_conditional_losses_194480(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc2715)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc2716)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc2717)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2718)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x28x28x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x28x28x192xf32> loc(#loc2719)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2720)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x28x28x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_depthwise_layer_call_and_return_conditional_losses_93450(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc2721)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc2722)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc2723)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2724)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x28x28x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x28x28x192xf32> loc(#loc2725)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2726)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x28x28x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_depthwise_layer_call_fn_194390(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_layer_call_and_return_conditional_losses_93450} : (tensor<?x28x28x192xf32>, tensor<!tf_type.resource>) -> tensor<?x28x28x?xf32> loc(#loc2727)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2728)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x?xf32>) -> tensor<?x28x28x?xf32> loc(#loc2729)
      tf_executor.fetch %outputs_1, %control : tensor<?x28x28x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_depthwise_relu_layer_call_and_return_conditional_losses_195200(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2730)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2731)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_depthwise_relu_layer_call_and_return_conditional_losses_93630(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2732)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2733)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_depthwise_relu_layer_call_fn_195150(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_relu_layer_call_and_return_conditional_losses_93630} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2734)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2735)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_194040(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2736)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2737)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2738)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2739)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2740)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2741)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2742)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_194220(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2743)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2744)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2745)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2746)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2747)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2748)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2749)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2750)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2751)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_64110(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2752)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2753)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2754)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2755)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2756)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2757)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2758)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_64420(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2759)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2760)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2761)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2762)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2763)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2764)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2765)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2766)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2767)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_expand_BN_layer_call_fn_193730(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_64110} : (tensor<?x?x?x192xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x192xf32> loc(#loc2768)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2769)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2770)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_expand_BN_layer_call_fn_193860(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_64420} : (tensor<?x?x?x192xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x192xf32> loc(#loc2771)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2772)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2773)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_expand_layer_call_and_return_conditional_losses_193600(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc2774)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2775)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2776)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2777)
      tf_executor.fetch %outputs_3, %control : tensor<?x28x28x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_expand_layer_call_and_return_conditional_losses_93160(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc2778)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2779)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2780)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2781)
      tf_executor.fetch %outputs_3, %control : tensor<?x28x28x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_expand_layer_call_fn_193530(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_layer_call_and_return_conditional_losses_93160} : (tensor<?x28x28x32xf32>, tensor<!tf_type.resource>) -> tensor<?x28x28x?xf32> loc(#loc2782)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2783)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x?xf32>) -> tensor<?x28x28x?xf32> loc(#loc2784)
      tf_executor.fetch %outputs_1, %control : tensor<?x28x28x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_expand_relu_layer_call_and_return_conditional_losses_194320(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2785)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2786)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_expand_relu_layer_call_and_return_conditional_losses_93340(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2787)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2788)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_expand_relu_layer_call_fn_194270(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_relu_layer_call_and_return_conditional_losses_93340} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2789)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2790)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_project_BN_layer_call_and_return_conditional_losses_195780(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2791)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2792)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2793)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2794)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc2795)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2796)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2797)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_project_BN_layer_call_and_return_conditional_losses_195960(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2798)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2799)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2800)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2801)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc2802)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc2803)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc2804)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2805)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2806)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_project_BN_layer_call_and_return_conditional_losses_65390(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2807)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2808)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2809)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2810)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc2811)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2812)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2813)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_project_BN_layer_call_and_return_conditional_losses_65700(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2814)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2815)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2816)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2817)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc2818)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc2819)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc2820)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2821)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2822)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_project_BN_layer_call_fn_195470(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_project_BN_layer_call_and_return_conditional_losses_65390} : (tensor<?x?x?x32xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x32xf32> loc(#loc2823)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2824)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2825)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_project_BN_layer_call_fn_195600(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_project_BN_layer_call_and_return_conditional_losses_65700} : (tensor<?x?x?x32xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x32xf32> loc(#loc2826)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2827)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2828)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_project_layer_call_and_return_conditional_losses_195340(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x32xf32> loc(#loc2829)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2830)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2831)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2832)
      tf_executor.fetch %outputs_3, %control : tensor<?x28x28x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_project_layer_call_and_return_conditional_losses_93720(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x32xf32> loc(#loc2833)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2834)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2835)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2836)
      tf_executor.fetch %outputs_3, %control : tensor<?x28x28x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_4_project_layer_call_fn_195270(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_project_layer_call_and_return_conditional_losses_93720} : (tensor<?x28x28x192xf32>, tensor<!tf_type.resource>) -> tensor<?x28x28x?xf32> loc(#loc2837)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2838)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x?xf32>) -> tensor<?x28x28x?xf32> loc(#loc2839)
      tf_executor.fetch %outputs_1, %control : tensor<?x28x28x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_add_layer_call_and_return_conditional_losses_198700(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x28x28x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<?x28x28x32>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x28x28x32xf32>, tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2840)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2841)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x32xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_add_layer_call_and_return_conditional_losses_94750(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<?x28x28x32>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x28x28x32xf32>, tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2842)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2843)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x32xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_add_layer_call_fn_198640(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x28x28x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<?x28x28x32>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_add_layer_call_and_return_conditional_losses_94750} : (tensor<?x28x28x32xf32>, tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2844)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc2845)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x32xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_197540(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2846)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2847)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2848)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2849)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2850)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2851)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2852)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_197720(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2853)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2854)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2855)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2856)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2857)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2858)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2859)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2860)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2861)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_66670(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2862)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2863)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2864)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2865)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2866)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2867)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2868)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_66980(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2869)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2870)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2871)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2872)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2873)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2874)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2875)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2876)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2877)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_depthwise_BN_layer_call_fn_197230(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_66670} : (tensor<?x?x?x192xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x192xf32> loc(#loc2878)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2879)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2880)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_depthwise_BN_layer_call_fn_197360(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_66980} : (tensor<?x?x?x192xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x192xf32> loc(#loc2881)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2882)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2883)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_depthwise_layer_call_and_return_conditional_losses_197100(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc2884)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc2885)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc2886)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2887)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x28x28x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x28x28x192xf32> loc(#loc2888)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2889)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x28x28x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_depthwise_layer_call_and_return_conditional_losses_94290(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc2890)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc2891)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc2892)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2893)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x28x28x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x28x28x192xf32> loc(#loc2894)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2895)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x28x28x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_depthwise_layer_call_fn_197010(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_layer_call_and_return_conditional_losses_94290} : (tensor<?x28x28x192xf32>, tensor<!tf_type.resource>) -> tensor<?x28x28x?xf32> loc(#loc2896)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2897)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x?xf32>) -> tensor<?x28x28x?xf32> loc(#loc2898)
      tf_executor.fetch %outputs_1, %control : tensor<?x28x28x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_depthwise_relu_layer_call_and_return_conditional_losses_197820(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2899)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2900)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_depthwise_relu_layer_call_and_return_conditional_losses_94470(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2901)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2902)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_depthwise_relu_layer_call_fn_197770(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_relu_layer_call_and_return_conditional_losses_94470} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2903)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2904)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_196660(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2905)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2906)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2907)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2908)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2909)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2910)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2911)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_196840(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2912)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2913)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2914)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2915)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2916)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2917)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2918)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2919)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2920)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_66030(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2921)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2922)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2923)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2924)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2925)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2926)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2927)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_66340(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2928)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2929)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2930)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc2931)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc2932)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2933)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc2934)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2935)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2936)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_expand_BN_layer_call_fn_196350(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_66030} : (tensor<?x?x?x192xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x192xf32> loc(#loc2937)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2938)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2939)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_expand_BN_layer_call_fn_196480(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_66340} : (tensor<?x?x?x192xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x192xf32> loc(#loc2940)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2941)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc2942)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_expand_layer_call_and_return_conditional_losses_196220(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc2943)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2944)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2945)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2946)
      tf_executor.fetch %outputs_3, %control : tensor<?x28x28x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_expand_layer_call_and_return_conditional_losses_94000(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc2947)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2948)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2949)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2950)
      tf_executor.fetch %outputs_3, %control : tensor<?x28x28x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_expand_layer_call_fn_196150(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_layer_call_and_return_conditional_losses_94000} : (tensor<?x28x28x32xf32>, tensor<!tf_type.resource>) -> tensor<?x28x28x?xf32> loc(#loc2951)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2952)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x?xf32>) -> tensor<?x28x28x?xf32> loc(#loc2953)
      tf_executor.fetch %outputs_1, %control : tensor<?x28x28x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_expand_relu_layer_call_and_return_conditional_losses_196940(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2954)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2955)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_expand_relu_layer_call_and_return_conditional_losses_94180(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2956)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2957)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_expand_relu_layer_call_fn_196890(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_relu_layer_call_and_return_conditional_losses_94180} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2958)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc2959)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_project_BN_layer_call_and_return_conditional_losses_198400(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2960)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2961)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2962)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2963)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc2964)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2965)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2966)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_project_BN_layer_call_and_return_conditional_losses_198580(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2967)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2968)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2969)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2970)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc2971)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc2972)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc2973)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2974)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2975)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_project_BN_layer_call_and_return_conditional_losses_67310(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2976)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2977)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2978)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2979)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc2980)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2981)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2982)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_project_BN_layer_call_and_return_conditional_losses_67620(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2983)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2984)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2985)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc2986)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc2987)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc2988)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc2989)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2990)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2991)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_project_BN_layer_call_fn_198090(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_project_BN_layer_call_and_return_conditional_losses_67310} : (tensor<?x?x?x32xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x32xf32> loc(#loc2992)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2993)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2994)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_project_BN_layer_call_fn_198220(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_project_BN_layer_call_and_return_conditional_losses_67620} : (tensor<?x?x?x32xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x32xf32> loc(#loc2995)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2996)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc2997)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_project_layer_call_and_return_conditional_losses_197960(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x32xf32> loc(#loc2998)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc2999)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc3000)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc3001)
      tf_executor.fetch %outputs_3, %control : tensor<?x28x28x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_project_layer_call_and_return_conditional_losses_94560(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x32xf32> loc(#loc3002)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3003)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc3004)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc3005)
      tf_executor.fetch %outputs_3, %control : tensor<?x28x28x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_5_project_layer_call_fn_197890(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_project_layer_call_and_return_conditional_losses_94560} : (tensor<?x28x28x192xf32>, tensor<!tf_type.resource>) -> tensor<?x28x28x?xf32> loc(#loc3006)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3007)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x?xf32>) -> tensor<?x28x28x?xf32> loc(#loc3008)
      tf_executor.fetch %outputs_1, %control : tensor<?x28x28x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_200270(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3009)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3010)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3011)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3012)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc3013)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3014)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc3015)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_200450(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3016)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3017)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3018)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3019)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc3020)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc3021)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc3022)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3023)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc3024)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_68720(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3025)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3026)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3027)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3028)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc3029)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3030)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc3031)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_69030(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3032)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3033)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3034)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3035)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc3036)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc3037)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc3038)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3039)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc3040)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_depthwise_BN_layer_call_fn_199960(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_68720} : (tensor<?x?x?x192xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x192xf32> loc(#loc3041)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3042)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc3043)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_depthwise_BN_layer_call_fn_200090(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_69030} : (tensor<?x?x?x192xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x192xf32> loc(#loc3044)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3045)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc3046)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_depthwise_layer_call_and_return_conditional_losses_199830(%arg0: tensor<?x29x29x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x29x29x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc3047)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc3048)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc3049)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3050)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x29x29x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x14x14x192xf32> loc(#loc3051)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x192xf32>) -> tensor<?x14x14x192xf32> loc(#loc3052)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_depthwise_layer_call_and_return_conditional_losses_95140(%arg0: tensor<?x29x29x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x29x29x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc3053)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc3054)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc3055)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3056)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x29x29x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x14x14x192xf32> loc(#loc3057)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x192xf32>) -> tensor<?x14x14x192xf32> loc(#loc3058)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_depthwise_layer_call_fn_199740(%arg0: tensor<?x29x29x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x29x29x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_layer_call_and_return_conditional_losses_95140} : (tensor<?x29x29x192xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3059)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3060)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3061)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_depthwise_relu_layer_call_and_return_conditional_losses_200550(%arg0: tensor<?x14x14x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x192xf32>) -> tensor<?x14x14x192xf32> loc(#loc3062)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x192xf32>) -> tensor<?x14x14x192xf32> loc(#loc3063)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_depthwise_relu_layer_call_and_return_conditional_losses_95320(%arg0: tensor<?x14x14x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x192xf32>) -> tensor<?x14x14x192xf32> loc(#loc3064)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x192xf32>) -> tensor<?x14x14x192xf32> loc(#loc3065)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_depthwise_relu_layer_call_fn_200500(%arg0: tensor<?x14x14x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_relu_layer_call_and_return_conditional_losses_95320} : (tensor<?x14x14x192xf32>) -> tensor<?x14x14x192xf32> loc(#loc3066)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x192xf32>) -> tensor<?x14x14x192xf32> loc(#loc3067)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_199280(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3068)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3069)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3070)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3071)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc3072)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3073)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc3074)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_199460(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3075)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3076)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3077)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3078)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc3079)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc3080)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc3081)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3082)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc3083)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_67950(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3084)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3085)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3086)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3087)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc3088)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3089)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc3090)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_68260(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3091)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3092)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3093)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc3094)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x?x?x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc3095)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc3096)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc3097)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3098)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc3099)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x192xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_expand_BN_layer_call_fn_198970(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_67950} : (tensor<?x?x?x192xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x192xf32> loc(#loc3100)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3101)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc3102)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_expand_BN_layer_call_fn_199100(%arg0: tensor<?x?x?x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x192>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_68260} : (tensor<?x?x?x192xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x192xf32> loc(#loc3103)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3104)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x192xf32>) -> tensor<?x?x?x192xf32> loc(#loc3105)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_expand_layer_call_and_return_conditional_losses_198840(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc3106)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3107)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc3108)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc3109)
      tf_executor.fetch %outputs_3, %control : tensor<?x28x28x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_expand_layer_call_and_return_conditional_losses_94840(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc3110)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3111)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc3112)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc3113)
      tf_executor.fetch %outputs_3, %control : tensor<?x28x28x192xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_expand_layer_call_fn_198770(%arg0: tensor<?x28x28x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x28x28x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_layer_call_and_return_conditional_losses_94840} : (tensor<?x28x28x32xf32>, tensor<!tf_type.resource>) -> tensor<?x28x28x?xf32> loc(#loc3114)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3115)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x?xf32>) -> tensor<?x28x28x?xf32> loc(#loc3116)
      tf_executor.fetch %outputs_1, %control : tensor<?x28x28x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_expand_relu_layer_call_and_return_conditional_losses_199560(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc3117)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc3118)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_expand_relu_layer_call_and_return_conditional_losses_95020(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc3119)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc3120)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_expand_relu_layer_call_fn_199510(%arg0: tensor<?x28x28x192xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x28x28x192xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x28x28x192>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_relu_layer_call_and_return_conditional_losses_95020} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc3121)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc3122)
      tf_executor.fetch %outputs_0 : tensor<?x28x28x192xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x28x28x192xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_pad_layer_call_and_return_conditional_losses_199670(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc3123)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Pad"(%arg0, %outputs) {device = ""} : (tensor<?x?x?x?xf32>, tensor<4x2xi32>) -> tensor<?x?x?x?xf32> loc(#loc3124)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.Identity"(%outputs_0) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3125)
      tf_executor.fetch %outputs_2 : tensor<?x?x?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_pad_layer_call_and_return_conditional_losses_68470(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc3126)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Pad"(%arg0, %outputs) {device = ""} : (tensor<?x?x?x?xf32>, tensor<4x2xi32>) -> tensor<?x?x?x?xf32> loc(#loc3127)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.Identity"(%outputs_0) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3128)
      tf_executor.fetch %outputs_2 : tensor<?x?x?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_pad_layer_call_fn_199610(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?x?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_pad_layer_call_and_return_conditional_losses_68470} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3129)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3130)
      tf_executor.fetch %outputs_0 : tensor<?x?x?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_project_BN_layer_call_and_return_conditional_losses_201130(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3131)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3132)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3133)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3134)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3135)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3136)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3137)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_project_BN_layer_call_and_return_conditional_losses_201310(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3138)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3139)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3140)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3141)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3142)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3143)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3144)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3145)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3146)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_project_BN_layer_call_and_return_conditional_losses_69360(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3147)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3148)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3149)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3150)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3151)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3152)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3153)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_project_BN_layer_call_and_return_conditional_losses_69670(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3154)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3155)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3156)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3157)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3158)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3159)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3160)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3161)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3162)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_project_BN_layer_call_fn_200820(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_project_BN_layer_call_and_return_conditional_losses_69360} : (tensor<?x?x?x64xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x64xf32> loc(#loc3163)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3164)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3165)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_project_BN_layer_call_fn_200950(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_project_BN_layer_call_and_return_conditional_losses_69670} : (tensor<?x?x?x64xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x64xf32> loc(#loc3166)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3167)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3168)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_project_layer_call_and_return_conditional_losses_200690(%arg0: tensor<?x14x14x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x64xf32> loc(#loc3169)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3170)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x192xf32>, tensor<1x1x192x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3171)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3172)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_project_layer_call_and_return_conditional_losses_95410(%arg0: tensor<?x14x14x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x64xf32> loc(#loc3173)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3174)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x192xf32>, tensor<1x1x192x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3175)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3176)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_6_project_layer_call_fn_200620(%arg0: tensor<?x14x14x192xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x192>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_project_layer_call_and_return_conditional_losses_95410} : (tensor<?x14x14x192xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc3177)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3178)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc3179)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_add_layer_call_and_return_conditional_losses_203930(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<?x14x14x64>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3180)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3181)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x64xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_add_layer_call_and_return_conditional_losses_96360(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<?x14x14x64>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3182)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3183)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x64xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_add_layer_call_fn_203870(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<?x14x14x64>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_add_layer_call_and_return_conditional_losses_96360} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3184)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3185)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x64xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_202770(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3186)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3187)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3188)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3189)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3190)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3191)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3192)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_202950(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3193)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3194)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3195)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3196)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3197)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3198)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3199)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3200)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3201)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_70640(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3202)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3203)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3204)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3205)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3206)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3207)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3208)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_70950(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3209)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3210)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3211)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3212)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3213)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3214)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3215)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3216)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3217)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_depthwise_BN_layer_call_fn_202460(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_70640} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc3218)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3219)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3220)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_depthwise_BN_layer_call_fn_202590(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_70950} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc3221)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3222)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3223)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_depthwise_layer_call_and_return_conditional_losses_202330(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc3224)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc3225)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc3226)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3227)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc3228)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3229)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_depthwise_layer_call_and_return_conditional_losses_95900(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc3230)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc3231)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc3232)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3233)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc3234)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3235)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_depthwise_layer_call_fn_202240(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_layer_call_and_return_conditional_losses_95900} : (tensor<?x14x14x384xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc3236)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3237)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc3238)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_depthwise_relu_layer_call_and_return_conditional_losses_203050(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3239)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3240)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_depthwise_relu_layer_call_and_return_conditional_losses_96080(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3241)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3242)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_depthwise_relu_layer_call_fn_203000(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_relu_layer_call_and_return_conditional_losses_96080} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3243)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3244)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_201890(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3245)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3246)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3247)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3248)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3249)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3250)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3251)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_202070(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3252)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3253)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3254)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3255)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3256)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3257)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3258)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3259)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3260)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_70000(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3261)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3262)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3263)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3264)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3265)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3266)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3267)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_70310(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3268)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3269)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3270)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3271)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3272)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3273)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3274)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3275)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3276)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_expand_BN_layer_call_fn_201580(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_70000} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc3277)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3278)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3279)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_expand_BN_layer_call_fn_201710(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_70310} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc3280)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3281)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3282)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_expand_layer_call_and_return_conditional_losses_201450(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc3283)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3284)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3285)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3286)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_expand_layer_call_and_return_conditional_losses_95610(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc3287)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3288)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3289)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3290)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_expand_layer_call_fn_201380(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_layer_call_and_return_conditional_losses_95610} : (tensor<?x14x14x64xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc3291)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3292)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc3293)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_expand_relu_layer_call_and_return_conditional_losses_202170(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3294)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3295)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_expand_relu_layer_call_and_return_conditional_losses_95790(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3296)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3297)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_expand_relu_layer_call_fn_202120(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_relu_layer_call_and_return_conditional_losses_95790} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3298)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3299)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_project_BN_layer_call_and_return_conditional_losses_203630(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3300)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3301)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3302)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3303)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3304)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3305)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3306)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_project_BN_layer_call_and_return_conditional_losses_203810(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3307)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3308)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3309)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3310)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3311)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3312)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3313)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3314)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3315)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_project_BN_layer_call_and_return_conditional_losses_71280(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3316)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3317)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3318)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3319)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3320)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3321)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3322)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_project_BN_layer_call_and_return_conditional_losses_71590(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3323)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3324)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3325)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3326)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3327)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3328)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3329)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3330)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3331)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_project_BN_layer_call_fn_203320(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_project_BN_layer_call_and_return_conditional_losses_71280} : (tensor<?x?x?x64xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x64xf32> loc(#loc3332)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3333)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3334)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_project_BN_layer_call_fn_203450(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_project_BN_layer_call_and_return_conditional_losses_71590} : (tensor<?x?x?x64xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x64xf32> loc(#loc3335)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3336)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3337)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_project_layer_call_and_return_conditional_losses_203190(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc3338)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3339)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3340)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3341)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_project_layer_call_and_return_conditional_losses_96170(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc3342)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3343)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3344)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3345)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_7_project_layer_call_fn_203120(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_project_layer_call_and_return_conditional_losses_96170} : (tensor<?x14x14x384xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc3346)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3347)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc3348)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_add_layer_call_and_return_conditional_losses_206550(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<?x14x14x64>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3349)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3350)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x64xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_add_layer_call_and_return_conditional_losses_97200(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<?x14x14x64>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3351)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3352)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x64xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_add_layer_call_fn_206490(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<?x14x14x64>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_add_layer_call_and_return_conditional_losses_97200} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3353)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3354)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x64xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_205390(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3355)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3356)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3357)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3358)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3359)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3360)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3361)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_205570(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3362)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3363)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3364)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3365)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3366)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3367)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3368)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3369)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3370)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_72560(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3371)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3372)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3373)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3374)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3375)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3376)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3377)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_72870(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3378)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3379)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3380)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3381)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3382)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3383)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3384)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3385)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3386)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_depthwise_BN_layer_call_fn_205080(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_72560} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc3387)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3388)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3389)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_depthwise_BN_layer_call_fn_205210(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_72870} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc3390)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3391)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3392)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_depthwise_layer_call_and_return_conditional_losses_204950(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc3393)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc3394)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc3395)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3396)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc3397)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3398)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_depthwise_layer_call_and_return_conditional_losses_96740(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc3399)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc3400)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc3401)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3402)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc3403)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3404)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_depthwise_layer_call_fn_204860(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_layer_call_and_return_conditional_losses_96740} : (tensor<?x14x14x384xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc3405)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3406)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc3407)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_depthwise_relu_layer_call_and_return_conditional_losses_205670(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3408)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3409)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_depthwise_relu_layer_call_and_return_conditional_losses_96920(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3410)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3411)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_depthwise_relu_layer_call_fn_205620(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_relu_layer_call_and_return_conditional_losses_96920} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3412)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3413)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_204510(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3414)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3415)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3416)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3417)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3418)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3419)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3420)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_204690(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3421)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3422)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3423)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3424)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3425)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3426)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3427)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3428)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3429)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_71920(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3430)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3431)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3432)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3433)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3434)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3435)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3436)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_72230(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3437)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3438)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3439)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3440)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3441)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3442)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3443)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3444)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3445)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_expand_BN_layer_call_fn_204200(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_71920} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc3446)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3447)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3448)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_expand_BN_layer_call_fn_204330(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_72230} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc3449)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3450)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3451)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_expand_layer_call_and_return_conditional_losses_204070(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc3452)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3453)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3454)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3455)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_expand_layer_call_and_return_conditional_losses_96450(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc3456)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3457)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3458)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3459)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_expand_layer_call_fn_204000(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_layer_call_and_return_conditional_losses_96450} : (tensor<?x14x14x64xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc3460)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3461)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc3462)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_expand_relu_layer_call_and_return_conditional_losses_204790(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3463)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3464)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_expand_relu_layer_call_and_return_conditional_losses_96630(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3465)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3466)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_expand_relu_layer_call_fn_204740(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_relu_layer_call_and_return_conditional_losses_96630} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3467)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3468)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_project_BN_layer_call_and_return_conditional_losses_206250(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3469)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3470)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3471)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3472)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3473)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3474)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3475)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_project_BN_layer_call_and_return_conditional_losses_206430(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3476)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3477)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3478)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3479)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3480)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3481)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3482)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3483)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3484)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_project_BN_layer_call_and_return_conditional_losses_73200(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3485)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3486)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3487)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3488)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3489)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3490)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3491)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_project_BN_layer_call_and_return_conditional_losses_73510(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3492)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3493)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3494)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3495)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3496)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3497)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3498)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3499)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3500)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_project_BN_layer_call_fn_205940(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_project_BN_layer_call_and_return_conditional_losses_73200} : (tensor<?x?x?x64xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x64xf32> loc(#loc3501)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3502)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3503)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_project_BN_layer_call_fn_206070(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_project_BN_layer_call_and_return_conditional_losses_73510} : (tensor<?x?x?x64xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x64xf32> loc(#loc3504)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3505)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3506)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_project_layer_call_and_return_conditional_losses_205810(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc3507)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3508)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3509)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3510)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_project_layer_call_and_return_conditional_losses_97010(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc3511)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3512)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3513)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3514)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_8_project_layer_call_fn_205740(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_project_layer_call_and_return_conditional_losses_97010} : (tensor<?x14x14x384xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc3515)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3516)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc3517)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_add_layer_call_and_return_conditional_losses_209170(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<?x14x14x64>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3518)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3519)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x64xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_add_layer_call_and_return_conditional_losses_98040(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<?x14x14x64>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.AddV2"(%arg0, %arg1) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3520)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3521)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x64xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_add_layer_call_fn_209110(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs/0"} loc(unknown), %arg1: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs/1"} loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<?x14x14x64>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_add_layer_call_and_return_conditional_losses_98040} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3522)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3523)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x64xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_208010(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3524)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3525)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3526)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3527)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3528)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3529)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3530)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_208190(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3531)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3532)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3533)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3534)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3535)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3536)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3537)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3538)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3539)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_74480(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3540)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3541)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3542)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3543)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3544)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3545)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3546)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_74790(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3547)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3548)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3549)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3550)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3551)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3552)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3553)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3554)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3555)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_depthwise_BN_layer_call_fn_207700(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_74480} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc3556)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3557)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3558)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_depthwise_BN_layer_call_fn_207830(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_74790} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc3559)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3560)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3561)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_depthwise_layer_call_and_return_conditional_losses_207570(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc3562)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc3563)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc3564)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3565)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc3566)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3567)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_depthwise_layer_call_and_return_conditional_losses_97580(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc3568)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc3569)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc3570)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3571)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc3572)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3573)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_depthwise_layer_call_fn_207480(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_layer_call_and_return_conditional_losses_97580} : (tensor<?x14x14x384xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc3574)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3575)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc3576)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_depthwise_relu_layer_call_and_return_conditional_losses_208290(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3577)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3578)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_depthwise_relu_layer_call_and_return_conditional_losses_97760(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3579)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3580)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_depthwise_relu_layer_call_fn_208240(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_relu_layer_call_and_return_conditional_losses_97760} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3581)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3582)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_207130(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3583)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3584)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3585)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3586)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3587)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3588)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3589)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_207310(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3590)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3591)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3592)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3593)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3594)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3595)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3596)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3597)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3598)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_73840(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3599)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3600)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3601)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3602)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3603)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3604)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3605)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_74150(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3606)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3607)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3608)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc3609)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x?x?x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc3610)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3611)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc3612)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3613)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3614)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x384xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_expand_BN_layer_call_fn_206820(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_73840} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc3615)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3616)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3617)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_expand_BN_layer_call_fn_206950(%arg0: tensor<?x?x?x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x384>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_74150} : (tensor<?x?x?x384xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x384xf32> loc(#loc3618)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3619)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x384xf32>) -> tensor<?x?x?x384xf32> loc(#loc3620)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_expand_layer_call_and_return_conditional_losses_206690(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc3621)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3622)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3623)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3624)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_expand_layer_call_and_return_conditional_losses_97290(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc3625)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3626)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3627)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3628)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x384xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_expand_layer_call_fn_206620(%arg0: tensor<?x14x14x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x64>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_layer_call_and_return_conditional_losses_97290} : (tensor<?x14x14x64xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc3629)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3630)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc3631)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_expand_relu_layer_call_and_return_conditional_losses_207410(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3632)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3633)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_expand_relu_layer_call_and_return_conditional_losses_97470(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3634)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3635)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_expand_relu_layer_call_fn_207360(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x14x14x384xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_relu_layer_call_and_return_conditional_losses_97470} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3636)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc3637)
      tf_executor.fetch %outputs_0 : tensor<?x14x14x384xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x384xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_project_BN_layer_call_and_return_conditional_losses_208870(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3638)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3639)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3640)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3641)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3642)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3643)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3644)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_project_BN_layer_call_and_return_conditional_losses_209050(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3645)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3646)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3647)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3648)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3649)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3650)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3651)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3652)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3653)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_project_BN_layer_call_and_return_conditional_losses_75120(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3654)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3655)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3656)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3657)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3658)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3659)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3660)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_project_BN_layer_call_and_return_conditional_losses_75430(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3661)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3662)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3663)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc3664)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x?x?x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc3665)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3666)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc3667)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3668)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3669)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x64xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_project_BN_layer_call_fn_208560(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_project_BN_layer_call_and_return_conditional_losses_75120} : (tensor<?x?x?x64xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x64xf32> loc(#loc3670)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3671)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3672)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_project_BN_layer_call_fn_208690(%arg0: tensor<?x?x?x64xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x64>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_project_BN_layer_call_and_return_conditional_losses_75430} : (tensor<?x?x?x64xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x64xf32> loc(#loc3673)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3674)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x64xf32>) -> tensor<?x?x?x64xf32> loc(#loc3675)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_project_layer_call_and_return_conditional_losses_208430(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc3676)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3677)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3678)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3679)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_project_layer_call_and_return_conditional_losses_97850(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x64xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc3680)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3681)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3682)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc3683)
      tf_executor.fetch %outputs_3, %control : tensor<?x14x14x64xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x64xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_block_9_project_layer_call_fn_208360(%arg0: tensor<?x14x14x384xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x14x14x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x14x14x384>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_project_layer_call_and_return_conditional_losses_97850} : (tensor<?x14x14x384xf32>, tensor<!tf_type.resource>) -> tensor<?x14x14x?xf32> loc(#loc3684)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3685)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x14x14x?xf32>) -> tensor<?x14x14x?xf32> loc(#loc3686)
      tf_executor.fetch %outputs_1, %control : tensor<?x14x14x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x14x14x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_bn_Conv1_layer_call_and_return_conditional_losses_183700(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3687)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3688)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3689)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3690)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc3691)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3692)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc3693)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_bn_Conv1_layer_call_and_return_conditional_losses_183880(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3694)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3695)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3696)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3697)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc3698)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc3699)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc3700)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3701)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc3702)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_bn_Conv1_layer_call_and_return_conditional_losses_56170(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3703)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3704)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3705)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3706)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc3707)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3708)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc3709)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_bn_Conv1_layer_call_and_return_conditional_losses_56480(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3710)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3711)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3712)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3713)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc3714)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc3715)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc3716)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3717)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc3718)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_bn_Conv1_layer_call_fn_183390(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_bn_Conv1_layer_call_and_return_conditional_losses_56170} : (tensor<?x?x?x32xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x32xf32> loc(#loc3719)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3720)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc3721)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_bn_Conv1_layer_call_fn_183520(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_bn_Conv1_layer_call_and_return_conditional_losses_56480} : (tensor<?x?x?x32xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x32xf32> loc(#loc3722)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3723)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc3724)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_184580(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3725)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3726)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3727)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3728)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc3729)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3730)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc3731)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_184760(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3732)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3733)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3734)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3735)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc3736)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc3737)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc3738)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3739)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc3740)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_56810(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3741)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3742)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3743)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3744)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc3745)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3746)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc3747)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_57120(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3748)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3749)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3750)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc3751)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x?x?x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc3752)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc3753)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc3754)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3755)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc3756)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x32xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_depthwise_BN_layer_call_fn_184270(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_56810} : (tensor<?x?x?x32xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x32xf32> loc(#loc3757)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3758)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc3759)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_depthwise_BN_layer_call_fn_184400(%arg0: tensor<?x?x?x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x32>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_57120} : (tensor<?x?x?x32xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x32xf32> loc(#loc3760)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3761)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x32xf32>) -> tensor<?x?x?x32xf32> loc(#loc3762)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_184140(%arg0: tensor<?x112x112x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x112x112x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 32, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc3763)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc3764)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x32x1xf32> loc(#loc3765)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3766)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x112x112x32xf32>, tensor<3x3x32x1xf32>) -> tensor<?x112x112x32xf32> loc(#loc3767)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc3768)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x112x112x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_90310(%arg0: tensor<?x112x112x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x112x112x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 32, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc3769)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc3770)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x32x1xf32> loc(#loc3771)
      %control_4 = tf_executor.island(%control_3) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3772)
      %outputs_5, %control_6 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%arg0, %outputs_2) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x112x112x32xf32>, tensor<3x3x32x1xf32>) -> tensor<?x112x112x32xf32> loc(#loc3773)
      %outputs_7, %control_8 = tf_executor.island(%control_4) wraps "tf.Identity"(%outputs_5) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc3774)
      tf_executor.fetch %outputs_7, %control_3 : tensor<?x112x112x32xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_depthwise_layer_call_fn_184050(%arg0: tensor<?x112x112x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x112x112x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_90310} : (tensor<?x112x112x32xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc3775)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3776)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc3777)
      tf_executor.fetch %outputs_1, %control : tensor<?x112x112x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_depthwise_relu_layer_call_and_return_conditional_losses_184860(%arg0: tensor<?x112x112x32xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x112x112x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x32>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc3778)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc3779)
      tf_executor.fetch %outputs_0 : tensor<?x112x112x32xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_depthwise_relu_layer_call_and_return_conditional_losses_90490(%arg0: tensor<?x112x112x32xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x112x112x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x32>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc3780)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc3781)
      tf_executor.fetch %outputs_0 : tensor<?x112x112x32xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_depthwise_relu_layer_call_fn_184810(%arg0: tensor<?x112x112x32xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x112x112x32xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x32>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_relu_layer_call_and_return_conditional_losses_90490} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc3782)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc3783)
      tf_executor.fetch %outputs_0 : tensor<?x112x112x32xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x32xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_185440(%arg0: tensor<?x?x?x16xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x16xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x16>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3784)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3785)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3786)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3787)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> (tensor<?x?x?x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<*xf32>) loc(#loc3788)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3789)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x16xf32>) -> tensor<?x?x?x16xf32> loc(#loc3790)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x16xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x16xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_185620(%arg0: tensor<?x?x?x16xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x16xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x16>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3791)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3792)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3793)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3794)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> (tensor<?x?x?x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<*xf32>) loc(#loc3795)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<16xf32>) -> () loc(#loc3796)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<16xf32>) -> () loc(#loc3797)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3798)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x16xf32>) -> tensor<?x?x?x16xf32> loc(#loc3799)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x16xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x16xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_57450(%arg0: tensor<?x?x?x16xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x16xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x16>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3800)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3801)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3802)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3803)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x?x?x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> (tensor<?x?x?x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<*xf32>) loc(#loc3804)
      %control_8 = tf_executor.island(%control_5, %control_3, %control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3805)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x16xf32>) -> tensor<?x?x?x16xf32> loc(#loc3806)
      tf_executor.fetch %outputs_9, %control_5, %control_3, %control_1, %control : tensor<?x?x?x16xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x16xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_57760(%arg0: tensor<?x?x?x16xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x16xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x16>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3807)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3808)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3809)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc3810)
      %outputs_6:6, %control_7 = tf_executor.island wraps "tf.FusedBatchNormV3"(%arg0, %outputs_4, %outputs_2, %outputs_0, %outputs) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x?x?x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> (tensor<?x?x?x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<*xf32>) loc(#loc3811)
      %control_8 = tf_executor.island(%control_1) wraps "tf.AssignVariableOp"(%arg3, %outputs_6#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<16xf32>) -> () loc(#loc3812)
      %control_9 = tf_executor.island(%control) wraps "tf.AssignVariableOp"(%arg4, %outputs_6#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<16xf32>) -> () loc(#loc3813)
      %control_10 = tf_executor.island(%control_5, %control_3, %control_1, %control, %control_8, %control_9) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3814)
      %outputs_11, %control_12 = tf_executor.island(%control_10) wraps "tf.Identity"(%outputs_6#0) {device = ""} : (tensor<?x?x?x16xf32>) -> tensor<?x?x?x16xf32> loc(#loc3815)
      tf_executor.fetch %outputs_11, %control_5, %control_3, %control_1, %control, %control_8, %control_9 : tensor<?x?x?x16xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x16xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_project_BN_layer_call_fn_185130(%arg0: tensor<?x?x?x16xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x16xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x16>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_57450} : (tensor<?x?x?x16xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x16xf32> loc(#loc3816)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3817)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x16xf32>) -> tensor<?x?x?x16xf32> loc(#loc3818)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x16xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x16xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_project_BN_layer_call_fn_185260(%arg0: tensor<?x?x?x16xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?x?x16xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x16>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_57760} : (tensor<?x?x?x16xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x16xf32> loc(#loc3819)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3820)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?x?x16xf32>) -> tensor<?x?x?x16xf32> loc(#loc3821)
      tf_executor.fetch %outputs_1, %control : tensor<?x?x?x16xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?x?x16xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_project_layer_call_and_return_conditional_losses_185000(%arg0: tensor<?x112x112x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x112x112x16xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x16xf32> loc(#loc3822)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3823)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x112x112x32xf32>, tensor<1x1x32x16xf32>) -> tensor<?x112x112x16xf32> loc(#loc3824)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x112x112x16xf32>) -> tensor<?x112x112x16xf32> loc(#loc3825)
      tf_executor.fetch %outputs_3, %control : tensor<?x112x112x16xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x16xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_project_layer_call_and_return_conditional_losses_90580(%arg0: tensor<?x112x112x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x112x112x16xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x16xf32> loc(#loc3826)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3827)
      %outputs_1, %control_2 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x112x112x32xf32>, tensor<1x1x32x16xf32>) -> tensor<?x112x112x16xf32> loc(#loc3828)
      %outputs_3, %control_4 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs_1) {device = ""} : (tensor<?x112x112x16xf32>) -> tensor<?x112x112x16xf32> loc(#loc3829)
      tf_executor.fetch %outputs_3, %control : tensor<?x112x112x16xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x16xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_expanded_conv_project_layer_call_fn_184930(%arg0: tensor<?x112x112x32xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x112x112x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x112x112x32>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_project_layer_call_and_return_conditional_losses_90580} : (tensor<?x112x112x32xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc3830)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3831)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc3832)
      tf_executor.fetch %outputs_1, %control : tensor<?x112x112x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x112x112x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_global_average_pooling2d_layer_call_and_return_conditional_losses_228230(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[1, 2]> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc3833)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Mean"(%arg0, %outputs) {device = "", keep_dims = false} : (tensor<?x?x?x?xf32>, tensor<2xi32>) -> tensor<?x?xf32> loc(#loc3834)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.Identity"(%outputs_0) {device = ""} : (tensor<?x?xf32>) -> tensor<?x?xf32> loc(#loc3835)
      tf_executor.fetch %outputs_2 : tensor<?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_global_average_pooling2d_layer_call_and_return_conditional_losses_89850(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[1, 2]> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc3836)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Mean"(%arg0, %outputs) {device = "", keep_dims = false} : (tensor<?x?x?x?xf32>, tensor<2xi32>) -> tensor<?x?xf32> loc(#loc3837)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.Identity"(%outputs_0) {device = ""} : (tensor<?x?xf32>) -> tensor<?x?xf32> loc(#loc3838)
      tf_executor.fetch %outputs_2 : tensor<?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_global_average_pooling2d_layer_call_fn_228170(%arg0: tensor<?x?x?x?xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x?x?x?>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_global_average_pooling2d_layer_call_and_return_conditional_losses_89850} : (tensor<?x?x?x?xf32>) -> tensor<?x?xf32> loc(#loc3839)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?xf32>) -> tensor<?x?xf32> loc(#loc3840)
      tf_executor.fetch %outputs_0 : tensor<?x?xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_104170(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown), %arg5: tensor<!tf_type.resource> loc(unknown), %arg6: tensor<!tf_type.resource> loc(unknown), %arg7: tensor<!tf_type.resource> loc(unknown), %arg8: tensor<!tf_type.resource> loc(unknown), %arg9: tensor<!tf_type.resource> loc(unknown), %arg10: tensor<!tf_type.resource> loc(unknown), %arg11: tensor<!tf_type.resource> loc(unknown), %arg12: tensor<!tf_type.resource> loc(unknown), %arg13: tensor<!tf_type.resource> loc(unknown), %arg14: tensor<!tf_type.resource> loc(unknown), %arg15: tensor<!tf_type.resource> loc(unknown), %arg16: tensor<!tf_type.resource> loc(unknown), %arg17: tensor<!tf_type.resource> loc(unknown), %arg18: tensor<!tf_type.resource> loc(unknown), %arg19: tensor<!tf_type.resource> loc(unknown), %arg20: tensor<!tf_type.resource> loc(unknown), %arg21: tensor<!tf_type.resource> loc(unknown), %arg22: tensor<!tf_type.resource> loc(unknown), %arg23: tensor<!tf_type.resource> loc(unknown), %arg24: tensor<!tf_type.resource> loc(unknown), %arg25: tensor<!tf_type.resource> loc(unknown), %arg26: tensor<!tf_type.resource> loc(unknown), %arg27: tensor<!tf_type.resource> loc(unknown), %arg28: tensor<!tf_type.resource> loc(unknown), %arg29: tensor<!tf_type.resource> loc(unknown), %arg30: tensor<!tf_type.resource> loc(unknown), %arg31: tensor<!tf_type.resource> loc(unknown), %arg32: tensor<!tf_type.resource> loc(unknown), %arg33: tensor<!tf_type.resource> loc(unknown), %arg34: tensor<!tf_type.resource> loc(unknown), %arg35: tensor<!tf_type.resource> loc(unknown), %arg36: tensor<!tf_type.resource> loc(unknown), %arg37: tensor<!tf_type.resource> loc(unknown), %arg38: tensor<!tf_type.resource> loc(unknown), %arg39: tensor<!tf_type.resource> loc(unknown), %arg40: tensor<!tf_type.resource> loc(unknown), %arg41: tensor<!tf_type.resource> loc(unknown), %arg42: tensor<!tf_type.resource> loc(unknown), %arg43: tensor<!tf_type.resource> loc(unknown), %arg44: tensor<!tf_type.resource> loc(unknown), %arg45: tensor<!tf_type.resource> loc(unknown), %arg46: tensor<!tf_type.resource> loc(unknown), %arg47: tensor<!tf_type.resource> loc(unknown), %arg48: tensor<!tf_type.resource> loc(unknown), %arg49: tensor<!tf_type.resource> loc(unknown), %arg50: tensor<!tf_type.resource> loc(unknown), %arg51: tensor<!tf_type.resource> loc(unknown), %arg52: tensor<!tf_type.resource> loc(unknown), %arg53: tensor<!tf_type.resource> loc(unknown), %arg54: tensor<!tf_type.resource> loc(unknown), %arg55: tensor<!tf_type.resource> loc(unknown), %arg56: tensor<!tf_type.resource> loc(unknown), %arg57: tensor<!tf_type.resource> loc(unknown), %arg58: tensor<!tf_type.resource> loc(unknown), %arg59: tensor<!tf_type.resource> loc(unknown), %arg60: tensor<!tf_type.resource> loc(unknown), %arg61: tensor<!tf_type.resource> loc(unknown), %arg62: tensor<!tf_type.resource> loc(unknown), %arg63: tensor<!tf_type.resource> loc(unknown), %arg64: tensor<!tf_type.resource> loc(unknown), %arg65: tensor<!tf_type.resource> loc(unknown), %arg66: tensor<!tf_type.resource> loc(unknown), %arg67: tensor<!tf_type.resource> loc(unknown), %arg68: tensor<!tf_type.resource> loc(unknown), %arg69: tensor<!tf_type.resource> loc(unknown), %arg70: tensor<!tf_type.resource> loc(unknown), %arg71: tensor<!tf_type.resource> loc(unknown), %arg72: tensor<!tf_type.resource> loc(unknown), %arg73: tensor<!tf_type.resource> loc(unknown), %arg74: tensor<!tf_type.resource> loc(unknown), %arg75: tensor<!tf_type.resource> loc(unknown), %arg76: tensor<!tf_type.resource> loc(unknown), %arg77: tensor<!tf_type.resource> loc(unknown), %arg78: tensor<!tf_type.resource> loc(unknown), %arg79: tensor<!tf_type.resource> loc(unknown), %arg80: tensor<!tf_type.resource> loc(unknown), %arg81: tensor<!tf_type.resource> loc(unknown), %arg82: tensor<!tf_type.resource> loc(unknown), %arg83: tensor<!tf_type.resource> loc(unknown), %arg84: tensor<!tf_type.resource> loc(unknown), %arg85: tensor<!tf_type.resource> loc(unknown), %arg86: tensor<!tf_type.resource> loc(unknown), %arg87: tensor<!tf_type.resource> loc(unknown), %arg88: tensor<!tf_type.resource> loc(unknown), %arg89: tensor<!tf_type.resource> loc(unknown), %arg90: tensor<!tf_type.resource> loc(unknown), %arg91: tensor<!tf_type.resource> loc(unknown), %arg92: tensor<!tf_type.resource> loc(unknown), %arg93: tensor<!tf_type.resource> loc(unknown), %arg94: tensor<!tf_type.resource> loc(unknown), %arg95: tensor<!tf_type.resource> loc(unknown), %arg96: tensor<!tf_type.resource> loc(unknown), %arg97: tensor<!tf_type.resource> loc(unknown), %arg98: tensor<!tf_type.resource> loc(unknown), %arg99: tensor<!tf_type.resource> loc(unknown), %arg100: tensor<!tf_type.resource> loc(unknown), %arg101: tensor<!tf_type.resource> loc(unknown), %arg102: tensor<!tf_type.resource> loc(unknown), %arg103: tensor<!tf_type.resource> loc(unknown), %arg104: tensor<!tf_type.resource> loc(unknown), %arg105: tensor<!tf_type.resource> loc(unknown), %arg106: tensor<!tf_type.resource> loc(unknown), %arg107: tensor<!tf_type.resource> loc(unknown), %arg108: tensor<!tf_type.resource> loc(unknown), %arg109: tensor<!tf_type.resource> loc(unknown), %arg110: tensor<!tf_type.resource> loc(unknown), %arg111: tensor<!tf_type.resource> loc(unknown), %arg112: tensor<!tf_type.resource> loc(unknown), %arg113: tensor<!tf_type.resource> loc(unknown), %arg114: tensor<!tf_type.resource> loc(unknown), %arg115: tensor<!tf_type.resource> loc(unknown), %arg116: tensor<!tf_type.resource> loc(unknown), %arg117: tensor<!tf_type.resource> loc(unknown), %arg118: tensor<!tf_type.resource> loc(unknown), %arg119: tensor<!tf_type.resource> loc(unknown), %arg120: tensor<!tf_type.resource> loc(unknown), %arg121: tensor<!tf_type.resource> loc(unknown), %arg122: tensor<!tf_type.resource> loc(unknown), %arg123: tensor<!tf_type.resource> loc(unknown), %arg124: tensor<!tf_type.resource> loc(unknown), %arg125: tensor<!tf_type.resource> loc(unknown), %arg126: tensor<!tf_type.resource> loc(unknown), %arg127: tensor<!tf_type.resource> loc(unknown), %arg128: tensor<!tf_type.resource> loc(unknown), %arg129: tensor<!tf_type.resource> loc(unknown), %arg130: tensor<!tf_type.resource> loc(unknown), %arg131: tensor<!tf_type.resource> loc(unknown), %arg132: tensor<!tf_type.resource> loc(unknown), %arg133: tensor<!tf_type.resource> loc(unknown), %arg134: tensor<!tf_type.resource> loc(unknown), %arg135: tensor<!tf_type.resource> loc(unknown), %arg136: tensor<!tf_type.resource> loc(unknown), %arg137: tensor<!tf_type.resource> loc(unknown), %arg138: tensor<!tf_type.resource> loc(unknown), %arg139: tensor<!tf_type.resource> loc(unknown), %arg140: tensor<!tf_type.resource> loc(unknown), %arg141: tensor<!tf_type.resource> loc(unknown), %arg142: tensor<!tf_type.resource> loc(unknown), %arg143: tensor<!tf_type.resource> loc(unknown), %arg144: tensor<!tf_type.resource> loc(unknown), %arg145: tensor<!tf_type.resource> loc(unknown), %arg146: tensor<!tf_type.resource> loc(unknown), %arg147: tensor<!tf_type.resource> loc(unknown), %arg148: tensor<!tf_type.resource> loc(unknown), %arg149: tensor<!tf_type.resource> loc(unknown), %arg150: tensor<!tf_type.resource> loc(unknown), %arg151: tensor<!tf_type.resource> loc(unknown), %arg152: tensor<!tf_type.resource> loc(unknown), %arg153: tensor<!tf_type.resource> loc(unknown), %arg154: tensor<!tf_type.resource> loc(unknown), %arg155: tensor<!tf_type.resource> loc(unknown), %arg156: tensor<!tf_type.resource> loc(unknown), %arg157: tensor<!tf_type.resource> loc(unknown), %arg158: tensor<!tf_type.resource> loc(unknown), %arg159: tensor<!tf_type.resource> loc(unknown), %arg160: tensor<!tf_type.resource> loc(unknown), %arg161: tensor<!tf_type.resource> loc(unknown), %arg162: tensor<!tf_type.resource> loc(unknown), %arg163: tensor<!tf_type.resource> loc(unknown), %arg164: tensor<!tf_type.resource> loc(unknown), %arg165: tensor<!tf_type.resource> loc(unknown), %arg166: tensor<!tf_type.resource> loc(unknown), %arg167: tensor<!tf_type.resource> loc(unknown), %arg168: tensor<!tf_type.resource> loc(unknown), %arg169: tensor<!tf_type.resource> loc(unknown), %arg170: tensor<!tf_type.resource> loc(unknown), %arg171: tensor<!tf_type.resource> loc(unknown), %arg172: tensor<!tf_type.resource> loc(unknown), %arg173: tensor<!tf_type.resource> loc(unknown), %arg174: tensor<!tf_type.resource> loc(unknown), %arg175: tensor<!tf_type.resource> loc(unknown), %arg176: tensor<!tf_type.resource> loc(unknown), %arg177: tensor<!tf_type.resource> loc(unknown), %arg178: tensor<!tf_type.resource> loc(unknown), %arg179: tensor<!tf_type.resource> loc(unknown), %arg180: tensor<!tf_type.resource> loc(unknown), %arg181: tensor<!tf_type.resource> loc(unknown), %arg182: tensor<!tf_type.resource> loc(unknown), %arg183: tensor<!tf_type.resource> loc(unknown), %arg184: tensor<!tf_type.resource> loc(unknown), %arg185: tensor<!tf_type.resource> loc(unknown), %arg186: tensor<!tf_type.resource> loc(unknown), %arg187: tensor<!tf_type.resource> loc(unknown), %arg188: tensor<!tf_type.resource> loc(unknown), %arg189: tensor<!tf_type.resource> loc(unknown), %arg190: tensor<!tf_type.resource> loc(unknown), %arg191: tensor<!tf_type.resource> loc(unknown), %arg192: tensor<!tf_type.resource> loc(unknown), %arg193: tensor<!tf_type.resource> loc(unknown), %arg194: tensor<!tf_type.resource> loc(unknown), %arg195: tensor<!tf_type.resource> loc(unknown), %arg196: tensor<!tf_type.resource> loc(unknown), %arg197: tensor<!tf_type.resource> loc(unknown), %arg198: tensor<!tf_type.resource> loc(unknown), %arg199: tensor<!tf_type.resource> loc(unknown), %arg200: tensor<!tf_type.resource> loc(unknown), %arg201: tensor<!tf_type.resource> loc(unknown), %arg202: tensor<!tf_type.resource> loc(unknown), %arg203: tensor<!tf_type.resource> loc(unknown), %arg204: tensor<!tf_type.resource> loc(unknown), %arg205: tensor<!tf_type.resource> loc(unknown), %arg206: tensor<!tf_type.resource> loc(unknown), %arg207: tensor<!tf_type.resource> loc(unknown), %arg208: tensor<!tf_type.resource> loc(unknown), %arg209: tensor<!tf_type.resource> loc(unknown), %arg210: tensor<!tf_type.resource> loc(unknown), %arg211: tensor<!tf_type.resource> loc(unknown), %arg212: tensor<!tf_type.resource> loc(unknown), %arg213: tensor<!tf_type.resource> loc(unknown), %arg214: tensor<!tf_type.resource> loc(unknown), %arg215: tensor<!tf_type.resource> loc(unknown), %arg216: tensor<!tf_type.resource> loc(unknown), %arg217: tensor<!tf_type.resource> loc(unknown), %arg218: tensor<!tf_type.resource> loc(unknown), %arg219: tensor<!tf_type.resource> loc(unknown), %arg220: tensor<!tf_type.resource> loc(unknown), %arg221: tensor<!tf_type.resource> loc(unknown), %arg222: tensor<!tf_type.resource> loc(unknown), %arg223: tensor<!tf_type.resource> loc(unknown), %arg224: tensor<!tf_type.resource> loc(unknown), %arg225: tensor<!tf_type.resource> loc(unknown), %arg226: tensor<!tf_type.resource> loc(unknown), %arg227: tensor<!tf_type.resource> loc(unknown), %arg228: tensor<!tf_type.resource> loc(unknown), %arg229: tensor<!tf_type.resource> loc(unknown), %arg230: tensor<!tf_type.resource> loc(unknown), %arg231: tensor<!tf_type.resource> loc(unknown), %arg232: tensor<!tf_type.resource> loc(unknown), %arg233: tensor<!tf_type.resource> loc(unknown), %arg234: tensor<!tf_type.resource> loc(unknown), %arg235: tensor<!tf_type.resource> loc(unknown), %arg236: tensor<!tf_type.resource> loc(unknown), %arg237: tensor<!tf_type.resource> loc(unknown), %arg238: tensor<!tf_type.resource> loc(unknown), %arg239: tensor<!tf_type.resource> loc(unknown), %arg240: tensor<!tf_type.resource> loc(unknown), %arg241: tensor<!tf_type.resource> loc(unknown), %arg242: tensor<!tf_type.resource> loc(unknown), %arg243: tensor<!tf_type.resource> loc(unknown), %arg244: tensor<!tf_type.resource> loc(unknown), %arg245: tensor<!tf_type.resource> loc(unknown), %arg246: tensor<!tf_type.resource> loc(unknown), %arg247: tensor<!tf_type.resource> loc(unknown), %arg248: tensor<!tf_type.resource> loc(unknown), %arg249: tensor<!tf_type.resource> loc(unknown), %arg250: tensor<!tf_type.resource> loc(unknown), %arg251: tensor<!tf_type.resource> loc(unknown), %arg252: tensor<!tf_type.resource> loc(unknown), %arg253: tensor<!tf_type.resource> loc(unknown), %arg254: tensor<!tf_type.resource> loc(unknown), %arg255: tensor<!tf_type.resource> loc(unknown), %arg256: tensor<!tf_type.resource> loc(unknown), %arg257: tensor<!tf_type.resource> loc(unknown), %arg258: tensor<!tf_type.resource> loc(unknown), %arg259: tensor<!tf_type.resource> loc(unknown), %arg260: tensor<!tf_type.resource> loc(unknown), %arg261: tensor<!tf_type.resource> loc(unknown), %arg262: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv1_layer_call_and_return_conditional_losses_90020} : (tensor<?x224x224x3xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc3841)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs, %arg2, %arg3, %arg4, %arg5) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_bn_Conv1_layer_call_and_return_conditional_losses_56170} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc3842)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv1_relu_layer_call_and_return_conditional_losses_90200} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc3843)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_2, %arg6) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_90310} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc3844)
      %outputs_6, %control_7 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_4, %arg7, %arg8, %arg9, %arg10) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_56810} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc3845)
      %outputs_8, %control_9 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_6) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_relu_layer_call_and_return_conditional_losses_90490} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc3846)
      %outputs_10, %control_11 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_8, %arg11) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_project_layer_call_and_return_conditional_losses_90580} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc3847)
      %outputs_12, %control_13 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_10, %arg12, %arg13, %arg14, %arg15) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_57450} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc3848)
      %outputs_14, %control_15 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_12, %arg16) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_layer_call_and_return_conditional_losses_90780} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc3849)
      %outputs_16, %control_17 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_14, %arg17, %arg18, %arg19, %arg20) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_58090} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc3850)
      %outputs_18, %control_19 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_16) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_relu_layer_call_and_return_conditional_losses_90960} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc3851)
      %outputs_20, %control_21 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_18) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_pad_layer_call_and_return_conditional_losses_58610} : (tensor<?x112x112x?xf32>) -> tensor<?x113x113x?xf32> loc(#loc3852)
      %outputs_22, %control_23 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_20, %arg21) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_layer_call_and_return_conditional_losses_91080} : (tensor<?x113x113x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3853)
      %outputs_24, %control_25 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_22, %arg22, %arg23, %arg24, %arg25) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_58860} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3854)
      %outputs_26, %control_27 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_24) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_relu_layer_call_and_return_conditional_losses_91260} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3855)
      %outputs_28, %control_29 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_26, %arg26) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_project_layer_call_and_return_conditional_losses_91350} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3856)
      %outputs_30, %control_31 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_28, %arg27, %arg28, %arg29, %arg30) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_project_BN_layer_call_and_return_conditional_losses_59500} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3857)
      %outputs_32, %control_33 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_30, %arg31) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_layer_call_and_return_conditional_losses_91550} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3858)
      %outputs_34, %control_35 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_32, %arg32, %arg33, %arg34, %arg35) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_60140} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3859)
      %outputs_36, %control_37 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_34) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_relu_layer_call_and_return_conditional_losses_91730} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3860)
      %outputs_38, %control_39 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_36, %arg36) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_layer_call_and_return_conditional_losses_91840} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3861)
      %outputs_40, %control_41 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_38, %arg37, %arg38, %arg39, %arg40) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_60780} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3862)
      %outputs_42, %control_43 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_40) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_relu_layer_call_and_return_conditional_losses_92020} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3863)
      %outputs_44, %control_45 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_42, %arg41) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_project_layer_call_and_return_conditional_losses_92110} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3864)
      %outputs_46, %control_47 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_44, %arg42, %arg43, %arg44, %arg45) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_project_BN_layer_call_and_return_conditional_losses_61420} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3865)
      %outputs_48, %control_49 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_30, %outputs_46) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_add_layer_call_and_return_conditional_losses_92300} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3866)
      %outputs_50, %control_51 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_48, %arg46) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_layer_call_and_return_conditional_losses_92390} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3867)
      %outputs_52, %control_53 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_50, %arg47, %arg48, %arg49, %arg50) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_62060} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3868)
      %outputs_54, %control_55 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_52) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_relu_layer_call_and_return_conditional_losses_92570} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3869)
      %outputs_56, %control_57 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_54) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_pad_layer_call_and_return_conditional_losses_62580} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3870)
      %outputs_58, %control_59 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_56, %arg51) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_layer_call_and_return_conditional_losses_92690} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3871)
      %outputs_60, %control_61 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_58, %arg52, %arg53, %arg54, %arg55) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_62830} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3872)
      %outputs_62, %control_63 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_60) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_relu_layer_call_and_return_conditional_losses_92870} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3873)
      %outputs_64, %control_65 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_62, %arg56) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_project_layer_call_and_return_conditional_losses_92960} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3874)
      %outputs_66, %control_67 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_64, %arg57, %arg58, %arg59, %arg60) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_project_BN_layer_call_and_return_conditional_losses_63470} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3875)
      %outputs_68, %control_69 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_66, %arg61) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_layer_call_and_return_conditional_losses_93160} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3876)
      %outputs_70, %control_71 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_68, %arg62, %arg63, %arg64, %arg65) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_64110} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3877)
      %outputs_72, %control_73 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_70) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_relu_layer_call_and_return_conditional_losses_93340} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3878)
      %outputs_74, %control_75 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_72, %arg66) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_layer_call_and_return_conditional_losses_93450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3879)
      %outputs_76, %control_77 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_74, %arg67, %arg68, %arg69, %arg70) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_64750} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3880)
      %outputs_78, %control_79 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_76) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_relu_layer_call_and_return_conditional_losses_93630} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3881)
      %outputs_80, %control_81 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_78, %arg71) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_project_layer_call_and_return_conditional_losses_93720} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3882)
      %outputs_82, %control_83 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_80, %arg72, %arg73, %arg74, %arg75) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_project_BN_layer_call_and_return_conditional_losses_65390} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3883)
      %outputs_84, %control_85 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_66, %outputs_82) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_add_layer_call_and_return_conditional_losses_93910} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3884)
      %outputs_86, %control_87 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_84, %arg76) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_layer_call_and_return_conditional_losses_94000} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3885)
      %outputs_88, %control_89 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_86, %arg77, %arg78, %arg79, %arg80) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_66030} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3886)
      %outputs_90, %control_91 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_88) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_relu_layer_call_and_return_conditional_losses_94180} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3887)
      %outputs_92, %control_93 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_90, %arg81) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_layer_call_and_return_conditional_losses_94290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3888)
      %outputs_94, %control_95 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_92, %arg82, %arg83, %arg84, %arg85) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_66670} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3889)
      %outputs_96, %control_97 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_94) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_relu_layer_call_and_return_conditional_losses_94470} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3890)
      %outputs_98, %control_99 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_96, %arg86) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_project_layer_call_and_return_conditional_losses_94560} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3891)
      %outputs_100, %control_101 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_98, %arg87, %arg88, %arg89, %arg90) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_project_BN_layer_call_and_return_conditional_losses_67310} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3892)
      %outputs_102, %control_103 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_84, %outputs_100) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_add_layer_call_and_return_conditional_losses_94750} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3893)
      %outputs_104, %control_105 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_102, %arg91) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_layer_call_and_return_conditional_losses_94840} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3894)
      %outputs_106, %control_107 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_104, %arg92, %arg93, %arg94, %arg95) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_67950} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3895)
      %outputs_108, %control_109 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_106) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_relu_layer_call_and_return_conditional_losses_95020} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3896)
      %outputs_110, %control_111 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_108) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_pad_layer_call_and_return_conditional_losses_68470} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3897)
      %outputs_112, %control_113 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_110, %arg96) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_layer_call_and_return_conditional_losses_95140} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3898)
      %outputs_114, %control_115 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_112, %arg97, %arg98, %arg99, %arg100) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_68720} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3899)
      %outputs_116, %control_117 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_114) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_relu_layer_call_and_return_conditional_losses_95320} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3900)
      %outputs_118, %control_119 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_116, %arg101) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_project_layer_call_and_return_conditional_losses_95410} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3901)
      %outputs_120, %control_121 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_118, %arg102, %arg103, %arg104, %arg105) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_project_BN_layer_call_and_return_conditional_losses_69360} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3902)
      %outputs_122, %control_123 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_120, %arg106) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_layer_call_and_return_conditional_losses_95610} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3903)
      %outputs_124, %control_125 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_122, %arg107, %arg108, %arg109, %arg110) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_70000} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3904)
      %outputs_126, %control_127 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_124) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_relu_layer_call_and_return_conditional_losses_95790} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3905)
      %outputs_128, %control_129 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_126, %arg111) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_layer_call_and_return_conditional_losses_95900} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3906)
      %outputs_130, %control_131 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_128, %arg112, %arg113, %arg114, %arg115) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_70640} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3907)
      %outputs_132, %control_133 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_130) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_relu_layer_call_and_return_conditional_losses_96080} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3908)
      %outputs_134, %control_135 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_132, %arg116) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_project_layer_call_and_return_conditional_losses_96170} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3909)
      %outputs_136, %control_137 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_134, %arg117, %arg118, %arg119, %arg120) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_project_BN_layer_call_and_return_conditional_losses_71280} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3910)
      %outputs_138, %control_139 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_120, %outputs_136) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_add_layer_call_and_return_conditional_losses_96360} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3911)
      %outputs_140, %control_141 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_138, %arg121) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_layer_call_and_return_conditional_losses_96450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3912)
      %outputs_142, %control_143 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_140, %arg122, %arg123, %arg124, %arg125) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_71920} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3913)
      %outputs_144, %control_145 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_142) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_relu_layer_call_and_return_conditional_losses_96630} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3914)
      %outputs_146, %control_147 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_144, %arg126) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_layer_call_and_return_conditional_losses_96740} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3915)
      %outputs_148, %control_149 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_146, %arg127, %arg128, %arg129, %arg130) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_72560} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3916)
      %outputs_150, %control_151 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_148) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_relu_layer_call_and_return_conditional_losses_96920} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3917)
      %outputs_152, %control_153 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_150, %arg131) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_project_layer_call_and_return_conditional_losses_97010} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3918)
      %outputs_154, %control_155 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_152, %arg132, %arg133, %arg134, %arg135) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_project_BN_layer_call_and_return_conditional_losses_73200} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3919)
      %outputs_156, %control_157 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_138, %outputs_154) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_add_layer_call_and_return_conditional_losses_97200} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3920)
      %outputs_158, %control_159 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_156, %arg136) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_layer_call_and_return_conditional_losses_97290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3921)
      %outputs_160, %control_161 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_158, %arg137, %arg138, %arg139, %arg140) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_73840} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3922)
      %outputs_162, %control_163 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_160) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_relu_layer_call_and_return_conditional_losses_97470} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3923)
      %outputs_164, %control_165 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_162, %arg141) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_layer_call_and_return_conditional_losses_97580} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3924)
      %outputs_166, %control_167 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_164, %arg142, %arg143, %arg144, %arg145) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_74480} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3925)
      %outputs_168, %control_169 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_166) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_relu_layer_call_and_return_conditional_losses_97760} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3926)
      %outputs_170, %control_171 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_168, %arg146) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_project_layer_call_and_return_conditional_losses_97850} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3927)
      %outputs_172, %control_173 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_170, %arg147, %arg148, %arg149, %arg150) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_project_BN_layer_call_and_return_conditional_losses_75120} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3928)
      %outputs_174, %control_175 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_156, %outputs_172) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_add_layer_call_and_return_conditional_losses_98040} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3929)
      %outputs_176, %control_177 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_174, %arg151) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_layer_call_and_return_conditional_losses_98130} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3930)
      %outputs_178, %control_179 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_176, %arg152, %arg153, %arg154, %arg155) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_75760} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3931)
      %outputs_180, %control_181 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_178) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_relu_layer_call_and_return_conditional_losses_98310} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3932)
      %outputs_182, %control_183 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_180, %arg156) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_layer_call_and_return_conditional_losses_98420} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3933)
      %outputs_184, %control_185 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_182, %arg157, %arg158, %arg159, %arg160) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_76400} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3934)
      %outputs_186, %control_187 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_184) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_relu_layer_call_and_return_conditional_losses_98600} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3935)
      %outputs_188, %control_189 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_186, %arg161) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_project_layer_call_and_return_conditional_losses_98690} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3936)
      %outputs_190, %control_191 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_188, %arg162, %arg163, %arg164, %arg165) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_project_BN_layer_call_and_return_conditional_losses_77040} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3937)
      %outputs_192, %control_193 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_190, %arg166) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_layer_call_and_return_conditional_losses_98890} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3938)
      %outputs_194, %control_195 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_192, %arg167, %arg168, %arg169, %arg170) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_77680} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3939)
      %outputs_196, %control_197 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_194) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_relu_layer_call_and_return_conditional_losses_99070} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3940)
      %outputs_198, %control_199 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_196, %arg171) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_layer_call_and_return_conditional_losses_99180} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3941)
      %outputs_200, %control_201 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_198, %arg172, %arg173, %arg174, %arg175) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_78320} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3942)
      %outputs_202, %control_203 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_200) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_relu_layer_call_and_return_conditional_losses_99360} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3943)
      %outputs_204, %control_205 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_202, %arg176) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_project_layer_call_and_return_conditional_losses_99450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3944)
      %outputs_206, %control_207 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_204, %arg177, %arg178, %arg179, %arg180) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_project_BN_layer_call_and_return_conditional_losses_78960} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3945)
      %outputs_208, %control_209 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_190, %outputs_206) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_add_layer_call_and_return_conditional_losses_99640} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3946)
      %outputs_210, %control_211 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_208, %arg181) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_layer_call_and_return_conditional_losses_99730} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3947)
      %outputs_212, %control_213 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_210, %arg182, %arg183, %arg184, %arg185) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_79600} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3948)
      %outputs_214, %control_215 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_212) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_relu_layer_call_and_return_conditional_losses_99910} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3949)
      %outputs_216, %control_217 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_214, %arg186) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_layer_call_and_return_conditional_losses_100020} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3950)
      %outputs_218, %control_219 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_216, %arg187, %arg188, %arg189, %arg190) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_80240} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3951)
      %outputs_220, %control_221 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_218) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_relu_layer_call_and_return_conditional_losses_100200} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3952)
      %outputs_222, %control_223 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_220, %arg191) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_project_layer_call_and_return_conditional_losses_100290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3953)
      %outputs_224, %control_225 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_222, %arg192, %arg193, %arg194, %arg195) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_project_BN_layer_call_and_return_conditional_losses_80880} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3954)
      %outputs_226, %control_227 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_208, %outputs_224) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_add_layer_call_and_return_conditional_losses_100480} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3955)
      %outputs_228, %control_229 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_226, %arg196) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_layer_call_and_return_conditional_losses_100570} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3956)
      %outputs_230, %control_231 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_228, %arg197, %arg198, %arg199, %arg200) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_81520} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3957)
      %outputs_232, %control_233 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_230) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_relu_layer_call_and_return_conditional_losses_100750} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3958)
      %outputs_234, %control_235 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_232) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_pad_layer_call_and_return_conditional_losses_82040} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3959)
      %outputs_236, %control_237 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_234, %arg201) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_layer_call_and_return_conditional_losses_100870} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3960)
      %outputs_238, %control_239 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_236, %arg202, %arg203, %arg204, %arg205) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_82290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3961)
      %outputs_240, %control_241 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_238) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_relu_layer_call_and_return_conditional_losses_101050} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3962)
      %outputs_242, %control_243 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_240, %arg206) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_project_layer_call_and_return_conditional_losses_101140} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3963)
      %outputs_244, %control_245 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_242, %arg207, %arg208, %arg209, %arg210) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_project_BN_layer_call_and_return_conditional_losses_82930} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3964)
      %outputs_246, %control_247 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_244, %arg211) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_layer_call_and_return_conditional_losses_101340} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3965)
      %outputs_248, %control_249 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_246, %arg212, %arg213, %arg214, %arg215) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_83570} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3966)
      %outputs_250, %control_251 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_248) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_relu_layer_call_and_return_conditional_losses_101520} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3967)
      %outputs_252, %control_253 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_250, %arg216) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_layer_call_and_return_conditional_losses_101630} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3968)
      %outputs_254, %control_255 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_252, %arg217, %arg218, %arg219, %arg220) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_84210} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3969)
      %outputs_256, %control_257 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_254) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_relu_layer_call_and_return_conditional_losses_101810} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3970)
      %outputs_258, %control_259 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_256, %arg221) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_project_layer_call_and_return_conditional_losses_101900} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3971)
      %outputs_260, %control_261 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_258, %arg222, %arg223, %arg224, %arg225) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_project_BN_layer_call_and_return_conditional_losses_84850} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3972)
      %outputs_262, %control_263 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_244, %outputs_260) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_add_layer_call_and_return_conditional_losses_102090} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3973)
      %outputs_264, %control_265 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_262, %arg226) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_layer_call_and_return_conditional_losses_102180} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3974)
      %outputs_266, %control_267 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_264, %arg227, %arg228, %arg229, %arg230) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_85490} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3975)
      %outputs_268, %control_269 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_266) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_relu_layer_call_and_return_conditional_losses_102360} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3976)
      %outputs_270, %control_271 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_268, %arg231) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_layer_call_and_return_conditional_losses_102470} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3977)
      %outputs_272, %control_273 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_270, %arg232, %arg233, %arg234, %arg235) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_86130} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3978)
      %outputs_274, %control_275 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_272) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_relu_layer_call_and_return_conditional_losses_102650} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3979)
      %outputs_276, %control_277 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_274, %arg236) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_project_layer_call_and_return_conditional_losses_102740} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3980)
      %outputs_278, %control_279 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_276, %arg237, %arg238, %arg239, %arg240) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_project_BN_layer_call_and_return_conditional_losses_86770} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3981)
      %outputs_280, %control_281 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_262, %outputs_278) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_add_layer_call_and_return_conditional_losses_102930} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3982)
      %outputs_282, %control_283 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_280, %arg241) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_layer_call_and_return_conditional_losses_103020} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3983)
      %outputs_284, %control_285 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_282, %arg242, %arg243, %arg244, %arg245) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_87410} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3984)
      %outputs_286, %control_287 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_284) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_relu_layer_call_and_return_conditional_losses_103200} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3985)
      %outputs_288, %control_289 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_286, %arg246) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_layer_call_and_return_conditional_losses_103310} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3986)
      %outputs_290, %control_291 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_288, %arg247, %arg248, %arg249, %arg250) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_88050} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3987)
      %outputs_292, %control_293 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_290) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_relu_layer_call_and_return_conditional_losses_103490} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3988)
      %outputs_294, %control_295 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_292, %arg251) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_project_layer_call_and_return_conditional_losses_103580} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3989)
      %outputs_296, %control_297 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_294, %arg252, %arg253, %arg254, %arg255) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_project_BN_layer_call_and_return_conditional_losses_88690} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3990)
      %outputs_298, %control_299 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_296, %arg256) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv_1_layer_call_and_return_conditional_losses_103780} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3991)
      %outputs_300, %control_301 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_298, %arg257, %arg258, %arg259, %arg260) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv_1_bn_layer_call_and_return_conditional_losses_89330} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc3992)
      %outputs_302, %control_303 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_300) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_out_relu_layer_call_and_return_conditional_losses_103960} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc3993)
      %outputs_304, %control_305 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_302) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_global_average_pooling2d_layer_call_and_return_conditional_losses_89850} : (tensor<?x?x?x?xf32>) -> tensor<?x?xf32> loc(#loc3994)
      %outputs_306, %control_307 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_304, %arg261, %arg262) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_predictions_layer_call_and_return_conditional_losses_104100} : (tensor<?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?xf32> loc(#loc3995)
      %control_308 = tf_executor.island(%control, %control_1, %control_5, %control_7, %control_11, %control_13, %control_15, %control_17, %control_23, %control_25, %control_29, %control_31, %control_33, %control_35, %control_39, %control_41, %control_45, %control_47, %control_51, %control_53, %control_59, %control_61, %control_65, %control_67, %control_69, %control_71, %control_75, %control_77, %control_81, %control_83, %control_87, %control_89, %control_93, %control_95, %control_99, %control_101, %control_105, %control_107, %control_113, %control_115, %control_119, %control_121, %control_123, %control_125, %control_129, %control_131, %control_135, %control_137, %control_141, %control_143, %control_147, %control_149, %control_153, %control_155, %control_159, %control_161, %control_165, %control_167, %control_171, %control_173, %control_177, %control_179, %control_183, %control_185, %control_189, %control_191, %control_193, %control_195, %control_199, %control_201, %control_205, %control_207, %control_211, %control_213, %control_217, %control_219, %control_223, %control_225, %control_229, %control_231, %control_237, %control_239, %control_243, %control_245, %control_247, %control_249, %control_253, %control_255, %control_259, %control_261, %control_265, %control_267, %control_271, %control_273, %control_277, %control_279, %control_283, %control_285, %control_289, %control_291, %control_295, %control_297, %control_299, %control_301, %control_307) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc3996)
      %outputs_309, %control_310 = tf_executor.island(%control_308) wraps "tf.Identity"(%outputs_306) {device = ""} : (tensor<?x?xf32>) -> tensor<?x?xf32> loc(#loc3997)
      tf_executor.fetch %outputs_309, %control, %control_1, %control_5, %control_7, %control_11, %control_13, %control_15, %control_17, %control_23, %control_25, %control_29, %control_31, %control_33, %control_35, %control_39, %control_41, %control_45, %control_47, %control_51, %control_53, %control_59, %control_61, %control_65, %control_67, %control_69, %control_71, %control_75, %control_77, %control_81, %control_83, %control_87, %control_89, %control_93, %control_95, %control_99, %control_101, %control_105, %control_107, %control_113, %control_115, %control_119, %control_121, %control_123, %control_125, %control_129, %control_131, %control_135, %control_137, %control_141, %control_143, %control_147, %control_149, %control_153, %control_155, %control_159, %control_161, %control_165, %control_167, %control_171, %control_173, %control_177, %control_179, %control_183, %control_185, %control_189, %control_191, %control_193, %control_195, %control_199, %control_201, %control_205, %control_207, %control_211, %control_213, %control_217, %control_219, %control_223, %control_225, %control_229, %control_231, %control_237, %control_239, %control_243, %control_245, %control_247, %control_249, %control_253, %control_255, %control_259, %control_261, %control_265, %control_267, %control_271, %control_273, %control_277, %control_279, %control_283, %control_285, %control_289, %control_291, %control_295, %control_297, %control_299, %control_301, %control_307 : tensor<?x?xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_128640(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown), %arg5: tensor<!tf_type.resource> loc(unknown), %arg6: tensor<!tf_type.resource> loc(unknown), %arg7: tensor<!tf_type.resource> loc(unknown), %arg8: tensor<!tf_type.resource> loc(unknown), %arg9: tensor<!tf_type.resource> loc(unknown), %arg10: tensor<!tf_type.resource> loc(unknown), %arg11: tensor<!tf_type.resource> loc(unknown), %arg12: tensor<!tf_type.resource> loc(unknown), %arg13: tensor<!tf_type.resource> loc(unknown), %arg14: tensor<!tf_type.resource> loc(unknown), %arg15: tensor<!tf_type.resource> loc(unknown), %arg16: tensor<!tf_type.resource> loc(unknown), %arg17: tensor<!tf_type.resource> loc(unknown), %arg18: tensor<!tf_type.resource> loc(unknown), %arg19: tensor<!tf_type.resource> loc(unknown), %arg20: tensor<!tf_type.resource> loc(unknown), %arg21: tensor<!tf_type.resource> loc(unknown), %arg22: tensor<!tf_type.resource> loc(unknown), %arg23: tensor<!tf_type.resource> loc(unknown), %arg24: tensor<!tf_type.resource> loc(unknown), %arg25: tensor<!tf_type.resource> loc(unknown), %arg26: tensor<!tf_type.resource> loc(unknown), %arg27: tensor<!tf_type.resource> loc(unknown), %arg28: tensor<!tf_type.resource> loc(unknown), %arg29: tensor<!tf_type.resource> loc(unknown), %arg30: tensor<!tf_type.resource> loc(unknown), %arg31: tensor<!tf_type.resource> loc(unknown), %arg32: tensor<!tf_type.resource> loc(unknown), %arg33: tensor<!tf_type.resource> loc(unknown), %arg34: tensor<!tf_type.resource> loc(unknown), %arg35: tensor<!tf_type.resource> loc(unknown), %arg36: tensor<!tf_type.resource> loc(unknown), %arg37: tensor<!tf_type.resource> loc(unknown), %arg38: tensor<!tf_type.resource> loc(unknown), %arg39: tensor<!tf_type.resource> loc(unknown), %arg40: tensor<!tf_type.resource> loc(unknown), %arg41: tensor<!tf_type.resource> loc(unknown), %arg42: tensor<!tf_type.resource> loc(unknown), %arg43: tensor<!tf_type.resource> loc(unknown), %arg44: tensor<!tf_type.resource> loc(unknown), %arg45: tensor<!tf_type.resource> loc(unknown), %arg46: tensor<!tf_type.resource> loc(unknown), %arg47: tensor<!tf_type.resource> loc(unknown), %arg48: tensor<!tf_type.resource> loc(unknown), %arg49: tensor<!tf_type.resource> loc(unknown), %arg50: tensor<!tf_type.resource> loc(unknown), %arg51: tensor<!tf_type.resource> loc(unknown), %arg52: tensor<!tf_type.resource> loc(unknown), %arg53: tensor<!tf_type.resource> loc(unknown), %arg54: tensor<!tf_type.resource> loc(unknown), %arg55: tensor<!tf_type.resource> loc(unknown), %arg56: tensor<!tf_type.resource> loc(unknown), %arg57: tensor<!tf_type.resource> loc(unknown), %arg58: tensor<!tf_type.resource> loc(unknown), %arg59: tensor<!tf_type.resource> loc(unknown), %arg60: tensor<!tf_type.resource> loc(unknown), %arg61: tensor<!tf_type.resource> loc(unknown), %arg62: tensor<!tf_type.resource> loc(unknown), %arg63: tensor<!tf_type.resource> loc(unknown), %arg64: tensor<!tf_type.resource> loc(unknown), %arg65: tensor<!tf_type.resource> loc(unknown), %arg66: tensor<!tf_type.resource> loc(unknown), %arg67: tensor<!tf_type.resource> loc(unknown), %arg68: tensor<!tf_type.resource> loc(unknown), %arg69: tensor<!tf_type.resource> loc(unknown), %arg70: tensor<!tf_type.resource> loc(unknown), %arg71: tensor<!tf_type.resource> loc(unknown), %arg72: tensor<!tf_type.resource> loc(unknown), %arg73: tensor<!tf_type.resource> loc(unknown), %arg74: tensor<!tf_type.resource> loc(unknown), %arg75: tensor<!tf_type.resource> loc(unknown), %arg76: tensor<!tf_type.resource> loc(unknown), %arg77: tensor<!tf_type.resource> loc(unknown), %arg78: tensor<!tf_type.resource> loc(unknown), %arg79: tensor<!tf_type.resource> loc(unknown), %arg80: tensor<!tf_type.resource> loc(unknown), %arg81: tensor<!tf_type.resource> loc(unknown), %arg82: tensor<!tf_type.resource> loc(unknown), %arg83: tensor<!tf_type.resource> loc(unknown), %arg84: tensor<!tf_type.resource> loc(unknown), %arg85: tensor<!tf_type.resource> loc(unknown), %arg86: tensor<!tf_type.resource> loc(unknown), %arg87: tensor<!tf_type.resource> loc(unknown), %arg88: tensor<!tf_type.resource> loc(unknown), %arg89: tensor<!tf_type.resource> loc(unknown), %arg90: tensor<!tf_type.resource> loc(unknown), %arg91: tensor<!tf_type.resource> loc(unknown), %arg92: tensor<!tf_type.resource> loc(unknown), %arg93: tensor<!tf_type.resource> loc(unknown), %arg94: tensor<!tf_type.resource> loc(unknown), %arg95: tensor<!tf_type.resource> loc(unknown), %arg96: tensor<!tf_type.resource> loc(unknown), %arg97: tensor<!tf_type.resource> loc(unknown), %arg98: tensor<!tf_type.resource> loc(unknown), %arg99: tensor<!tf_type.resource> loc(unknown), %arg100: tensor<!tf_type.resource> loc(unknown), %arg101: tensor<!tf_type.resource> loc(unknown), %arg102: tensor<!tf_type.resource> loc(unknown), %arg103: tensor<!tf_type.resource> loc(unknown), %arg104: tensor<!tf_type.resource> loc(unknown), %arg105: tensor<!tf_type.resource> loc(unknown), %arg106: tensor<!tf_type.resource> loc(unknown), %arg107: tensor<!tf_type.resource> loc(unknown), %arg108: tensor<!tf_type.resource> loc(unknown), %arg109: tensor<!tf_type.resource> loc(unknown), %arg110: tensor<!tf_type.resource> loc(unknown), %arg111: tensor<!tf_type.resource> loc(unknown), %arg112: tensor<!tf_type.resource> loc(unknown), %arg113: tensor<!tf_type.resource> loc(unknown), %arg114: tensor<!tf_type.resource> loc(unknown), %arg115: tensor<!tf_type.resource> loc(unknown), %arg116: tensor<!tf_type.resource> loc(unknown), %arg117: tensor<!tf_type.resource> loc(unknown), %arg118: tensor<!tf_type.resource> loc(unknown), %arg119: tensor<!tf_type.resource> loc(unknown), %arg120: tensor<!tf_type.resource> loc(unknown), %arg121: tensor<!tf_type.resource> loc(unknown), %arg122: tensor<!tf_type.resource> loc(unknown), %arg123: tensor<!tf_type.resource> loc(unknown), %arg124: tensor<!tf_type.resource> loc(unknown), %arg125: tensor<!tf_type.resource> loc(unknown), %arg126: tensor<!tf_type.resource> loc(unknown), %arg127: tensor<!tf_type.resource> loc(unknown), %arg128: tensor<!tf_type.resource> loc(unknown), %arg129: tensor<!tf_type.resource> loc(unknown), %arg130: tensor<!tf_type.resource> loc(unknown), %arg131: tensor<!tf_type.resource> loc(unknown), %arg132: tensor<!tf_type.resource> loc(unknown), %arg133: tensor<!tf_type.resource> loc(unknown), %arg134: tensor<!tf_type.resource> loc(unknown), %arg135: tensor<!tf_type.resource> loc(unknown), %arg136: tensor<!tf_type.resource> loc(unknown), %arg137: tensor<!tf_type.resource> loc(unknown), %arg138: tensor<!tf_type.resource> loc(unknown), %arg139: tensor<!tf_type.resource> loc(unknown), %arg140: tensor<!tf_type.resource> loc(unknown), %arg141: tensor<!tf_type.resource> loc(unknown), %arg142: tensor<!tf_type.resource> loc(unknown), %arg143: tensor<!tf_type.resource> loc(unknown), %arg144: tensor<!tf_type.resource> loc(unknown), %arg145: tensor<!tf_type.resource> loc(unknown), %arg146: tensor<!tf_type.resource> loc(unknown), %arg147: tensor<!tf_type.resource> loc(unknown), %arg148: tensor<!tf_type.resource> loc(unknown), %arg149: tensor<!tf_type.resource> loc(unknown), %arg150: tensor<!tf_type.resource> loc(unknown), %arg151: tensor<!tf_type.resource> loc(unknown), %arg152: tensor<!tf_type.resource> loc(unknown), %arg153: tensor<!tf_type.resource> loc(unknown), %arg154: tensor<!tf_type.resource> loc(unknown), %arg155: tensor<!tf_type.resource> loc(unknown), %arg156: tensor<!tf_type.resource> loc(unknown), %arg157: tensor<!tf_type.resource> loc(unknown), %arg158: tensor<!tf_type.resource> loc(unknown), %arg159: tensor<!tf_type.resource> loc(unknown), %arg160: tensor<!tf_type.resource> loc(unknown), %arg161: tensor<!tf_type.resource> loc(unknown), %arg162: tensor<!tf_type.resource> loc(unknown), %arg163: tensor<!tf_type.resource> loc(unknown), %arg164: tensor<!tf_type.resource> loc(unknown), %arg165: tensor<!tf_type.resource> loc(unknown), %arg166: tensor<!tf_type.resource> loc(unknown), %arg167: tensor<!tf_type.resource> loc(unknown), %arg168: tensor<!tf_type.resource> loc(unknown), %arg169: tensor<!tf_type.resource> loc(unknown), %arg170: tensor<!tf_type.resource> loc(unknown), %arg171: tensor<!tf_type.resource> loc(unknown), %arg172: tensor<!tf_type.resource> loc(unknown), %arg173: tensor<!tf_type.resource> loc(unknown), %arg174: tensor<!tf_type.resource> loc(unknown), %arg175: tensor<!tf_type.resource> loc(unknown), %arg176: tensor<!tf_type.resource> loc(unknown), %arg177: tensor<!tf_type.resource> loc(unknown), %arg178: tensor<!tf_type.resource> loc(unknown), %arg179: tensor<!tf_type.resource> loc(unknown), %arg180: tensor<!tf_type.resource> loc(unknown), %arg181: tensor<!tf_type.resource> loc(unknown), %arg182: tensor<!tf_type.resource> loc(unknown), %arg183: tensor<!tf_type.resource> loc(unknown), %arg184: tensor<!tf_type.resource> loc(unknown), %arg185: tensor<!tf_type.resource> loc(unknown), %arg186: tensor<!tf_type.resource> loc(unknown), %arg187: tensor<!tf_type.resource> loc(unknown), %arg188: tensor<!tf_type.resource> loc(unknown), %arg189: tensor<!tf_type.resource> loc(unknown), %arg190: tensor<!tf_type.resource> loc(unknown), %arg191: tensor<!tf_type.resource> loc(unknown), %arg192: tensor<!tf_type.resource> loc(unknown), %arg193: tensor<!tf_type.resource> loc(unknown), %arg194: tensor<!tf_type.resource> loc(unknown), %arg195: tensor<!tf_type.resource> loc(unknown), %arg196: tensor<!tf_type.resource> loc(unknown), %arg197: tensor<!tf_type.resource> loc(unknown), %arg198: tensor<!tf_type.resource> loc(unknown), %arg199: tensor<!tf_type.resource> loc(unknown), %arg200: tensor<!tf_type.resource> loc(unknown), %arg201: tensor<!tf_type.resource> loc(unknown), %arg202: tensor<!tf_type.resource> loc(unknown), %arg203: tensor<!tf_type.resource> loc(unknown), %arg204: tensor<!tf_type.resource> loc(unknown), %arg205: tensor<!tf_type.resource> loc(unknown), %arg206: tensor<!tf_type.resource> loc(unknown), %arg207: tensor<!tf_type.resource> loc(unknown), %arg208: tensor<!tf_type.resource> loc(unknown), %arg209: tensor<!tf_type.resource> loc(unknown), %arg210: tensor<!tf_type.resource> loc(unknown), %arg211: tensor<!tf_type.resource> loc(unknown), %arg212: tensor<!tf_type.resource> loc(unknown), %arg213: tensor<!tf_type.resource> loc(unknown), %arg214: tensor<!tf_type.resource> loc(unknown), %arg215: tensor<!tf_type.resource> loc(unknown), %arg216: tensor<!tf_type.resource> loc(unknown), %arg217: tensor<!tf_type.resource> loc(unknown), %arg218: tensor<!tf_type.resource> loc(unknown), %arg219: tensor<!tf_type.resource> loc(unknown), %arg220: tensor<!tf_type.resource> loc(unknown), %arg221: tensor<!tf_type.resource> loc(unknown), %arg222: tensor<!tf_type.resource> loc(unknown), %arg223: tensor<!tf_type.resource> loc(unknown), %arg224: tensor<!tf_type.resource> loc(unknown), %arg225: tensor<!tf_type.resource> loc(unknown), %arg226: tensor<!tf_type.resource> loc(unknown), %arg227: tensor<!tf_type.resource> loc(unknown), %arg228: tensor<!tf_type.resource> loc(unknown), %arg229: tensor<!tf_type.resource> loc(unknown), %arg230: tensor<!tf_type.resource> loc(unknown), %arg231: tensor<!tf_type.resource> loc(unknown), %arg232: tensor<!tf_type.resource> loc(unknown), %arg233: tensor<!tf_type.resource> loc(unknown), %arg234: tensor<!tf_type.resource> loc(unknown), %arg235: tensor<!tf_type.resource> loc(unknown), %arg236: tensor<!tf_type.resource> loc(unknown), %arg237: tensor<!tf_type.resource> loc(unknown), %arg238: tensor<!tf_type.resource> loc(unknown), %arg239: tensor<!tf_type.resource> loc(unknown), %arg240: tensor<!tf_type.resource> loc(unknown), %arg241: tensor<!tf_type.resource> loc(unknown), %arg242: tensor<!tf_type.resource> loc(unknown), %arg243: tensor<!tf_type.resource> loc(unknown), %arg244: tensor<!tf_type.resource> loc(unknown), %arg245: tensor<!tf_type.resource> loc(unknown), %arg246: tensor<!tf_type.resource> loc(unknown), %arg247: tensor<!tf_type.resource> loc(unknown), %arg248: tensor<!tf_type.resource> loc(unknown), %arg249: tensor<!tf_type.resource> loc(unknown), %arg250: tensor<!tf_type.resource> loc(unknown), %arg251: tensor<!tf_type.resource> loc(unknown), %arg252: tensor<!tf_type.resource> loc(unknown), %arg253: tensor<!tf_type.resource> loc(unknown), %arg254: tensor<!tf_type.resource> loc(unknown), %arg255: tensor<!tf_type.resource> loc(unknown), %arg256: tensor<!tf_type.resource> loc(unknown), %arg257: tensor<!tf_type.resource> loc(unknown), %arg258: tensor<!tf_type.resource> loc(unknown), %arg259: tensor<!tf_type.resource> loc(unknown), %arg260: tensor<!tf_type.resource> loc(unknown), %arg261: tensor<!tf_type.resource> loc(unknown), %arg262: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv1_layer_call_and_return_conditional_losses_90020} : (tensor<?x224x224x3xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc3998)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs, %arg2, %arg3, %arg4, %arg5) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_bn_Conv1_layer_call_and_return_conditional_losses_56480} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc3999)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv1_relu_layer_call_and_return_conditional_losses_90200} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc4000)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_2, %arg6) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_90310} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4001)
      %outputs_6, %control_7 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_4, %arg7, %arg8, %arg9, %arg10) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_57120} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4002)
      %outputs_8, %control_9 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_6) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_relu_layer_call_and_return_conditional_losses_90490} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc4003)
      %outputs_10, %control_11 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_8, %arg11) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_project_layer_call_and_return_conditional_losses_90580} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4004)
      %outputs_12, %control_13 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_10, %arg12, %arg13, %arg14, %arg15) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_57760} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4005)
      %outputs_14, %control_15 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_12, %arg16) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_layer_call_and_return_conditional_losses_90780} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4006)
      %outputs_16, %control_17 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_14, %arg17, %arg18, %arg19, %arg20) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_58400} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4007)
      %outputs_18, %control_19 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_16) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_relu_layer_call_and_return_conditional_losses_90960} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc4008)
      %outputs_20, %control_21 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_18) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_pad_layer_call_and_return_conditional_losses_58610} : (tensor<?x112x112x?xf32>) -> tensor<?x113x113x?xf32> loc(#loc4009)
      %outputs_22, %control_23 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_20, %arg21) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_layer_call_and_return_conditional_losses_91080} : (tensor<?x113x113x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4010)
      %outputs_24, %control_25 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_22, %arg22, %arg23, %arg24, %arg25) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_59170} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4011)
      %outputs_26, %control_27 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_24) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_relu_layer_call_and_return_conditional_losses_91260} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4012)
      %outputs_28, %control_29 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_26, %arg26) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_project_layer_call_and_return_conditional_losses_91350} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4013)
      %outputs_30, %control_31 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_28, %arg27, %arg28, %arg29, %arg30) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_project_BN_layer_call_and_return_conditional_losses_59810} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4014)
      %outputs_32, %control_33 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_30, %arg31) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_layer_call_and_return_conditional_losses_91550} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4015)
      %outputs_34, %control_35 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_32, %arg32, %arg33, %arg34, %arg35) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_60450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4016)
      %outputs_36, %control_37 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_34) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_relu_layer_call_and_return_conditional_losses_91730} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4017)
      %outputs_38, %control_39 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_36, %arg36) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_layer_call_and_return_conditional_losses_91840} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4018)
      %outputs_40, %control_41 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_38, %arg37, %arg38, %arg39, %arg40) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_61090} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4019)
      %outputs_42, %control_43 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_40) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_relu_layer_call_and_return_conditional_losses_92020} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4020)
      %outputs_44, %control_45 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_42, %arg41) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_project_layer_call_and_return_conditional_losses_92110} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4021)
      %outputs_46, %control_47 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_44, %arg42, %arg43, %arg44, %arg45) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_project_BN_layer_call_and_return_conditional_losses_61730} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4022)
      %outputs_48, %control_49 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_30, %outputs_46) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_add_layer_call_and_return_conditional_losses_92300} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4023)
      %outputs_50, %control_51 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_48, %arg46) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_layer_call_and_return_conditional_losses_92390} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4024)
      %outputs_52, %control_53 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_50, %arg47, %arg48, %arg49, %arg50) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_62370} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4025)
      %outputs_54, %control_55 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_52) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_relu_layer_call_and_return_conditional_losses_92570} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4026)
      %outputs_56, %control_57 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_54) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_pad_layer_call_and_return_conditional_losses_62580} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4027)
      %outputs_58, %control_59 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_56, %arg51) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_layer_call_and_return_conditional_losses_92690} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4028)
      %outputs_60, %control_61 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_58, %arg52, %arg53, %arg54, %arg55) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_63140} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4029)
      %outputs_62, %control_63 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_60) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_relu_layer_call_and_return_conditional_losses_92870} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4030)
      %outputs_64, %control_65 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_62, %arg56) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_project_layer_call_and_return_conditional_losses_92960} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4031)
      %outputs_66, %control_67 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_64, %arg57, %arg58, %arg59, %arg60) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_project_BN_layer_call_and_return_conditional_losses_63780} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4032)
      %outputs_68, %control_69 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_66, %arg61) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_layer_call_and_return_conditional_losses_93160} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4033)
      %outputs_70, %control_71 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_68, %arg62, %arg63, %arg64, %arg65) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_64420} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4034)
      %outputs_72, %control_73 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_70) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_relu_layer_call_and_return_conditional_losses_93340} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4035)
      %outputs_74, %control_75 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_72, %arg66) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_layer_call_and_return_conditional_losses_93450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4036)
      %outputs_76, %control_77 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_74, %arg67, %arg68, %arg69, %arg70) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_65060} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4037)
      %outputs_78, %control_79 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_76) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_relu_layer_call_and_return_conditional_losses_93630} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4038)
      %outputs_80, %control_81 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_78, %arg71) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_project_layer_call_and_return_conditional_losses_93720} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4039)
      %outputs_82, %control_83 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_80, %arg72, %arg73, %arg74, %arg75) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_project_BN_layer_call_and_return_conditional_losses_65700} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4040)
      %outputs_84, %control_85 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_66, %outputs_82) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_add_layer_call_and_return_conditional_losses_93910} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4041)
      %outputs_86, %control_87 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_84, %arg76) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_layer_call_and_return_conditional_losses_94000} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4042)
      %outputs_88, %control_89 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_86, %arg77, %arg78, %arg79, %arg80) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_66340} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4043)
      %outputs_90, %control_91 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_88) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_relu_layer_call_and_return_conditional_losses_94180} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4044)
      %outputs_92, %control_93 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_90, %arg81) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_layer_call_and_return_conditional_losses_94290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4045)
      %outputs_94, %control_95 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_92, %arg82, %arg83, %arg84, %arg85) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_66980} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4046)
      %outputs_96, %control_97 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_94) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_relu_layer_call_and_return_conditional_losses_94470} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4047)
      %outputs_98, %control_99 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_96, %arg86) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_project_layer_call_and_return_conditional_losses_94560} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4048)
      %outputs_100, %control_101 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_98, %arg87, %arg88, %arg89, %arg90) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_project_BN_layer_call_and_return_conditional_losses_67620} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4049)
      %outputs_102, %control_103 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_84, %outputs_100) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_add_layer_call_and_return_conditional_losses_94750} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4050)
      %outputs_104, %control_105 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_102, %arg91) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_layer_call_and_return_conditional_losses_94840} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4051)
      %outputs_106, %control_107 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_104, %arg92, %arg93, %arg94, %arg95) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_68260} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4052)
      %outputs_108, %control_109 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_106) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_relu_layer_call_and_return_conditional_losses_95020} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4053)
      %outputs_110, %control_111 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_108) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_pad_layer_call_and_return_conditional_losses_68470} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4054)
      %outputs_112, %control_113 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_110, %arg96) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_layer_call_and_return_conditional_losses_95140} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4055)
      %outputs_114, %control_115 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_112, %arg97, %arg98, %arg99, %arg100) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_69030} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4056)
      %outputs_116, %control_117 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_114) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_relu_layer_call_and_return_conditional_losses_95320} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4057)
      %outputs_118, %control_119 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_116, %arg101) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_project_layer_call_and_return_conditional_losses_95410} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4058)
      %outputs_120, %control_121 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_118, %arg102, %arg103, %arg104, %arg105) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_project_BN_layer_call_and_return_conditional_losses_69670} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4059)
      %outputs_122, %control_123 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_120, %arg106) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_layer_call_and_return_conditional_losses_95610} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4060)
      %outputs_124, %control_125 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_122, %arg107, %arg108, %arg109, %arg110) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_70310} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4061)
      %outputs_126, %control_127 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_124) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_relu_layer_call_and_return_conditional_losses_95790} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4062)
      %outputs_128, %control_129 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_126, %arg111) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_layer_call_and_return_conditional_losses_95900} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4063)
      %outputs_130, %control_131 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_128, %arg112, %arg113, %arg114, %arg115) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_70950} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4064)
      %outputs_132, %control_133 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_130) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_relu_layer_call_and_return_conditional_losses_96080} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4065)
      %outputs_134, %control_135 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_132, %arg116) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_project_layer_call_and_return_conditional_losses_96170} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4066)
      %outputs_136, %control_137 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_134, %arg117, %arg118, %arg119, %arg120) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_project_BN_layer_call_and_return_conditional_losses_71590} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4067)
      %outputs_138, %control_139 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_120, %outputs_136) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_add_layer_call_and_return_conditional_losses_96360} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4068)
      %outputs_140, %control_141 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_138, %arg121) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_layer_call_and_return_conditional_losses_96450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4069)
      %outputs_142, %control_143 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_140, %arg122, %arg123, %arg124, %arg125) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_72230} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4070)
      %outputs_144, %control_145 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_142) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_relu_layer_call_and_return_conditional_losses_96630} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4071)
      %outputs_146, %control_147 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_144, %arg126) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_layer_call_and_return_conditional_losses_96740} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4072)
      %outputs_148, %control_149 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_146, %arg127, %arg128, %arg129, %arg130) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_72870} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4073)
      %outputs_150, %control_151 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_148) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_relu_layer_call_and_return_conditional_losses_96920} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4074)
      %outputs_152, %control_153 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_150, %arg131) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_project_layer_call_and_return_conditional_losses_97010} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4075)
      %outputs_154, %control_155 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_152, %arg132, %arg133, %arg134, %arg135) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_project_BN_layer_call_and_return_conditional_losses_73510} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4076)
      %outputs_156, %control_157 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_138, %outputs_154) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_add_layer_call_and_return_conditional_losses_97200} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4077)
      %outputs_158, %control_159 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_156, %arg136) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_layer_call_and_return_conditional_losses_97290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4078)
      %outputs_160, %control_161 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_158, %arg137, %arg138, %arg139, %arg140) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_74150} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4079)
      %outputs_162, %control_163 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_160) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_relu_layer_call_and_return_conditional_losses_97470} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4080)
      %outputs_164, %control_165 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_162, %arg141) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_layer_call_and_return_conditional_losses_97580} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4081)
      %outputs_166, %control_167 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_164, %arg142, %arg143, %arg144, %arg145) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_74790} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4082)
      %outputs_168, %control_169 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_166) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_relu_layer_call_and_return_conditional_losses_97760} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4083)
      %outputs_170, %control_171 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_168, %arg146) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_project_layer_call_and_return_conditional_losses_97850} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4084)
      %outputs_172, %control_173 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_170, %arg147, %arg148, %arg149, %arg150) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_project_BN_layer_call_and_return_conditional_losses_75430} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4085)
      %outputs_174, %control_175 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_156, %outputs_172) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_add_layer_call_and_return_conditional_losses_98040} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4086)
      %outputs_176, %control_177 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_174, %arg151) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_layer_call_and_return_conditional_losses_98130} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4087)
      %outputs_178, %control_179 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_176, %arg152, %arg153, %arg154, %arg155) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_76070} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4088)
      %outputs_180, %control_181 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_178) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_relu_layer_call_and_return_conditional_losses_98310} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4089)
      %outputs_182, %control_183 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_180, %arg156) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_layer_call_and_return_conditional_losses_98420} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4090)
      %outputs_184, %control_185 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_182, %arg157, %arg158, %arg159, %arg160) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_76710} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4091)
      %outputs_186, %control_187 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_184) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_relu_layer_call_and_return_conditional_losses_98600} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4092)
      %outputs_188, %control_189 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_186, %arg161) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_project_layer_call_and_return_conditional_losses_98690} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4093)
      %outputs_190, %control_191 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_188, %arg162, %arg163, %arg164, %arg165) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_project_BN_layer_call_and_return_conditional_losses_77350} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4094)
      %outputs_192, %control_193 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_190, %arg166) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_layer_call_and_return_conditional_losses_98890} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4095)
      %outputs_194, %control_195 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_192, %arg167, %arg168, %arg169, %arg170) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_77990} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4096)
      %outputs_196, %control_197 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_194) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_relu_layer_call_and_return_conditional_losses_99070} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4097)
      %outputs_198, %control_199 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_196, %arg171) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_layer_call_and_return_conditional_losses_99180} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4098)
      %outputs_200, %control_201 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_198, %arg172, %arg173, %arg174, %arg175) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_78630} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4099)
      %outputs_202, %control_203 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_200) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_relu_layer_call_and_return_conditional_losses_99360} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4100)
      %outputs_204, %control_205 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_202, %arg176) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_project_layer_call_and_return_conditional_losses_99450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4101)
      %outputs_206, %control_207 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_204, %arg177, %arg178, %arg179, %arg180) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_project_BN_layer_call_and_return_conditional_losses_79270} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4102)
      %outputs_208, %control_209 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_190, %outputs_206) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_add_layer_call_and_return_conditional_losses_99640} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4103)
      %outputs_210, %control_211 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_208, %arg181) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_layer_call_and_return_conditional_losses_99730} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4104)
      %outputs_212, %control_213 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_210, %arg182, %arg183, %arg184, %arg185) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_79910} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4105)
      %outputs_214, %control_215 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_212) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_relu_layer_call_and_return_conditional_losses_99910} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4106)
      %outputs_216, %control_217 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_214, %arg186) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_layer_call_and_return_conditional_losses_100020} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4107)
      %outputs_218, %control_219 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_216, %arg187, %arg188, %arg189, %arg190) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_80550} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4108)
      %outputs_220, %control_221 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_218) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_relu_layer_call_and_return_conditional_losses_100200} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4109)
      %outputs_222, %control_223 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_220, %arg191) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_project_layer_call_and_return_conditional_losses_100290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4110)
      %outputs_224, %control_225 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_222, %arg192, %arg193, %arg194, %arg195) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_project_BN_layer_call_and_return_conditional_losses_81190} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4111)
      %outputs_226, %control_227 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_208, %outputs_224) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_add_layer_call_and_return_conditional_losses_100480} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4112)
      %outputs_228, %control_229 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_226, %arg196) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_layer_call_and_return_conditional_losses_100570} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4113)
      %outputs_230, %control_231 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_228, %arg197, %arg198, %arg199, %arg200) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_81830} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4114)
      %outputs_232, %control_233 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_230) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_relu_layer_call_and_return_conditional_losses_100750} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4115)
      %outputs_234, %control_235 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_232) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_pad_layer_call_and_return_conditional_losses_82040} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4116)
      %outputs_236, %control_237 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_234, %arg201) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_layer_call_and_return_conditional_losses_100870} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4117)
      %outputs_238, %control_239 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_236, %arg202, %arg203, %arg204, %arg205) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_82600} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4118)
      %outputs_240, %control_241 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_238) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_relu_layer_call_and_return_conditional_losses_101050} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4119)
      %outputs_242, %control_243 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_240, %arg206) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_project_layer_call_and_return_conditional_losses_101140} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4120)
      %outputs_244, %control_245 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_242, %arg207, %arg208, %arg209, %arg210) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_project_BN_layer_call_and_return_conditional_losses_83240} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4121)
      %outputs_246, %control_247 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_244, %arg211) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_layer_call_and_return_conditional_losses_101340} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4122)
      %outputs_248, %control_249 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_246, %arg212, %arg213, %arg214, %arg215) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_83880} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4123)
      %outputs_250, %control_251 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_248) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_relu_layer_call_and_return_conditional_losses_101520} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4124)
      %outputs_252, %control_253 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_250, %arg216) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_layer_call_and_return_conditional_losses_101630} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4125)
      %outputs_254, %control_255 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_252, %arg217, %arg218, %arg219, %arg220) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_84520} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4126)
      %outputs_256, %control_257 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_254) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_relu_layer_call_and_return_conditional_losses_101810} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4127)
      %outputs_258, %control_259 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_256, %arg221) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_project_layer_call_and_return_conditional_losses_101900} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4128)
      %outputs_260, %control_261 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_258, %arg222, %arg223, %arg224, %arg225) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_project_BN_layer_call_and_return_conditional_losses_85160} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4129)
      %outputs_262, %control_263 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_244, %outputs_260) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_add_layer_call_and_return_conditional_losses_102090} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4130)
      %outputs_264, %control_265 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_262, %arg226) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_layer_call_and_return_conditional_losses_102180} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4131)
      %outputs_266, %control_267 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_264, %arg227, %arg228, %arg229, %arg230) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_85800} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4132)
      %outputs_268, %control_269 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_266) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_relu_layer_call_and_return_conditional_losses_102360} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4133)
      %outputs_270, %control_271 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_268, %arg231) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_layer_call_and_return_conditional_losses_102470} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4134)
      %outputs_272, %control_273 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_270, %arg232, %arg233, %arg234, %arg235) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_86440} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4135)
      %outputs_274, %control_275 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_272) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_relu_layer_call_and_return_conditional_losses_102650} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4136)
      %outputs_276, %control_277 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_274, %arg236) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_project_layer_call_and_return_conditional_losses_102740} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4137)
      %outputs_278, %control_279 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_276, %arg237, %arg238, %arg239, %arg240) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_project_BN_layer_call_and_return_conditional_losses_87080} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4138)
      %outputs_280, %control_281 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_262, %outputs_278) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_add_layer_call_and_return_conditional_losses_102930} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4139)
      %outputs_282, %control_283 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_280, %arg241) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_layer_call_and_return_conditional_losses_103020} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4140)
      %outputs_284, %control_285 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_282, %arg242, %arg243, %arg244, %arg245) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_87720} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4141)
      %outputs_286, %control_287 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_284) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_relu_layer_call_and_return_conditional_losses_103200} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4142)
      %outputs_288, %control_289 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_286, %arg246) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_layer_call_and_return_conditional_losses_103310} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4143)
      %outputs_290, %control_291 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_288, %arg247, %arg248, %arg249, %arg250) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_88360} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4144)
      %outputs_292, %control_293 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_290) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_relu_layer_call_and_return_conditional_losses_103490} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4145)
      %outputs_294, %control_295 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_292, %arg251) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_project_layer_call_and_return_conditional_losses_103580} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4146)
      %outputs_296, %control_297 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_294, %arg252, %arg253, %arg254, %arg255) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_project_BN_layer_call_and_return_conditional_losses_89000} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4147)
      %outputs_298, %control_299 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_296, %arg256) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv_1_layer_call_and_return_conditional_losses_103780} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4148)
      %outputs_300, %control_301 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_298, %arg257, %arg258, %arg259, %arg260) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv_1_bn_layer_call_and_return_conditional_losses_89640} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4149)
      %outputs_302, %control_303 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_300) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_out_relu_layer_call_and_return_conditional_losses_103960} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4150)
      %outputs_304, %control_305 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_302) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_global_average_pooling2d_layer_call_and_return_conditional_losses_89850} : (tensor<?x?x?x?xf32>) -> tensor<?x?xf32> loc(#loc4151)
      %outputs_306, %control_307 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_304, %arg261, %arg262) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_predictions_layer_call_and_return_conditional_losses_104100} : (tensor<?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?xf32> loc(#loc4152)
      %control_308 = tf_executor.island(%control, %control_1, %control_5, %control_7, %control_11, %control_13, %control_15, %control_17, %control_23, %control_25, %control_29, %control_31, %control_33, %control_35, %control_39, %control_41, %control_45, %control_47, %control_51, %control_53, %control_59, %control_61, %control_65, %control_67, %control_69, %control_71, %control_75, %control_77, %control_81, %control_83, %control_87, %control_89, %control_93, %control_95, %control_99, %control_101, %control_105, %control_107, %control_113, %control_115, %control_119, %control_121, %control_123, %control_125, %control_129, %control_131, %control_135, %control_137, %control_141, %control_143, %control_147, %control_149, %control_153, %control_155, %control_159, %control_161, %control_165, %control_167, %control_171, %control_173, %control_177, %control_179, %control_183, %control_185, %control_189, %control_191, %control_193, %control_195, %control_199, %control_201, %control_205, %control_207, %control_211, %control_213, %control_217, %control_219, %control_223, %control_225, %control_229, %control_231, %control_237, %control_239, %control_243, %control_245, %control_247, %control_249, %control_253, %control_255, %control_259, %control_261, %control_265, %control_267, %control_271, %control_273, %control_277, %control_279, %control_283, %control_285, %control_289, %control_291, %control_295, %control_297, %control_299, %control_301, %control_307) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc4153)
      %outputs_309, %control_310 = tf_executor.island(%control_308) wraps "tf.Identity"(%outputs_306) {device = ""} : (tensor<?x?xf32>) -> tensor<?x?xf32> loc(#loc4154)
      tf_executor.fetch %outputs_309, %control, %control_1, %control_5, %control_7, %control_11, %control_13, %control_15, %control_17, %control_23, %control_25, %control_29, %control_31, %control_33, %control_35, %control_39, %control_41, %control_45, %control_47, %control_51, %control_53, %control_59, %control_61, %control_65, %control_67, %control_69, %control_71, %control_75, %control_77, %control_81, %control_83, %control_87, %control_89, %control_93, %control_95, %control_99, %control_101, %control_105, %control_107, %control_113, %control_115, %control_119, %control_121, %control_123, %control_125, %control_129, %control_131, %control_135, %control_137, %control_141, %control_143, %control_147, %control_149, %control_153, %control_155, %control_159, %control_161, %control_165, %control_167, %control_171, %control_173, %control_177, %control_179, %control_183, %control_185, %control_189, %control_191, %control_193, %control_195, %control_199, %control_201, %control_205, %control_207, %control_211, %control_213, %control_217, %control_219, %control_223, %control_225, %control_229, %control_231, %control_237, %control_239, %control_243, %control_245, %control_247, %control_249, %control_253, %control_255, %control_259, %control_261, %control_265, %control_267, %control_271, %control_273, %control_277, %control_279, %control_283, %control_285, %control_289, %control_291, %control_295, %control_297, %control_299, %control_301, %control_307 : tensor<?x?xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_146030(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "input_1"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown), %arg5: tensor<!tf_type.resource> loc(unknown), %arg6: tensor<!tf_type.resource> loc(unknown), %arg7: tensor<!tf_type.resource> loc(unknown), %arg8: tensor<!tf_type.resource> loc(unknown), %arg9: tensor<!tf_type.resource> loc(unknown), %arg10: tensor<!tf_type.resource> loc(unknown), %arg11: tensor<!tf_type.resource> loc(unknown), %arg12: tensor<!tf_type.resource> loc(unknown), %arg13: tensor<!tf_type.resource> loc(unknown), %arg14: tensor<!tf_type.resource> loc(unknown), %arg15: tensor<!tf_type.resource> loc(unknown), %arg16: tensor<!tf_type.resource> loc(unknown), %arg17: tensor<!tf_type.resource> loc(unknown), %arg18: tensor<!tf_type.resource> loc(unknown), %arg19: tensor<!tf_type.resource> loc(unknown), %arg20: tensor<!tf_type.resource> loc(unknown), %arg21: tensor<!tf_type.resource> loc(unknown), %arg22: tensor<!tf_type.resource> loc(unknown), %arg23: tensor<!tf_type.resource> loc(unknown), %arg24: tensor<!tf_type.resource> loc(unknown), %arg25: tensor<!tf_type.resource> loc(unknown), %arg26: tensor<!tf_type.resource> loc(unknown), %arg27: tensor<!tf_type.resource> loc(unknown), %arg28: tensor<!tf_type.resource> loc(unknown), %arg29: tensor<!tf_type.resource> loc(unknown), %arg30: tensor<!tf_type.resource> loc(unknown), %arg31: tensor<!tf_type.resource> loc(unknown), %arg32: tensor<!tf_type.resource> loc(unknown), %arg33: tensor<!tf_type.resource> loc(unknown), %arg34: tensor<!tf_type.resource> loc(unknown), %arg35: tensor<!tf_type.resource> loc(unknown), %arg36: tensor<!tf_type.resource> loc(unknown), %arg37: tensor<!tf_type.resource> loc(unknown), %arg38: tensor<!tf_type.resource> loc(unknown), %arg39: tensor<!tf_type.resource> loc(unknown), %arg40: tensor<!tf_type.resource> loc(unknown), %arg41: tensor<!tf_type.resource> loc(unknown), %arg42: tensor<!tf_type.resource> loc(unknown), %arg43: tensor<!tf_type.resource> loc(unknown), %arg44: tensor<!tf_type.resource> loc(unknown), %arg45: tensor<!tf_type.resource> loc(unknown), %arg46: tensor<!tf_type.resource> loc(unknown), %arg47: tensor<!tf_type.resource> loc(unknown), %arg48: tensor<!tf_type.resource> loc(unknown), %arg49: tensor<!tf_type.resource> loc(unknown), %arg50: tensor<!tf_type.resource> loc(unknown), %arg51: tensor<!tf_type.resource> loc(unknown), %arg52: tensor<!tf_type.resource> loc(unknown), %arg53: tensor<!tf_type.resource> loc(unknown), %arg54: tensor<!tf_type.resource> loc(unknown), %arg55: tensor<!tf_type.resource> loc(unknown), %arg56: tensor<!tf_type.resource> loc(unknown), %arg57: tensor<!tf_type.resource> loc(unknown), %arg58: tensor<!tf_type.resource> loc(unknown), %arg59: tensor<!tf_type.resource> loc(unknown), %arg60: tensor<!tf_type.resource> loc(unknown), %arg61: tensor<!tf_type.resource> loc(unknown), %arg62: tensor<!tf_type.resource> loc(unknown), %arg63: tensor<!tf_type.resource> loc(unknown), %arg64: tensor<!tf_type.resource> loc(unknown), %arg65: tensor<!tf_type.resource> loc(unknown), %arg66: tensor<!tf_type.resource> loc(unknown), %arg67: tensor<!tf_type.resource> loc(unknown), %arg68: tensor<!tf_type.resource> loc(unknown), %arg69: tensor<!tf_type.resource> loc(unknown), %arg70: tensor<!tf_type.resource> loc(unknown), %arg71: tensor<!tf_type.resource> loc(unknown), %arg72: tensor<!tf_type.resource> loc(unknown), %arg73: tensor<!tf_type.resource> loc(unknown), %arg74: tensor<!tf_type.resource> loc(unknown), %arg75: tensor<!tf_type.resource> loc(unknown), %arg76: tensor<!tf_type.resource> loc(unknown), %arg77: tensor<!tf_type.resource> loc(unknown), %arg78: tensor<!tf_type.resource> loc(unknown), %arg79: tensor<!tf_type.resource> loc(unknown), %arg80: tensor<!tf_type.resource> loc(unknown), %arg81: tensor<!tf_type.resource> loc(unknown), %arg82: tensor<!tf_type.resource> loc(unknown), %arg83: tensor<!tf_type.resource> loc(unknown), %arg84: tensor<!tf_type.resource> loc(unknown), %arg85: tensor<!tf_type.resource> loc(unknown), %arg86: tensor<!tf_type.resource> loc(unknown), %arg87: tensor<!tf_type.resource> loc(unknown), %arg88: tensor<!tf_type.resource> loc(unknown), %arg89: tensor<!tf_type.resource> loc(unknown), %arg90: tensor<!tf_type.resource> loc(unknown), %arg91: tensor<!tf_type.resource> loc(unknown), %arg92: tensor<!tf_type.resource> loc(unknown), %arg93: tensor<!tf_type.resource> loc(unknown), %arg94: tensor<!tf_type.resource> loc(unknown), %arg95: tensor<!tf_type.resource> loc(unknown), %arg96: tensor<!tf_type.resource> loc(unknown), %arg97: tensor<!tf_type.resource> loc(unknown), %arg98: tensor<!tf_type.resource> loc(unknown), %arg99: tensor<!tf_type.resource> loc(unknown), %arg100: tensor<!tf_type.resource> loc(unknown), %arg101: tensor<!tf_type.resource> loc(unknown), %arg102: tensor<!tf_type.resource> loc(unknown), %arg103: tensor<!tf_type.resource> loc(unknown), %arg104: tensor<!tf_type.resource> loc(unknown), %arg105: tensor<!tf_type.resource> loc(unknown), %arg106: tensor<!tf_type.resource> loc(unknown), %arg107: tensor<!tf_type.resource> loc(unknown), %arg108: tensor<!tf_type.resource> loc(unknown), %arg109: tensor<!tf_type.resource> loc(unknown), %arg110: tensor<!tf_type.resource> loc(unknown), %arg111: tensor<!tf_type.resource> loc(unknown), %arg112: tensor<!tf_type.resource> loc(unknown), %arg113: tensor<!tf_type.resource> loc(unknown), %arg114: tensor<!tf_type.resource> loc(unknown), %arg115: tensor<!tf_type.resource> loc(unknown), %arg116: tensor<!tf_type.resource> loc(unknown), %arg117: tensor<!tf_type.resource> loc(unknown), %arg118: tensor<!tf_type.resource> loc(unknown), %arg119: tensor<!tf_type.resource> loc(unknown), %arg120: tensor<!tf_type.resource> loc(unknown), %arg121: tensor<!tf_type.resource> loc(unknown), %arg122: tensor<!tf_type.resource> loc(unknown), %arg123: tensor<!tf_type.resource> loc(unknown), %arg124: tensor<!tf_type.resource> loc(unknown), %arg125: tensor<!tf_type.resource> loc(unknown), %arg126: tensor<!tf_type.resource> loc(unknown), %arg127: tensor<!tf_type.resource> loc(unknown), %arg128: tensor<!tf_type.resource> loc(unknown), %arg129: tensor<!tf_type.resource> loc(unknown), %arg130: tensor<!tf_type.resource> loc(unknown), %arg131: tensor<!tf_type.resource> loc(unknown), %arg132: tensor<!tf_type.resource> loc(unknown), %arg133: tensor<!tf_type.resource> loc(unknown), %arg134: tensor<!tf_type.resource> loc(unknown), %arg135: tensor<!tf_type.resource> loc(unknown), %arg136: tensor<!tf_type.resource> loc(unknown), %arg137: tensor<!tf_type.resource> loc(unknown), %arg138: tensor<!tf_type.resource> loc(unknown), %arg139: tensor<!tf_type.resource> loc(unknown), %arg140: tensor<!tf_type.resource> loc(unknown), %arg141: tensor<!tf_type.resource> loc(unknown), %arg142: tensor<!tf_type.resource> loc(unknown), %arg143: tensor<!tf_type.resource> loc(unknown), %arg144: tensor<!tf_type.resource> loc(unknown), %arg145: tensor<!tf_type.resource> loc(unknown), %arg146: tensor<!tf_type.resource> loc(unknown), %arg147: tensor<!tf_type.resource> loc(unknown), %arg148: tensor<!tf_type.resource> loc(unknown), %arg149: tensor<!tf_type.resource> loc(unknown), %arg150: tensor<!tf_type.resource> loc(unknown), %arg151: tensor<!tf_type.resource> loc(unknown), %arg152: tensor<!tf_type.resource> loc(unknown), %arg153: tensor<!tf_type.resource> loc(unknown), %arg154: tensor<!tf_type.resource> loc(unknown), %arg155: tensor<!tf_type.resource> loc(unknown), %arg156: tensor<!tf_type.resource> loc(unknown), %arg157: tensor<!tf_type.resource> loc(unknown), %arg158: tensor<!tf_type.resource> loc(unknown), %arg159: tensor<!tf_type.resource> loc(unknown), %arg160: tensor<!tf_type.resource> loc(unknown), %arg161: tensor<!tf_type.resource> loc(unknown), %arg162: tensor<!tf_type.resource> loc(unknown), %arg163: tensor<!tf_type.resource> loc(unknown), %arg164: tensor<!tf_type.resource> loc(unknown), %arg165: tensor<!tf_type.resource> loc(unknown), %arg166: tensor<!tf_type.resource> loc(unknown), %arg167: tensor<!tf_type.resource> loc(unknown), %arg168: tensor<!tf_type.resource> loc(unknown), %arg169: tensor<!tf_type.resource> loc(unknown), %arg170: tensor<!tf_type.resource> loc(unknown), %arg171: tensor<!tf_type.resource> loc(unknown), %arg172: tensor<!tf_type.resource> loc(unknown), %arg173: tensor<!tf_type.resource> loc(unknown), %arg174: tensor<!tf_type.resource> loc(unknown), %arg175: tensor<!tf_type.resource> loc(unknown), %arg176: tensor<!tf_type.resource> loc(unknown), %arg177: tensor<!tf_type.resource> loc(unknown), %arg178: tensor<!tf_type.resource> loc(unknown), %arg179: tensor<!tf_type.resource> loc(unknown), %arg180: tensor<!tf_type.resource> loc(unknown), %arg181: tensor<!tf_type.resource> loc(unknown), %arg182: tensor<!tf_type.resource> loc(unknown), %arg183: tensor<!tf_type.resource> loc(unknown), %arg184: tensor<!tf_type.resource> loc(unknown), %arg185: tensor<!tf_type.resource> loc(unknown), %arg186: tensor<!tf_type.resource> loc(unknown), %arg187: tensor<!tf_type.resource> loc(unknown), %arg188: tensor<!tf_type.resource> loc(unknown), %arg189: tensor<!tf_type.resource> loc(unknown), %arg190: tensor<!tf_type.resource> loc(unknown), %arg191: tensor<!tf_type.resource> loc(unknown), %arg192: tensor<!tf_type.resource> loc(unknown), %arg193: tensor<!tf_type.resource> loc(unknown), %arg194: tensor<!tf_type.resource> loc(unknown), %arg195: tensor<!tf_type.resource> loc(unknown), %arg196: tensor<!tf_type.resource> loc(unknown), %arg197: tensor<!tf_type.resource> loc(unknown), %arg198: tensor<!tf_type.resource> loc(unknown), %arg199: tensor<!tf_type.resource> loc(unknown), %arg200: tensor<!tf_type.resource> loc(unknown), %arg201: tensor<!tf_type.resource> loc(unknown), %arg202: tensor<!tf_type.resource> loc(unknown), %arg203: tensor<!tf_type.resource> loc(unknown), %arg204: tensor<!tf_type.resource> loc(unknown), %arg205: tensor<!tf_type.resource> loc(unknown), %arg206: tensor<!tf_type.resource> loc(unknown), %arg207: tensor<!tf_type.resource> loc(unknown), %arg208: tensor<!tf_type.resource> loc(unknown), %arg209: tensor<!tf_type.resource> loc(unknown), %arg210: tensor<!tf_type.resource> loc(unknown), %arg211: tensor<!tf_type.resource> loc(unknown), %arg212: tensor<!tf_type.resource> loc(unknown), %arg213: tensor<!tf_type.resource> loc(unknown), %arg214: tensor<!tf_type.resource> loc(unknown), %arg215: tensor<!tf_type.resource> loc(unknown), %arg216: tensor<!tf_type.resource> loc(unknown), %arg217: tensor<!tf_type.resource> loc(unknown), %arg218: tensor<!tf_type.resource> loc(unknown), %arg219: tensor<!tf_type.resource> loc(unknown), %arg220: tensor<!tf_type.resource> loc(unknown), %arg221: tensor<!tf_type.resource> loc(unknown), %arg222: tensor<!tf_type.resource> loc(unknown), %arg223: tensor<!tf_type.resource> loc(unknown), %arg224: tensor<!tf_type.resource> loc(unknown), %arg225: tensor<!tf_type.resource> loc(unknown), %arg226: tensor<!tf_type.resource> loc(unknown), %arg227: tensor<!tf_type.resource> loc(unknown), %arg228: tensor<!tf_type.resource> loc(unknown), %arg229: tensor<!tf_type.resource> loc(unknown), %arg230: tensor<!tf_type.resource> loc(unknown), %arg231: tensor<!tf_type.resource> loc(unknown), %arg232: tensor<!tf_type.resource> loc(unknown), %arg233: tensor<!tf_type.resource> loc(unknown), %arg234: tensor<!tf_type.resource> loc(unknown), %arg235: tensor<!tf_type.resource> loc(unknown), %arg236: tensor<!tf_type.resource> loc(unknown), %arg237: tensor<!tf_type.resource> loc(unknown), %arg238: tensor<!tf_type.resource> loc(unknown), %arg239: tensor<!tf_type.resource> loc(unknown), %arg240: tensor<!tf_type.resource> loc(unknown), %arg241: tensor<!tf_type.resource> loc(unknown), %arg242: tensor<!tf_type.resource> loc(unknown), %arg243: tensor<!tf_type.resource> loc(unknown), %arg244: tensor<!tf_type.resource> loc(unknown), %arg245: tensor<!tf_type.resource> loc(unknown), %arg246: tensor<!tf_type.resource> loc(unknown), %arg247: tensor<!tf_type.resource> loc(unknown), %arg248: tensor<!tf_type.resource> loc(unknown), %arg249: tensor<!tf_type.resource> loc(unknown), %arg250: tensor<!tf_type.resource> loc(unknown), %arg251: tensor<!tf_type.resource> loc(unknown), %arg252: tensor<!tf_type.resource> loc(unknown), %arg253: tensor<!tf_type.resource> loc(unknown), %arg254: tensor<!tf_type.resource> loc(unknown), %arg255: tensor<!tf_type.resource> loc(unknown), %arg256: tensor<!tf_type.resource> loc(unknown), %arg257: tensor<!tf_type.resource> loc(unknown), %arg258: tensor<!tf_type.resource> loc(unknown), %arg259: tensor<!tf_type.resource> loc(unknown), %arg260: tensor<!tf_type.resource> loc(unknown), %arg261: tensor<!tf_type.resource> loc(unknown), %arg262: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv1_layer_call_and_return_conditional_losses_90020} : (tensor<?x224x224x3xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4155)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs, %arg2, %arg3, %arg4, %arg5) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_bn_Conv1_layer_call_and_return_conditional_losses_56170} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4156)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv1_relu_layer_call_and_return_conditional_losses_90200} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc4157)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_2, %arg6) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_90310} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4158)
      %outputs_6, %control_7 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_4, %arg7, %arg8, %arg9, %arg10) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_56810} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4159)
      %outputs_8, %control_9 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_6) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_relu_layer_call_and_return_conditional_losses_90490} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc4160)
      %outputs_10, %control_11 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_8, %arg11) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_project_layer_call_and_return_conditional_losses_90580} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4161)
      %outputs_12, %control_13 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_10, %arg12, %arg13, %arg14, %arg15) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_57450} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4162)
      %outputs_14, %control_15 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_12, %arg16) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_layer_call_and_return_conditional_losses_90780} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4163)
      %outputs_16, %control_17 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_14, %arg17, %arg18, %arg19, %arg20) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_58090} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4164)
      %outputs_18, %control_19 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_16) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_relu_layer_call_and_return_conditional_losses_90960} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc4165)
      %outputs_20, %control_21 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_18) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_pad_layer_call_and_return_conditional_losses_58610} : (tensor<?x112x112x?xf32>) -> tensor<?x113x113x?xf32> loc(#loc4166)
      %outputs_22, %control_23 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_20, %arg21) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_layer_call_and_return_conditional_losses_91080} : (tensor<?x113x113x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4167)
      %outputs_24, %control_25 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_22, %arg22, %arg23, %arg24, %arg25) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_58860} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4168)
      %outputs_26, %control_27 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_24) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_relu_layer_call_and_return_conditional_losses_91260} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4169)
      %outputs_28, %control_29 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_26, %arg26) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_project_layer_call_and_return_conditional_losses_91350} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4170)
      %outputs_30, %control_31 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_28, %arg27, %arg28, %arg29, %arg30) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_project_BN_layer_call_and_return_conditional_losses_59500} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4171)
      %outputs_32, %control_33 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_30, %arg31) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_layer_call_and_return_conditional_losses_91550} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4172)
      %outputs_34, %control_35 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_32, %arg32, %arg33, %arg34, %arg35) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_60140} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4173)
      %outputs_36, %control_37 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_34) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_relu_layer_call_and_return_conditional_losses_91730} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4174)
      %outputs_38, %control_39 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_36, %arg36) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_layer_call_and_return_conditional_losses_91840} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4175)
      %outputs_40, %control_41 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_38, %arg37, %arg38, %arg39, %arg40) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_60780} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4176)
      %outputs_42, %control_43 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_40) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_relu_layer_call_and_return_conditional_losses_92020} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4177)
      %outputs_44, %control_45 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_42, %arg41) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_project_layer_call_and_return_conditional_losses_92110} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4178)
      %outputs_46, %control_47 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_44, %arg42, %arg43, %arg44, %arg45) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_project_BN_layer_call_and_return_conditional_losses_61420} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4179)
      %outputs_48, %control_49 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_30, %outputs_46) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_add_layer_call_and_return_conditional_losses_92300} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4180)
      %outputs_50, %control_51 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_48, %arg46) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_layer_call_and_return_conditional_losses_92390} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4181)
      %outputs_52, %control_53 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_50, %arg47, %arg48, %arg49, %arg50) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_62060} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4182)
      %outputs_54, %control_55 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_52) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_relu_layer_call_and_return_conditional_losses_92570} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4183)
      %outputs_56, %control_57 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_54) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_pad_layer_call_and_return_conditional_losses_62580} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4184)
      %outputs_58, %control_59 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_56, %arg51) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_layer_call_and_return_conditional_losses_92690} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4185)
      %outputs_60, %control_61 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_58, %arg52, %arg53, %arg54, %arg55) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_62830} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4186)
      %outputs_62, %control_63 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_60) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_relu_layer_call_and_return_conditional_losses_92870} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4187)
      %outputs_64, %control_65 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_62, %arg56) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_project_layer_call_and_return_conditional_losses_92960} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4188)
      %outputs_66, %control_67 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_64, %arg57, %arg58, %arg59, %arg60) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_project_BN_layer_call_and_return_conditional_losses_63470} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4189)
      %outputs_68, %control_69 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_66, %arg61) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_layer_call_and_return_conditional_losses_93160} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4190)
      %outputs_70, %control_71 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_68, %arg62, %arg63, %arg64, %arg65) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_64110} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4191)
      %outputs_72, %control_73 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_70) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_relu_layer_call_and_return_conditional_losses_93340} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4192)
      %outputs_74, %control_75 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_72, %arg66) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_layer_call_and_return_conditional_losses_93450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4193)
      %outputs_76, %control_77 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_74, %arg67, %arg68, %arg69, %arg70) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_64750} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4194)
      %outputs_78, %control_79 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_76) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_relu_layer_call_and_return_conditional_losses_93630} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4195)
      %outputs_80, %control_81 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_78, %arg71) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_project_layer_call_and_return_conditional_losses_93720} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4196)
      %outputs_82, %control_83 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_80, %arg72, %arg73, %arg74, %arg75) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_project_BN_layer_call_and_return_conditional_losses_65390} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4197)
      %outputs_84, %control_85 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_66, %outputs_82) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_add_layer_call_and_return_conditional_losses_93910} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4198)
      %outputs_86, %control_87 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_84, %arg76) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_layer_call_and_return_conditional_losses_94000} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4199)
      %outputs_88, %control_89 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_86, %arg77, %arg78, %arg79, %arg80) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_66030} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4200)
      %outputs_90, %control_91 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_88) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_relu_layer_call_and_return_conditional_losses_94180} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4201)
      %outputs_92, %control_93 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_90, %arg81) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_layer_call_and_return_conditional_losses_94290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4202)
      %outputs_94, %control_95 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_92, %arg82, %arg83, %arg84, %arg85) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_66670} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4203)
      %outputs_96, %control_97 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_94) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_relu_layer_call_and_return_conditional_losses_94470} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4204)
      %outputs_98, %control_99 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_96, %arg86) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_project_layer_call_and_return_conditional_losses_94560} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4205)
      %outputs_100, %control_101 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_98, %arg87, %arg88, %arg89, %arg90) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_project_BN_layer_call_and_return_conditional_losses_67310} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4206)
      %outputs_102, %control_103 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_84, %outputs_100) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_add_layer_call_and_return_conditional_losses_94750} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4207)
      %outputs_104, %control_105 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_102, %arg91) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_layer_call_and_return_conditional_losses_94840} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4208)
      %outputs_106, %control_107 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_104, %arg92, %arg93, %arg94, %arg95) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_67950} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4209)
      %outputs_108, %control_109 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_106) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_relu_layer_call_and_return_conditional_losses_95020} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4210)
      %outputs_110, %control_111 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_108) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_pad_layer_call_and_return_conditional_losses_68470} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4211)
      %outputs_112, %control_113 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_110, %arg96) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_layer_call_and_return_conditional_losses_95140} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4212)
      %outputs_114, %control_115 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_112, %arg97, %arg98, %arg99, %arg100) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_68720} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4213)
      %outputs_116, %control_117 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_114) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_relu_layer_call_and_return_conditional_losses_95320} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4214)
      %outputs_118, %control_119 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_116, %arg101) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_project_layer_call_and_return_conditional_losses_95410} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4215)
      %outputs_120, %control_121 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_118, %arg102, %arg103, %arg104, %arg105) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_project_BN_layer_call_and_return_conditional_losses_69360} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4216)
      %outputs_122, %control_123 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_120, %arg106) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_layer_call_and_return_conditional_losses_95610} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4217)
      %outputs_124, %control_125 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_122, %arg107, %arg108, %arg109, %arg110) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_70000} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4218)
      %outputs_126, %control_127 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_124) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_relu_layer_call_and_return_conditional_losses_95790} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4219)
      %outputs_128, %control_129 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_126, %arg111) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_layer_call_and_return_conditional_losses_95900} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4220)
      %outputs_130, %control_131 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_128, %arg112, %arg113, %arg114, %arg115) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_70640} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4221)
      %outputs_132, %control_133 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_130) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_relu_layer_call_and_return_conditional_losses_96080} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4222)
      %outputs_134, %control_135 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_132, %arg116) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_project_layer_call_and_return_conditional_losses_96170} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4223)
      %outputs_136, %control_137 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_134, %arg117, %arg118, %arg119, %arg120) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_project_BN_layer_call_and_return_conditional_losses_71280} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4224)
      %outputs_138, %control_139 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_120, %outputs_136) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_add_layer_call_and_return_conditional_losses_96360} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4225)
      %outputs_140, %control_141 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_138, %arg121) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_layer_call_and_return_conditional_losses_96450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4226)
      %outputs_142, %control_143 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_140, %arg122, %arg123, %arg124, %arg125) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_71920} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4227)
      %outputs_144, %control_145 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_142) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_relu_layer_call_and_return_conditional_losses_96630} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4228)
      %outputs_146, %control_147 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_144, %arg126) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_layer_call_and_return_conditional_losses_96740} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4229)
      %outputs_148, %control_149 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_146, %arg127, %arg128, %arg129, %arg130) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_72560} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4230)
      %outputs_150, %control_151 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_148) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_relu_layer_call_and_return_conditional_losses_96920} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4231)
      %outputs_152, %control_153 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_150, %arg131) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_project_layer_call_and_return_conditional_losses_97010} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4232)
      %outputs_154, %control_155 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_152, %arg132, %arg133, %arg134, %arg135) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_project_BN_layer_call_and_return_conditional_losses_73200} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4233)
      %outputs_156, %control_157 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_138, %outputs_154) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_add_layer_call_and_return_conditional_losses_97200} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4234)
      %outputs_158, %control_159 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_156, %arg136) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_layer_call_and_return_conditional_losses_97290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4235)
      %outputs_160, %control_161 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_158, %arg137, %arg138, %arg139, %arg140) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_73840} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4236)
      %outputs_162, %control_163 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_160) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_relu_layer_call_and_return_conditional_losses_97470} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4237)
      %outputs_164, %control_165 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_162, %arg141) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_layer_call_and_return_conditional_losses_97580} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4238)
      %outputs_166, %control_167 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_164, %arg142, %arg143, %arg144, %arg145) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_74480} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4239)
      %outputs_168, %control_169 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_166) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_relu_layer_call_and_return_conditional_losses_97760} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4240)
      %outputs_170, %control_171 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_168, %arg146) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_project_layer_call_and_return_conditional_losses_97850} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4241)
      %outputs_172, %control_173 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_170, %arg147, %arg148, %arg149, %arg150) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_project_BN_layer_call_and_return_conditional_losses_75120} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4242)
      %outputs_174, %control_175 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_156, %outputs_172) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_add_layer_call_and_return_conditional_losses_98040} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4243)
      %outputs_176, %control_177 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_174, %arg151) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_layer_call_and_return_conditional_losses_98130} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4244)
      %outputs_178, %control_179 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_176, %arg152, %arg153, %arg154, %arg155) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_75760} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4245)
      %outputs_180, %control_181 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_178) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_relu_layer_call_and_return_conditional_losses_98310} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4246)
      %outputs_182, %control_183 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_180, %arg156) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_layer_call_and_return_conditional_losses_98420} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4247)
      %outputs_184, %control_185 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_182, %arg157, %arg158, %arg159, %arg160) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_76400} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4248)
      %outputs_186, %control_187 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_184) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_relu_layer_call_and_return_conditional_losses_98600} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4249)
      %outputs_188, %control_189 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_186, %arg161) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_project_layer_call_and_return_conditional_losses_98690} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4250)
      %outputs_190, %control_191 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_188, %arg162, %arg163, %arg164, %arg165) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_project_BN_layer_call_and_return_conditional_losses_77040} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4251)
      %outputs_192, %control_193 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_190, %arg166) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_layer_call_and_return_conditional_losses_98890} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4252)
      %outputs_194, %control_195 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_192, %arg167, %arg168, %arg169, %arg170) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_77680} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4253)
      %outputs_196, %control_197 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_194) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_relu_layer_call_and_return_conditional_losses_99070} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4254)
      %outputs_198, %control_199 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_196, %arg171) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_layer_call_and_return_conditional_losses_99180} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4255)
      %outputs_200, %control_201 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_198, %arg172, %arg173, %arg174, %arg175) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_78320} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4256)
      %outputs_202, %control_203 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_200) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_relu_layer_call_and_return_conditional_losses_99360} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4257)
      %outputs_204, %control_205 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_202, %arg176) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_project_layer_call_and_return_conditional_losses_99450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4258)
      %outputs_206, %control_207 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_204, %arg177, %arg178, %arg179, %arg180) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_project_BN_layer_call_and_return_conditional_losses_78960} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4259)
      %outputs_208, %control_209 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_190, %outputs_206) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_add_layer_call_and_return_conditional_losses_99640} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4260)
      %outputs_210, %control_211 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_208, %arg181) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_layer_call_and_return_conditional_losses_99730} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4261)
      %outputs_212, %control_213 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_210, %arg182, %arg183, %arg184, %arg185) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_79600} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4262)
      %outputs_214, %control_215 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_212) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_relu_layer_call_and_return_conditional_losses_99910} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4263)
      %outputs_216, %control_217 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_214, %arg186) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_layer_call_and_return_conditional_losses_100020} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4264)
      %outputs_218, %control_219 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_216, %arg187, %arg188, %arg189, %arg190) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_80240} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4265)
      %outputs_220, %control_221 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_218) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_relu_layer_call_and_return_conditional_losses_100200} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4266)
      %outputs_222, %control_223 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_220, %arg191) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_project_layer_call_and_return_conditional_losses_100290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4267)
      %outputs_224, %control_225 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_222, %arg192, %arg193, %arg194, %arg195) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_project_BN_layer_call_and_return_conditional_losses_80880} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4268)
      %outputs_226, %control_227 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_208, %outputs_224) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_add_layer_call_and_return_conditional_losses_100480} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4269)
      %outputs_228, %control_229 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_226, %arg196) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_layer_call_and_return_conditional_losses_100570} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4270)
      %outputs_230, %control_231 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_228, %arg197, %arg198, %arg199, %arg200) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_81520} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4271)
      %outputs_232, %control_233 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_230) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_relu_layer_call_and_return_conditional_losses_100750} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4272)
      %outputs_234, %control_235 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_232) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_pad_layer_call_and_return_conditional_losses_82040} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4273)
      %outputs_236, %control_237 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_234, %arg201) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_layer_call_and_return_conditional_losses_100870} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4274)
      %outputs_238, %control_239 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_236, %arg202, %arg203, %arg204, %arg205) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_82290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4275)
      %outputs_240, %control_241 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_238) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_relu_layer_call_and_return_conditional_losses_101050} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4276)
      %outputs_242, %control_243 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_240, %arg206) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_project_layer_call_and_return_conditional_losses_101140} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4277)
      %outputs_244, %control_245 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_242, %arg207, %arg208, %arg209, %arg210) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_project_BN_layer_call_and_return_conditional_losses_82930} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4278)
      %outputs_246, %control_247 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_244, %arg211) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_layer_call_and_return_conditional_losses_101340} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4279)
      %outputs_248, %control_249 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_246, %arg212, %arg213, %arg214, %arg215) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_83570} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4280)
      %outputs_250, %control_251 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_248) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_relu_layer_call_and_return_conditional_losses_101520} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4281)
      %outputs_252, %control_253 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_250, %arg216) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_layer_call_and_return_conditional_losses_101630} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4282)
      %outputs_254, %control_255 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_252, %arg217, %arg218, %arg219, %arg220) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_84210} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4283)
      %outputs_256, %control_257 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_254) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_relu_layer_call_and_return_conditional_losses_101810} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4284)
      %outputs_258, %control_259 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_256, %arg221) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_project_layer_call_and_return_conditional_losses_101900} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4285)
      %outputs_260, %control_261 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_258, %arg222, %arg223, %arg224, %arg225) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_project_BN_layer_call_and_return_conditional_losses_84850} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4286)
      %outputs_262, %control_263 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_244, %outputs_260) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_add_layer_call_and_return_conditional_losses_102090} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4287)
      %outputs_264, %control_265 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_262, %arg226) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_layer_call_and_return_conditional_losses_102180} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4288)
      %outputs_266, %control_267 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_264, %arg227, %arg228, %arg229, %arg230) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_85490} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4289)
      %outputs_268, %control_269 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_266) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_relu_layer_call_and_return_conditional_losses_102360} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4290)
      %outputs_270, %control_271 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_268, %arg231) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_layer_call_and_return_conditional_losses_102470} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4291)
      %outputs_272, %control_273 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_270, %arg232, %arg233, %arg234, %arg235) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_86130} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4292)
      %outputs_274, %control_275 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_272) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_relu_layer_call_and_return_conditional_losses_102650} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4293)
      %outputs_276, %control_277 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_274, %arg236) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_project_layer_call_and_return_conditional_losses_102740} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4294)
      %outputs_278, %control_279 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_276, %arg237, %arg238, %arg239, %arg240) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_project_BN_layer_call_and_return_conditional_losses_86770} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4295)
      %outputs_280, %control_281 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_262, %outputs_278) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_add_layer_call_and_return_conditional_losses_102930} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4296)
      %outputs_282, %control_283 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_280, %arg241) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_layer_call_and_return_conditional_losses_103020} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4297)
      %outputs_284, %control_285 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_282, %arg242, %arg243, %arg244, %arg245) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_87410} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4298)
      %outputs_286, %control_287 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_284) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_relu_layer_call_and_return_conditional_losses_103200} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4299)
      %outputs_288, %control_289 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_286, %arg246) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_layer_call_and_return_conditional_losses_103310} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4300)
      %outputs_290, %control_291 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_288, %arg247, %arg248, %arg249, %arg250) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_88050} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4301)
      %outputs_292, %control_293 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_290) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_relu_layer_call_and_return_conditional_losses_103490} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4302)
      %outputs_294, %control_295 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_292, %arg251) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_project_layer_call_and_return_conditional_losses_103580} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4303)
      %outputs_296, %control_297 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_294, %arg252, %arg253, %arg254, %arg255) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_project_BN_layer_call_and_return_conditional_losses_88690} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4304)
      %outputs_298, %control_299 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_296, %arg256) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv_1_layer_call_and_return_conditional_losses_103780} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4305)
      %outputs_300, %control_301 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_298, %arg257, %arg258, %arg259, %arg260) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv_1_bn_layer_call_and_return_conditional_losses_89330} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4306)
      %outputs_302, %control_303 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_300) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_out_relu_layer_call_and_return_conditional_losses_103960} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4307)
      %outputs_304, %control_305 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_302) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_global_average_pooling2d_layer_call_and_return_conditional_losses_89850} : (tensor<?x?x?x?xf32>) -> tensor<?x?xf32> loc(#loc4308)
      %outputs_306, %control_307 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_304, %arg261, %arg262) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_predictions_layer_call_and_return_conditional_losses_104100} : (tensor<?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?xf32> loc(#loc4309)
      %control_308 = tf_executor.island(%control, %control_1, %control_5, %control_7, %control_11, %control_13, %control_15, %control_17, %control_23, %control_25, %control_29, %control_31, %control_33, %control_35, %control_39, %control_41, %control_45, %control_47, %control_51, %control_53, %control_59, %control_61, %control_65, %control_67, %control_69, %control_71, %control_75, %control_77, %control_81, %control_83, %control_87, %control_89, %control_93, %control_95, %control_99, %control_101, %control_105, %control_107, %control_113, %control_115, %control_119, %control_121, %control_123, %control_125, %control_129, %control_131, %control_135, %control_137, %control_141, %control_143, %control_147, %control_149, %control_153, %control_155, %control_159, %control_161, %control_165, %control_167, %control_171, %control_173, %control_177, %control_179, %control_183, %control_185, %control_189, %control_191, %control_193, %control_195, %control_199, %control_201, %control_205, %control_207, %control_211, %control_213, %control_217, %control_219, %control_223, %control_225, %control_229, %control_231, %control_237, %control_239, %control_243, %control_245, %control_247, %control_249, %control_253, %control_255, %control_259, %control_261, %control_265, %control_267, %control_271, %control_273, %control_277, %control_279, %control_283, %control_285, %control_289, %control_291, %control_295, %control_297, %control_299, %control_301, %control_307) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc4310)
      %outputs_309, %control_310 = tf_executor.island(%control_308) wraps "tf.Identity"(%outputs_306) {device = ""} : (tensor<?x?xf32>) -> tensor<?x?xf32> loc(#loc4311)
      tf_executor.fetch %outputs_309, %control, %control_1, %control_5, %control_7, %control_11, %control_13, %control_15, %control_17, %control_23, %control_25, %control_29, %control_31, %control_33, %control_35, %control_39, %control_41, %control_45, %control_47, %control_51, %control_53, %control_59, %control_61, %control_65, %control_67, %control_69, %control_71, %control_75, %control_77, %control_81, %control_83, %control_87, %control_89, %control_93, %control_95, %control_99, %control_101, %control_105, %control_107, %control_113, %control_115, %control_119, %control_121, %control_123, %control_125, %control_129, %control_131, %control_135, %control_137, %control_141, %control_143, %control_147, %control_149, %control_153, %control_155, %control_159, %control_161, %control_165, %control_167, %control_171, %control_173, %control_177, %control_179, %control_183, %control_185, %control_189, %control_191, %control_193, %control_195, %control_199, %control_201, %control_205, %control_207, %control_211, %control_213, %control_217, %control_219, %control_223, %control_225, %control_229, %control_231, %control_237, %control_239, %control_243, %control_245, %control_247, %control_249, %control_253, %control_255, %control_259, %control_261, %control_265, %control_267, %control_271, %control_273, %control_277, %control_279, %control_283, %control_285, %control_289, %control_291, %control_295, %control_297, %control_299, %control_301, %control_307 : tensor<?x?xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_152860(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "input_1"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown), %arg5: tensor<!tf_type.resource> loc(unknown), %arg6: tensor<!tf_type.resource> loc(unknown), %arg7: tensor<!tf_type.resource> loc(unknown), %arg8: tensor<!tf_type.resource> loc(unknown), %arg9: tensor<!tf_type.resource> loc(unknown), %arg10: tensor<!tf_type.resource> loc(unknown), %arg11: tensor<!tf_type.resource> loc(unknown), %arg12: tensor<!tf_type.resource> loc(unknown), %arg13: tensor<!tf_type.resource> loc(unknown), %arg14: tensor<!tf_type.resource> loc(unknown), %arg15: tensor<!tf_type.resource> loc(unknown), %arg16: tensor<!tf_type.resource> loc(unknown), %arg17: tensor<!tf_type.resource> loc(unknown), %arg18: tensor<!tf_type.resource> loc(unknown), %arg19: tensor<!tf_type.resource> loc(unknown), %arg20: tensor<!tf_type.resource> loc(unknown), %arg21: tensor<!tf_type.resource> loc(unknown), %arg22: tensor<!tf_type.resource> loc(unknown), %arg23: tensor<!tf_type.resource> loc(unknown), %arg24: tensor<!tf_type.resource> loc(unknown), %arg25: tensor<!tf_type.resource> loc(unknown), %arg26: tensor<!tf_type.resource> loc(unknown), %arg27: tensor<!tf_type.resource> loc(unknown), %arg28: tensor<!tf_type.resource> loc(unknown), %arg29: tensor<!tf_type.resource> loc(unknown), %arg30: tensor<!tf_type.resource> loc(unknown), %arg31: tensor<!tf_type.resource> loc(unknown), %arg32: tensor<!tf_type.resource> loc(unknown), %arg33: tensor<!tf_type.resource> loc(unknown), %arg34: tensor<!tf_type.resource> loc(unknown), %arg35: tensor<!tf_type.resource> loc(unknown), %arg36: tensor<!tf_type.resource> loc(unknown), %arg37: tensor<!tf_type.resource> loc(unknown), %arg38: tensor<!tf_type.resource> loc(unknown), %arg39: tensor<!tf_type.resource> loc(unknown), %arg40: tensor<!tf_type.resource> loc(unknown), %arg41: tensor<!tf_type.resource> loc(unknown), %arg42: tensor<!tf_type.resource> loc(unknown), %arg43: tensor<!tf_type.resource> loc(unknown), %arg44: tensor<!tf_type.resource> loc(unknown), %arg45: tensor<!tf_type.resource> loc(unknown), %arg46: tensor<!tf_type.resource> loc(unknown), %arg47: tensor<!tf_type.resource> loc(unknown), %arg48: tensor<!tf_type.resource> loc(unknown), %arg49: tensor<!tf_type.resource> loc(unknown), %arg50: tensor<!tf_type.resource> loc(unknown), %arg51: tensor<!tf_type.resource> loc(unknown), %arg52: tensor<!tf_type.resource> loc(unknown), %arg53: tensor<!tf_type.resource> loc(unknown), %arg54: tensor<!tf_type.resource> loc(unknown), %arg55: tensor<!tf_type.resource> loc(unknown), %arg56: tensor<!tf_type.resource> loc(unknown), %arg57: tensor<!tf_type.resource> loc(unknown), %arg58: tensor<!tf_type.resource> loc(unknown), %arg59: tensor<!tf_type.resource> loc(unknown), %arg60: tensor<!tf_type.resource> loc(unknown), %arg61: tensor<!tf_type.resource> loc(unknown), %arg62: tensor<!tf_type.resource> loc(unknown), %arg63: tensor<!tf_type.resource> loc(unknown), %arg64: tensor<!tf_type.resource> loc(unknown), %arg65: tensor<!tf_type.resource> loc(unknown), %arg66: tensor<!tf_type.resource> loc(unknown), %arg67: tensor<!tf_type.resource> loc(unknown), %arg68: tensor<!tf_type.resource> loc(unknown), %arg69: tensor<!tf_type.resource> loc(unknown), %arg70: tensor<!tf_type.resource> loc(unknown), %arg71: tensor<!tf_type.resource> loc(unknown), %arg72: tensor<!tf_type.resource> loc(unknown), %arg73: tensor<!tf_type.resource> loc(unknown), %arg74: tensor<!tf_type.resource> loc(unknown), %arg75: tensor<!tf_type.resource> loc(unknown), %arg76: tensor<!tf_type.resource> loc(unknown), %arg77: tensor<!tf_type.resource> loc(unknown), %arg78: tensor<!tf_type.resource> loc(unknown), %arg79: tensor<!tf_type.resource> loc(unknown), %arg80: tensor<!tf_type.resource> loc(unknown), %arg81: tensor<!tf_type.resource> loc(unknown), %arg82: tensor<!tf_type.resource> loc(unknown), %arg83: tensor<!tf_type.resource> loc(unknown), %arg84: tensor<!tf_type.resource> loc(unknown), %arg85: tensor<!tf_type.resource> loc(unknown), %arg86: tensor<!tf_type.resource> loc(unknown), %arg87: tensor<!tf_type.resource> loc(unknown), %arg88: tensor<!tf_type.resource> loc(unknown), %arg89: tensor<!tf_type.resource> loc(unknown), %arg90: tensor<!tf_type.resource> loc(unknown), %arg91: tensor<!tf_type.resource> loc(unknown), %arg92: tensor<!tf_type.resource> loc(unknown), %arg93: tensor<!tf_type.resource> loc(unknown), %arg94: tensor<!tf_type.resource> loc(unknown), %arg95: tensor<!tf_type.resource> loc(unknown), %arg96: tensor<!tf_type.resource> loc(unknown), %arg97: tensor<!tf_type.resource> loc(unknown), %arg98: tensor<!tf_type.resource> loc(unknown), %arg99: tensor<!tf_type.resource> loc(unknown), %arg100: tensor<!tf_type.resource> loc(unknown), %arg101: tensor<!tf_type.resource> loc(unknown), %arg102: tensor<!tf_type.resource> loc(unknown), %arg103: tensor<!tf_type.resource> loc(unknown), %arg104: tensor<!tf_type.resource> loc(unknown), %arg105: tensor<!tf_type.resource> loc(unknown), %arg106: tensor<!tf_type.resource> loc(unknown), %arg107: tensor<!tf_type.resource> loc(unknown), %arg108: tensor<!tf_type.resource> loc(unknown), %arg109: tensor<!tf_type.resource> loc(unknown), %arg110: tensor<!tf_type.resource> loc(unknown), %arg111: tensor<!tf_type.resource> loc(unknown), %arg112: tensor<!tf_type.resource> loc(unknown), %arg113: tensor<!tf_type.resource> loc(unknown), %arg114: tensor<!tf_type.resource> loc(unknown), %arg115: tensor<!tf_type.resource> loc(unknown), %arg116: tensor<!tf_type.resource> loc(unknown), %arg117: tensor<!tf_type.resource> loc(unknown), %arg118: tensor<!tf_type.resource> loc(unknown), %arg119: tensor<!tf_type.resource> loc(unknown), %arg120: tensor<!tf_type.resource> loc(unknown), %arg121: tensor<!tf_type.resource> loc(unknown), %arg122: tensor<!tf_type.resource> loc(unknown), %arg123: tensor<!tf_type.resource> loc(unknown), %arg124: tensor<!tf_type.resource> loc(unknown), %arg125: tensor<!tf_type.resource> loc(unknown), %arg126: tensor<!tf_type.resource> loc(unknown), %arg127: tensor<!tf_type.resource> loc(unknown), %arg128: tensor<!tf_type.resource> loc(unknown), %arg129: tensor<!tf_type.resource> loc(unknown), %arg130: tensor<!tf_type.resource> loc(unknown), %arg131: tensor<!tf_type.resource> loc(unknown), %arg132: tensor<!tf_type.resource> loc(unknown), %arg133: tensor<!tf_type.resource> loc(unknown), %arg134: tensor<!tf_type.resource> loc(unknown), %arg135: tensor<!tf_type.resource> loc(unknown), %arg136: tensor<!tf_type.resource> loc(unknown), %arg137: tensor<!tf_type.resource> loc(unknown), %arg138: tensor<!tf_type.resource> loc(unknown), %arg139: tensor<!tf_type.resource> loc(unknown), %arg140: tensor<!tf_type.resource> loc(unknown), %arg141: tensor<!tf_type.resource> loc(unknown), %arg142: tensor<!tf_type.resource> loc(unknown), %arg143: tensor<!tf_type.resource> loc(unknown), %arg144: tensor<!tf_type.resource> loc(unknown), %arg145: tensor<!tf_type.resource> loc(unknown), %arg146: tensor<!tf_type.resource> loc(unknown), %arg147: tensor<!tf_type.resource> loc(unknown), %arg148: tensor<!tf_type.resource> loc(unknown), %arg149: tensor<!tf_type.resource> loc(unknown), %arg150: tensor<!tf_type.resource> loc(unknown), %arg151: tensor<!tf_type.resource> loc(unknown), %arg152: tensor<!tf_type.resource> loc(unknown), %arg153: tensor<!tf_type.resource> loc(unknown), %arg154: tensor<!tf_type.resource> loc(unknown), %arg155: tensor<!tf_type.resource> loc(unknown), %arg156: tensor<!tf_type.resource> loc(unknown), %arg157: tensor<!tf_type.resource> loc(unknown), %arg158: tensor<!tf_type.resource> loc(unknown), %arg159: tensor<!tf_type.resource> loc(unknown), %arg160: tensor<!tf_type.resource> loc(unknown), %arg161: tensor<!tf_type.resource> loc(unknown), %arg162: tensor<!tf_type.resource> loc(unknown), %arg163: tensor<!tf_type.resource> loc(unknown), %arg164: tensor<!tf_type.resource> loc(unknown), %arg165: tensor<!tf_type.resource> loc(unknown), %arg166: tensor<!tf_type.resource> loc(unknown), %arg167: tensor<!tf_type.resource> loc(unknown), %arg168: tensor<!tf_type.resource> loc(unknown), %arg169: tensor<!tf_type.resource> loc(unknown), %arg170: tensor<!tf_type.resource> loc(unknown), %arg171: tensor<!tf_type.resource> loc(unknown), %arg172: tensor<!tf_type.resource> loc(unknown), %arg173: tensor<!tf_type.resource> loc(unknown), %arg174: tensor<!tf_type.resource> loc(unknown), %arg175: tensor<!tf_type.resource> loc(unknown), %arg176: tensor<!tf_type.resource> loc(unknown), %arg177: tensor<!tf_type.resource> loc(unknown), %arg178: tensor<!tf_type.resource> loc(unknown), %arg179: tensor<!tf_type.resource> loc(unknown), %arg180: tensor<!tf_type.resource> loc(unknown), %arg181: tensor<!tf_type.resource> loc(unknown), %arg182: tensor<!tf_type.resource> loc(unknown), %arg183: tensor<!tf_type.resource> loc(unknown), %arg184: tensor<!tf_type.resource> loc(unknown), %arg185: tensor<!tf_type.resource> loc(unknown), %arg186: tensor<!tf_type.resource> loc(unknown), %arg187: tensor<!tf_type.resource> loc(unknown), %arg188: tensor<!tf_type.resource> loc(unknown), %arg189: tensor<!tf_type.resource> loc(unknown), %arg190: tensor<!tf_type.resource> loc(unknown), %arg191: tensor<!tf_type.resource> loc(unknown), %arg192: tensor<!tf_type.resource> loc(unknown), %arg193: tensor<!tf_type.resource> loc(unknown), %arg194: tensor<!tf_type.resource> loc(unknown), %arg195: tensor<!tf_type.resource> loc(unknown), %arg196: tensor<!tf_type.resource> loc(unknown), %arg197: tensor<!tf_type.resource> loc(unknown), %arg198: tensor<!tf_type.resource> loc(unknown), %arg199: tensor<!tf_type.resource> loc(unknown), %arg200: tensor<!tf_type.resource> loc(unknown), %arg201: tensor<!tf_type.resource> loc(unknown), %arg202: tensor<!tf_type.resource> loc(unknown), %arg203: tensor<!tf_type.resource> loc(unknown), %arg204: tensor<!tf_type.resource> loc(unknown), %arg205: tensor<!tf_type.resource> loc(unknown), %arg206: tensor<!tf_type.resource> loc(unknown), %arg207: tensor<!tf_type.resource> loc(unknown), %arg208: tensor<!tf_type.resource> loc(unknown), %arg209: tensor<!tf_type.resource> loc(unknown), %arg210: tensor<!tf_type.resource> loc(unknown), %arg211: tensor<!tf_type.resource> loc(unknown), %arg212: tensor<!tf_type.resource> loc(unknown), %arg213: tensor<!tf_type.resource> loc(unknown), %arg214: tensor<!tf_type.resource> loc(unknown), %arg215: tensor<!tf_type.resource> loc(unknown), %arg216: tensor<!tf_type.resource> loc(unknown), %arg217: tensor<!tf_type.resource> loc(unknown), %arg218: tensor<!tf_type.resource> loc(unknown), %arg219: tensor<!tf_type.resource> loc(unknown), %arg220: tensor<!tf_type.resource> loc(unknown), %arg221: tensor<!tf_type.resource> loc(unknown), %arg222: tensor<!tf_type.resource> loc(unknown), %arg223: tensor<!tf_type.resource> loc(unknown), %arg224: tensor<!tf_type.resource> loc(unknown), %arg225: tensor<!tf_type.resource> loc(unknown), %arg226: tensor<!tf_type.resource> loc(unknown), %arg227: tensor<!tf_type.resource> loc(unknown), %arg228: tensor<!tf_type.resource> loc(unknown), %arg229: tensor<!tf_type.resource> loc(unknown), %arg230: tensor<!tf_type.resource> loc(unknown), %arg231: tensor<!tf_type.resource> loc(unknown), %arg232: tensor<!tf_type.resource> loc(unknown), %arg233: tensor<!tf_type.resource> loc(unknown), %arg234: tensor<!tf_type.resource> loc(unknown), %arg235: tensor<!tf_type.resource> loc(unknown), %arg236: tensor<!tf_type.resource> loc(unknown), %arg237: tensor<!tf_type.resource> loc(unknown), %arg238: tensor<!tf_type.resource> loc(unknown), %arg239: tensor<!tf_type.resource> loc(unknown), %arg240: tensor<!tf_type.resource> loc(unknown), %arg241: tensor<!tf_type.resource> loc(unknown), %arg242: tensor<!tf_type.resource> loc(unknown), %arg243: tensor<!tf_type.resource> loc(unknown), %arg244: tensor<!tf_type.resource> loc(unknown), %arg245: tensor<!tf_type.resource> loc(unknown), %arg246: tensor<!tf_type.resource> loc(unknown), %arg247: tensor<!tf_type.resource> loc(unknown), %arg248: tensor<!tf_type.resource> loc(unknown), %arg249: tensor<!tf_type.resource> loc(unknown), %arg250: tensor<!tf_type.resource> loc(unknown), %arg251: tensor<!tf_type.resource> loc(unknown), %arg252: tensor<!tf_type.resource> loc(unknown), %arg253: tensor<!tf_type.resource> loc(unknown), %arg254: tensor<!tf_type.resource> loc(unknown), %arg255: tensor<!tf_type.resource> loc(unknown), %arg256: tensor<!tf_type.resource> loc(unknown), %arg257: tensor<!tf_type.resource> loc(unknown), %arg258: tensor<!tf_type.resource> loc(unknown), %arg259: tensor<!tf_type.resource> loc(unknown), %arg260: tensor<!tf_type.resource> loc(unknown), %arg261: tensor<!tf_type.resource> loc(unknown), %arg262: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv1_layer_call_and_return_conditional_losses_90020} : (tensor<?x224x224x3xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4312)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs, %arg2, %arg3, %arg4, %arg5) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_bn_Conv1_layer_call_and_return_conditional_losses_56480} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4313)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv1_relu_layer_call_and_return_conditional_losses_90200} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc4314)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_2, %arg6) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_90310} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4315)
      %outputs_6, %control_7 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_4, %arg7, %arg8, %arg9, %arg10) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_57120} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4316)
      %outputs_8, %control_9 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_6) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_depthwise_relu_layer_call_and_return_conditional_losses_90490} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc4317)
      %outputs_10, %control_11 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_8, %arg11) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_project_layer_call_and_return_conditional_losses_90580} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4318)
      %outputs_12, %control_13 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_10, %arg12, %arg13, %arg14, %arg15) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_57760} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4319)
      %outputs_14, %control_15 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_12, %arg16) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_layer_call_and_return_conditional_losses_90780} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4320)
      %outputs_16, %control_17 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_14, %arg17, %arg18, %arg19, %arg20) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_58400} : (tensor<?x112x112x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x112x112x?xf32> loc(#loc4321)
      %outputs_18, %control_19 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_16) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_expand_relu_layer_call_and_return_conditional_losses_90960} : (tensor<?x112x112x?xf32>) -> tensor<?x112x112x?xf32> loc(#loc4322)
      %outputs_20, %control_21 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_18) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_pad_layer_call_and_return_conditional_losses_58610} : (tensor<?x112x112x?xf32>) -> tensor<?x113x113x?xf32> loc(#loc4323)
      %outputs_22, %control_23 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_20, %arg21) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_layer_call_and_return_conditional_losses_91080} : (tensor<?x113x113x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4324)
      %outputs_24, %control_25 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_22, %arg22, %arg23, %arg24, %arg25) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_59170} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4325)
      %outputs_26, %control_27 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_24) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_depthwise_relu_layer_call_and_return_conditional_losses_91260} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4326)
      %outputs_28, %control_29 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_26, %arg26) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_project_layer_call_and_return_conditional_losses_91350} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4327)
      %outputs_30, %control_31 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_28, %arg27, %arg28, %arg29, %arg30) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_1_project_BN_layer_call_and_return_conditional_losses_59810} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4328)
      %outputs_32, %control_33 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_30, %arg31) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_layer_call_and_return_conditional_losses_91550} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4329)
      %outputs_34, %control_35 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_32, %arg32, %arg33, %arg34, %arg35) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_60450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4330)
      %outputs_36, %control_37 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_34) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_expand_relu_layer_call_and_return_conditional_losses_91730} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4331)
      %outputs_38, %control_39 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_36, %arg36) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_layer_call_and_return_conditional_losses_91840} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4332)
      %outputs_40, %control_41 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_38, %arg37, %arg38, %arg39, %arg40) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_61090} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4333)
      %outputs_42, %control_43 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_40) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_depthwise_relu_layer_call_and_return_conditional_losses_92020} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4334)
      %outputs_44, %control_45 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_42, %arg41) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_project_layer_call_and_return_conditional_losses_92110} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4335)
      %outputs_46, %control_47 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_44, %arg42, %arg43, %arg44, %arg45) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_project_BN_layer_call_and_return_conditional_losses_61730} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4336)
      %outputs_48, %control_49 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_30, %outputs_46) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_2_add_layer_call_and_return_conditional_losses_92300} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4337)
      %outputs_50, %control_51 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_48, %arg46) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_layer_call_and_return_conditional_losses_92390} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4338)
      %outputs_52, %control_53 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_50, %arg47, %arg48, %arg49, %arg50) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_62370} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4339)
      %outputs_54, %control_55 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_52) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_expand_relu_layer_call_and_return_conditional_losses_92570} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4340)
      %outputs_56, %control_57 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_54) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_pad_layer_call_and_return_conditional_losses_62580} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4341)
      %outputs_58, %control_59 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_56, %arg51) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_layer_call_and_return_conditional_losses_92690} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4342)
      %outputs_60, %control_61 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_58, %arg52, %arg53, %arg54, %arg55) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_63140} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4343)
      %outputs_62, %control_63 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_60) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_depthwise_relu_layer_call_and_return_conditional_losses_92870} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4344)
      %outputs_64, %control_65 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_62, %arg56) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_project_layer_call_and_return_conditional_losses_92960} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4345)
      %outputs_66, %control_67 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_64, %arg57, %arg58, %arg59, %arg60) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_3_project_BN_layer_call_and_return_conditional_losses_63780} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4346)
      %outputs_68, %control_69 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_66, %arg61) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_layer_call_and_return_conditional_losses_93160} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4347)
      %outputs_70, %control_71 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_68, %arg62, %arg63, %arg64, %arg65) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_64420} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4348)
      %outputs_72, %control_73 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_70) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_expand_relu_layer_call_and_return_conditional_losses_93340} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4349)
      %outputs_74, %control_75 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_72, %arg66) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_layer_call_and_return_conditional_losses_93450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4350)
      %outputs_76, %control_77 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_74, %arg67, %arg68, %arg69, %arg70) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_65060} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4351)
      %outputs_78, %control_79 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_76) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_depthwise_relu_layer_call_and_return_conditional_losses_93630} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4352)
      %outputs_80, %control_81 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_78, %arg71) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_project_layer_call_and_return_conditional_losses_93720} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4353)
      %outputs_82, %control_83 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_80, %arg72, %arg73, %arg74, %arg75) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_project_BN_layer_call_and_return_conditional_losses_65700} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4354)
      %outputs_84, %control_85 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_66, %outputs_82) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_4_add_layer_call_and_return_conditional_losses_93910} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4355)
      %outputs_86, %control_87 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_84, %arg76) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_layer_call_and_return_conditional_losses_94000} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4356)
      %outputs_88, %control_89 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_86, %arg77, %arg78, %arg79, %arg80) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_66340} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4357)
      %outputs_90, %control_91 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_88) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_expand_relu_layer_call_and_return_conditional_losses_94180} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4358)
      %outputs_92, %control_93 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_90, %arg81) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_layer_call_and_return_conditional_losses_94290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4359)
      %outputs_94, %control_95 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_92, %arg82, %arg83, %arg84, %arg85) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_66980} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4360)
      %outputs_96, %control_97 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_94) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_depthwise_relu_layer_call_and_return_conditional_losses_94470} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4361)
      %outputs_98, %control_99 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_96, %arg86) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_project_layer_call_and_return_conditional_losses_94560} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4362)
      %outputs_100, %control_101 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_98, %arg87, %arg88, %arg89, %arg90) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_project_BN_layer_call_and_return_conditional_losses_67620} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4363)
      %outputs_102, %control_103 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_84, %outputs_100) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_5_add_layer_call_and_return_conditional_losses_94750} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4364)
      %outputs_104, %control_105 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_102, %arg91) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_layer_call_and_return_conditional_losses_94840} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4365)
      %outputs_106, %control_107 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_104, %arg92, %arg93, %arg94, %arg95) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_68260} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4366)
      %outputs_108, %control_109 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_106) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_expand_relu_layer_call_and_return_conditional_losses_95020} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4367)
      %outputs_110, %control_111 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_108) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_pad_layer_call_and_return_conditional_losses_68470} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4368)
      %outputs_112, %control_113 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_110, %arg96) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_layer_call_and_return_conditional_losses_95140} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4369)
      %outputs_114, %control_115 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_112, %arg97, %arg98, %arg99, %arg100) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_69030} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4370)
      %outputs_116, %control_117 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_114) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_depthwise_relu_layer_call_and_return_conditional_losses_95320} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4371)
      %outputs_118, %control_119 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_116, %arg101) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_project_layer_call_and_return_conditional_losses_95410} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4372)
      %outputs_120, %control_121 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_118, %arg102, %arg103, %arg104, %arg105) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_6_project_BN_layer_call_and_return_conditional_losses_69670} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4373)
      %outputs_122, %control_123 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_120, %arg106) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_layer_call_and_return_conditional_losses_95610} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4374)
      %outputs_124, %control_125 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_122, %arg107, %arg108, %arg109, %arg110) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_70310} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4375)
      %outputs_126, %control_127 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_124) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_expand_relu_layer_call_and_return_conditional_losses_95790} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4376)
      %outputs_128, %control_129 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_126, %arg111) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_layer_call_and_return_conditional_losses_95900} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4377)
      %outputs_130, %control_131 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_128, %arg112, %arg113, %arg114, %arg115) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_70950} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4378)
      %outputs_132, %control_133 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_130) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_depthwise_relu_layer_call_and_return_conditional_losses_96080} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4379)
      %outputs_134, %control_135 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_132, %arg116) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_project_layer_call_and_return_conditional_losses_96170} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4380)
      %outputs_136, %control_137 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_134, %arg117, %arg118, %arg119, %arg120) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_project_BN_layer_call_and_return_conditional_losses_71590} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4381)
      %outputs_138, %control_139 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_120, %outputs_136) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_7_add_layer_call_and_return_conditional_losses_96360} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4382)
      %outputs_140, %control_141 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_138, %arg121) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_layer_call_and_return_conditional_losses_96450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4383)
      %outputs_142, %control_143 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_140, %arg122, %arg123, %arg124, %arg125) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_72230} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4384)
      %outputs_144, %control_145 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_142) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_expand_relu_layer_call_and_return_conditional_losses_96630} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4385)
      %outputs_146, %control_147 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_144, %arg126) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_layer_call_and_return_conditional_losses_96740} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4386)
      %outputs_148, %control_149 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_146, %arg127, %arg128, %arg129, %arg130) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_72870} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4387)
      %outputs_150, %control_151 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_148) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_depthwise_relu_layer_call_and_return_conditional_losses_96920} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4388)
      %outputs_152, %control_153 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_150, %arg131) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_project_layer_call_and_return_conditional_losses_97010} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4389)
      %outputs_154, %control_155 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_152, %arg132, %arg133, %arg134, %arg135) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_project_BN_layer_call_and_return_conditional_losses_73510} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4390)
      %outputs_156, %control_157 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_138, %outputs_154) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_8_add_layer_call_and_return_conditional_losses_97200} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4391)
      %outputs_158, %control_159 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_156, %arg136) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_layer_call_and_return_conditional_losses_97290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4392)
      %outputs_160, %control_161 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_158, %arg137, %arg138, %arg139, %arg140) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_74150} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4393)
      %outputs_162, %control_163 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_160) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_expand_relu_layer_call_and_return_conditional_losses_97470} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4394)
      %outputs_164, %control_165 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_162, %arg141) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_layer_call_and_return_conditional_losses_97580} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4395)
      %outputs_166, %control_167 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_164, %arg142, %arg143, %arg144, %arg145) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_74790} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4396)
      %outputs_168, %control_169 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_166) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_depthwise_relu_layer_call_and_return_conditional_losses_97760} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4397)
      %outputs_170, %control_171 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_168, %arg146) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_project_layer_call_and_return_conditional_losses_97850} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4398)
      %outputs_172, %control_173 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_170, %arg147, %arg148, %arg149, %arg150) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_project_BN_layer_call_and_return_conditional_losses_75430} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4399)
      %outputs_174, %control_175 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_156, %outputs_172) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_9_add_layer_call_and_return_conditional_losses_98040} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4400)
      %outputs_176, %control_177 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_174, %arg151) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_layer_call_and_return_conditional_losses_98130} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4401)
      %outputs_178, %control_179 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_176, %arg152, %arg153, %arg154, %arg155) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_76070} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4402)
      %outputs_180, %control_181 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_178) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_expand_relu_layer_call_and_return_conditional_losses_98310} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4403)
      %outputs_182, %control_183 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_180, %arg156) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_layer_call_and_return_conditional_losses_98420} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4404)
      %outputs_184, %control_185 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_182, %arg157, %arg158, %arg159, %arg160) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_76710} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4405)
      %outputs_186, %control_187 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_184) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_depthwise_relu_layer_call_and_return_conditional_losses_98600} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4406)
      %outputs_188, %control_189 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_186, %arg161) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_project_layer_call_and_return_conditional_losses_98690} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4407)
      %outputs_190, %control_191 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_188, %arg162, %arg163, %arg164, %arg165) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_10_project_BN_layer_call_and_return_conditional_losses_77350} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4408)
      %outputs_192, %control_193 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_190, %arg166) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_layer_call_and_return_conditional_losses_98890} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4409)
      %outputs_194, %control_195 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_192, %arg167, %arg168, %arg169, %arg170) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_77990} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4410)
      %outputs_196, %control_197 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_194) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_expand_relu_layer_call_and_return_conditional_losses_99070} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4411)
      %outputs_198, %control_199 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_196, %arg171) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_layer_call_and_return_conditional_losses_99180} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4412)
      %outputs_200, %control_201 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_198, %arg172, %arg173, %arg174, %arg175) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_78630} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4413)
      %outputs_202, %control_203 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_200) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_depthwise_relu_layer_call_and_return_conditional_losses_99360} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4414)
      %outputs_204, %control_205 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_202, %arg176) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_project_layer_call_and_return_conditional_losses_99450} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4415)
      %outputs_206, %control_207 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_204, %arg177, %arg178, %arg179, %arg180) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_project_BN_layer_call_and_return_conditional_losses_79270} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4416)
      %outputs_208, %control_209 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_190, %outputs_206) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_11_add_layer_call_and_return_conditional_losses_99640} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4417)
      %outputs_210, %control_211 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_208, %arg181) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_layer_call_and_return_conditional_losses_99730} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4418)
      %outputs_212, %control_213 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_210, %arg182, %arg183, %arg184, %arg185) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_79910} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4419)
      %outputs_214, %control_215 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_212) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_expand_relu_layer_call_and_return_conditional_losses_99910} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4420)
      %outputs_216, %control_217 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_214, %arg186) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_layer_call_and_return_conditional_losses_100020} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4421)
      %outputs_218, %control_219 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_216, %arg187, %arg188, %arg189, %arg190) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_80550} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4422)
      %outputs_220, %control_221 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_218) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_depthwise_relu_layer_call_and_return_conditional_losses_100200} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4423)
      %outputs_222, %control_223 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_220, %arg191) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_project_layer_call_and_return_conditional_losses_100290} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4424)
      %outputs_224, %control_225 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_222, %arg192, %arg193, %arg194, %arg195) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_project_BN_layer_call_and_return_conditional_losses_81190} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4425)
      %outputs_226, %control_227 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_208, %outputs_224) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_12_add_layer_call_and_return_conditional_losses_100480} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4426)
      %outputs_228, %control_229 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_226, %arg196) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_layer_call_and_return_conditional_losses_100570} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4427)
      %outputs_230, %control_231 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_228, %arg197, %arg198, %arg199, %arg200) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_81830} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4428)
      %outputs_232, %control_233 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_230) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_expand_relu_layer_call_and_return_conditional_losses_100750} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4429)
      %outputs_234, %control_235 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_232) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_pad_layer_call_and_return_conditional_losses_82040} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4430)
      %outputs_236, %control_237 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_234, %arg201) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_layer_call_and_return_conditional_losses_100870} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4431)
      %outputs_238, %control_239 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_236, %arg202, %arg203, %arg204, %arg205) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_82600} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4432)
      %outputs_240, %control_241 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_238) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_depthwise_relu_layer_call_and_return_conditional_losses_101050} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4433)
      %outputs_242, %control_243 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_240, %arg206) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_project_layer_call_and_return_conditional_losses_101140} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4434)
      %outputs_244, %control_245 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_242, %arg207, %arg208, %arg209, %arg210) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_13_project_BN_layer_call_and_return_conditional_losses_83240} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4435)
      %outputs_246, %control_247 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_244, %arg211) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_layer_call_and_return_conditional_losses_101340} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4436)
      %outputs_248, %control_249 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_246, %arg212, %arg213, %arg214, %arg215) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_83880} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4437)
      %outputs_250, %control_251 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_248) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_expand_relu_layer_call_and_return_conditional_losses_101520} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4438)
      %outputs_252, %control_253 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_250, %arg216) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_layer_call_and_return_conditional_losses_101630} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4439)
      %outputs_254, %control_255 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_252, %arg217, %arg218, %arg219, %arg220) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_84520} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4440)
      %outputs_256, %control_257 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_254) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_depthwise_relu_layer_call_and_return_conditional_losses_101810} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4441)
      %outputs_258, %control_259 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_256, %arg221) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_project_layer_call_and_return_conditional_losses_101900} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4442)
      %outputs_260, %control_261 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_258, %arg222, %arg223, %arg224, %arg225) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_project_BN_layer_call_and_return_conditional_losses_85160} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4443)
      %outputs_262, %control_263 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_244, %outputs_260) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_14_add_layer_call_and_return_conditional_losses_102090} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4444)
      %outputs_264, %control_265 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_262, %arg226) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_layer_call_and_return_conditional_losses_102180} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4445)
      %outputs_266, %control_267 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_264, %arg227, %arg228, %arg229, %arg230) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_85800} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4446)
      %outputs_268, %control_269 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_266) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_expand_relu_layer_call_and_return_conditional_losses_102360} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4447)
      %outputs_270, %control_271 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_268, %arg231) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_layer_call_and_return_conditional_losses_102470} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4448)
      %outputs_272, %control_273 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_270, %arg232, %arg233, %arg234, %arg235) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_86440} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4449)
      %outputs_274, %control_275 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_272) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_depthwise_relu_layer_call_and_return_conditional_losses_102650} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4450)
      %outputs_276, %control_277 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_274, %arg236) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_project_layer_call_and_return_conditional_losses_102740} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4451)
      %outputs_278, %control_279 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_276, %arg237, %arg238, %arg239, %arg240) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_project_BN_layer_call_and_return_conditional_losses_87080} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4452)
      %outputs_280, %control_281 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_262, %outputs_278) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_15_add_layer_call_and_return_conditional_losses_102930} : (tensor<?x?x?x?xf32>, tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4453)
      %outputs_282, %control_283 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_280, %arg241) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_layer_call_and_return_conditional_losses_103020} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4454)
      %outputs_284, %control_285 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_282, %arg242, %arg243, %arg244, %arg245) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_87720} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4455)
      %outputs_286, %control_287 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_284) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_expand_relu_layer_call_and_return_conditional_losses_103200} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4456)
      %outputs_288, %control_289 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_286, %arg246) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_layer_call_and_return_conditional_losses_103310} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4457)
      %outputs_290, %control_291 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_288, %arg247, %arg248, %arg249, %arg250) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_88360} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4458)
      %outputs_292, %control_293 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_290) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_depthwise_relu_layer_call_and_return_conditional_losses_103490} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4459)
      %outputs_294, %control_295 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_292, %arg251) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_project_layer_call_and_return_conditional_losses_103580} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4460)
      %outputs_296, %control_297 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_294, %arg252, %arg253, %arg254, %arg255) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_block_16_project_BN_layer_call_and_return_conditional_losses_89000} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4461)
      %outputs_298, %control_299 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_296, %arg256) {_collective_manager_ids = [], _read_only_resource_inputs = [1], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv_1_layer_call_and_return_conditional_losses_103780} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4462)
      %outputs_300, %control_301 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_298, %arg257, %arg258, %arg259, %arg260) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_Conv_1_bn_layer_call_and_return_conditional_losses_89640} : (tensor<?x?x?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?x?x?xf32> loc(#loc4463)
      %outputs_302, %control_303 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_300) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_out_relu_layer_call_and_return_conditional_losses_103960} : (tensor<?x?x?x?xf32>) -> tensor<?x?x?x?xf32> loc(#loc4464)
      %outputs_304, %control_305 = tf_executor.island wraps "tf.PartitionedCall"(%outputs_302) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_global_average_pooling2d_layer_call_and_return_conditional_losses_89850} : (tensor<?x?x?x?xf32>) -> tensor<?x?xf32> loc(#loc4465)
      %outputs_306, %control_307 = tf_executor.island wraps "tf.StatefulPartitionedCall"(%outputs_304, %arg261, %arg262) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_predictions_layer_call_and_return_conditional_losses_104100} : (tensor<?x?xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?xf32> loc(#loc4466)
      %control_308 = tf_executor.island(%control, %control_1, %control_5, %control_7, %control_11, %control_13, %control_15, %control_17, %control_23, %control_25, %control_29, %control_31, %control_33, %control_35, %control_39, %control_41, %control_45, %control_47, %control_51, %control_53, %control_59, %control_61, %control_65, %control_67, %control_69, %control_71, %control_75, %control_77, %control_81, %control_83, %control_87, %control_89, %control_93, %control_95, %control_99, %control_101, %control_105, %control_107, %control_113, %control_115, %control_119, %control_121, %control_123, %control_125, %control_129, %control_131, %control_135, %control_137, %control_141, %control_143, %control_147, %control_149, %control_153, %control_155, %control_159, %control_161, %control_165, %control_167, %control_171, %control_173, %control_177, %control_179, %control_183, %control_185, %control_189, %control_191, %control_193, %control_195, %control_199, %control_201, %control_205, %control_207, %control_211, %control_213, %control_217, %control_219, %control_223, %control_225, %control_229, %control_231, %control_237, %control_239, %control_243, %control_245, %control_247, %control_249, %control_253, %control_255, %control_259, %control_261, %control_265, %control_267, %control_271, %control_273, %control_277, %control_279, %control_283, %control_285, %control_289, %control_291, %control_295, %control_297, %control_299, %control_301, %control_307) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc4467)
      %outputs_309, %control_310 = tf_executor.island(%control_308) wraps "tf.Identity"(%outputs_306) {device = ""} : (tensor<?x?xf32>) -> tensor<?x?xf32> loc(#loc4468)
      tf_executor.fetch %outputs_309, %control, %control_1, %control_5, %control_7, %control_11, %control_13, %control_15, %control_17, %control_23, %control_25, %control_29, %control_31, %control_33, %control_35, %control_39, %control_41, %control_45, %control_47, %control_51, %control_53, %control_59, %control_61, %control_65, %control_67, %control_69, %control_71, %control_75, %control_77, %control_81, %control_83, %control_87, %control_89, %control_93, %control_95, %control_99, %control_101, %control_105, %control_107, %control_113, %control_115, %control_119, %control_121, %control_123, %control_125, %control_129, %control_131, %control_135, %control_137, %control_141, %control_143, %control_147, %control_149, %control_153, %control_155, %control_159, %control_161, %control_165, %control_167, %control_171, %control_173, %control_177, %control_179, %control_183, %control_185, %control_189, %control_191, %control_193, %control_195, %control_199, %control_201, %control_205, %control_207, %control_211, %control_213, %control_217, %control_219, %control_223, %control_225, %control_229, %control_231, %control_237, %control_239, %control_243, %control_245, %control_247, %control_249, %control_253, %control_255, %control_259, %control_261, %control_265, %control_267, %control_271, %control_273, %control_277, %control_279, %control_283, %control_285, %control_289, %control_291, %control_295, %control_297, %control_299, %control_301, %control_307 : tensor<?x?xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_173280(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown), %arg5: tensor<!tf_type.resource> loc(unknown), %arg6: tensor<!tf_type.resource> loc(unknown), %arg7: tensor<!tf_type.resource> loc(unknown), %arg8: tensor<!tf_type.resource> loc(unknown), %arg9: tensor<!tf_type.resource> loc(unknown), %arg10: tensor<!tf_type.resource> loc(unknown), %arg11: tensor<!tf_type.resource> loc(unknown), %arg12: tensor<!tf_type.resource> loc(unknown), %arg13: tensor<!tf_type.resource> loc(unknown), %arg14: tensor<!tf_type.resource> loc(unknown), %arg15: tensor<!tf_type.resource> loc(unknown), %arg16: tensor<!tf_type.resource> loc(unknown), %arg17: tensor<!tf_type.resource> loc(unknown), %arg18: tensor<!tf_type.resource> loc(unknown), %arg19: tensor<!tf_type.resource> loc(unknown), %arg20: tensor<!tf_type.resource> loc(unknown), %arg21: tensor<!tf_type.resource> loc(unknown), %arg22: tensor<!tf_type.resource> loc(unknown), %arg23: tensor<!tf_type.resource> loc(unknown), %arg24: tensor<!tf_type.resource> loc(unknown), %arg25: tensor<!tf_type.resource> loc(unknown), %arg26: tensor<!tf_type.resource> loc(unknown), %arg27: tensor<!tf_type.resource> loc(unknown), %arg28: tensor<!tf_type.resource> loc(unknown), %arg29: tensor<!tf_type.resource> loc(unknown), %arg30: tensor<!tf_type.resource> loc(unknown), %arg31: tensor<!tf_type.resource> loc(unknown), %arg32: tensor<!tf_type.resource> loc(unknown), %arg33: tensor<!tf_type.resource> loc(unknown), %arg34: tensor<!tf_type.resource> loc(unknown), %arg35: tensor<!tf_type.resource> loc(unknown), %arg36: tensor<!tf_type.resource> loc(unknown), %arg37: tensor<!tf_type.resource> loc(unknown), %arg38: tensor<!tf_type.resource> loc(unknown), %arg39: tensor<!tf_type.resource> loc(unknown), %arg40: tensor<!tf_type.resource> loc(unknown), %arg41: tensor<!tf_type.resource> loc(unknown), %arg42: tensor<!tf_type.resource> loc(unknown), %arg43: tensor<!tf_type.resource> loc(unknown), %arg44: tensor<!tf_type.resource> loc(unknown), %arg45: tensor<!tf_type.resource> loc(unknown), %arg46: tensor<!tf_type.resource> loc(unknown), %arg47: tensor<!tf_type.resource> loc(unknown), %arg48: tensor<!tf_type.resource> loc(unknown), %arg49: tensor<!tf_type.resource> loc(unknown), %arg50: tensor<!tf_type.resource> loc(unknown), %arg51: tensor<!tf_type.resource> loc(unknown), %arg52: tensor<!tf_type.resource> loc(unknown), %arg53: tensor<!tf_type.resource> loc(unknown), %arg54: tensor<!tf_type.resource> loc(unknown), %arg55: tensor<!tf_type.resource> loc(unknown), %arg56: tensor<!tf_type.resource> loc(unknown), %arg57: tensor<!tf_type.resource> loc(unknown), %arg58: tensor<!tf_type.resource> loc(unknown), %arg59: tensor<!tf_type.resource> loc(unknown), %arg60: tensor<!tf_type.resource> loc(unknown), %arg61: tensor<!tf_type.resource> loc(unknown), %arg62: tensor<!tf_type.resource> loc(unknown), %arg63: tensor<!tf_type.resource> loc(unknown), %arg64: tensor<!tf_type.resource> loc(unknown), %arg65: tensor<!tf_type.resource> loc(unknown), %arg66: tensor<!tf_type.resource> loc(unknown), %arg67: tensor<!tf_type.resource> loc(unknown), %arg68: tensor<!tf_type.resource> loc(unknown), %arg69: tensor<!tf_type.resource> loc(unknown), %arg70: tensor<!tf_type.resource> loc(unknown), %arg71: tensor<!tf_type.resource> loc(unknown), %arg72: tensor<!tf_type.resource> loc(unknown), %arg73: tensor<!tf_type.resource> loc(unknown), %arg74: tensor<!tf_type.resource> loc(unknown), %arg75: tensor<!tf_type.resource> loc(unknown), %arg76: tensor<!tf_type.resource> loc(unknown), %arg77: tensor<!tf_type.resource> loc(unknown), %arg78: tensor<!tf_type.resource> loc(unknown), %arg79: tensor<!tf_type.resource> loc(unknown), %arg80: tensor<!tf_type.resource> loc(unknown), %arg81: tensor<!tf_type.resource> loc(unknown), %arg82: tensor<!tf_type.resource> loc(unknown), %arg83: tensor<!tf_type.resource> loc(unknown), %arg84: tensor<!tf_type.resource> loc(unknown), %arg85: tensor<!tf_type.resource> loc(unknown), %arg86: tensor<!tf_type.resource> loc(unknown), %arg87: tensor<!tf_type.resource> loc(unknown), %arg88: tensor<!tf_type.resource> loc(unknown), %arg89: tensor<!tf_type.resource> loc(unknown), %arg90: tensor<!tf_type.resource> loc(unknown), %arg91: tensor<!tf_type.resource> loc(unknown), %arg92: tensor<!tf_type.resource> loc(unknown), %arg93: tensor<!tf_type.resource> loc(unknown), %arg94: tensor<!tf_type.resource> loc(unknown), %arg95: tensor<!tf_type.resource> loc(unknown), %arg96: tensor<!tf_type.resource> loc(unknown), %arg97: tensor<!tf_type.resource> loc(unknown), %arg98: tensor<!tf_type.resource> loc(unknown), %arg99: tensor<!tf_type.resource> loc(unknown), %arg100: tensor<!tf_type.resource> loc(unknown), %arg101: tensor<!tf_type.resource> loc(unknown), %arg102: tensor<!tf_type.resource> loc(unknown), %arg103: tensor<!tf_type.resource> loc(unknown), %arg104: tensor<!tf_type.resource> loc(unknown), %arg105: tensor<!tf_type.resource> loc(unknown), %arg106: tensor<!tf_type.resource> loc(unknown), %arg107: tensor<!tf_type.resource> loc(unknown), %arg108: tensor<!tf_type.resource> loc(unknown), %arg109: tensor<!tf_type.resource> loc(unknown), %arg110: tensor<!tf_type.resource> loc(unknown), %arg111: tensor<!tf_type.resource> loc(unknown), %arg112: tensor<!tf_type.resource> loc(unknown), %arg113: tensor<!tf_type.resource> loc(unknown), %arg114: tensor<!tf_type.resource> loc(unknown), %arg115: tensor<!tf_type.resource> loc(unknown), %arg116: tensor<!tf_type.resource> loc(unknown), %arg117: tensor<!tf_type.resource> loc(unknown), %arg118: tensor<!tf_type.resource> loc(unknown), %arg119: tensor<!tf_type.resource> loc(unknown), %arg120: tensor<!tf_type.resource> loc(unknown), %arg121: tensor<!tf_type.resource> loc(unknown), %arg122: tensor<!tf_type.resource> loc(unknown), %arg123: tensor<!tf_type.resource> loc(unknown), %arg124: tensor<!tf_type.resource> loc(unknown), %arg125: tensor<!tf_type.resource> loc(unknown), %arg126: tensor<!tf_type.resource> loc(unknown), %arg127: tensor<!tf_type.resource> loc(unknown), %arg128: tensor<!tf_type.resource> loc(unknown), %arg129: tensor<!tf_type.resource> loc(unknown), %arg130: tensor<!tf_type.resource> loc(unknown), %arg131: tensor<!tf_type.resource> loc(unknown), %arg132: tensor<!tf_type.resource> loc(unknown), %arg133: tensor<!tf_type.resource> loc(unknown), %arg134: tensor<!tf_type.resource> loc(unknown), %arg135: tensor<!tf_type.resource> loc(unknown), %arg136: tensor<!tf_type.resource> loc(unknown), %arg137: tensor<!tf_type.resource> loc(unknown), %arg138: tensor<!tf_type.resource> loc(unknown), %arg139: tensor<!tf_type.resource> loc(unknown), %arg140: tensor<!tf_type.resource> loc(unknown), %arg141: tensor<!tf_type.resource> loc(unknown), %arg142: tensor<!tf_type.resource> loc(unknown), %arg143: tensor<!tf_type.resource> loc(unknown), %arg144: tensor<!tf_type.resource> loc(unknown), %arg145: tensor<!tf_type.resource> loc(unknown), %arg146: tensor<!tf_type.resource> loc(unknown), %arg147: tensor<!tf_type.resource> loc(unknown), %arg148: tensor<!tf_type.resource> loc(unknown), %arg149: tensor<!tf_type.resource> loc(unknown), %arg150: tensor<!tf_type.resource> loc(unknown), %arg151: tensor<!tf_type.resource> loc(unknown), %arg152: tensor<!tf_type.resource> loc(unknown), %arg153: tensor<!tf_type.resource> loc(unknown), %arg154: tensor<!tf_type.resource> loc(unknown), %arg155: tensor<!tf_type.resource> loc(unknown), %arg156: tensor<!tf_type.resource> loc(unknown), %arg157: tensor<!tf_type.resource> loc(unknown), %arg158: tensor<!tf_type.resource> loc(unknown), %arg159: tensor<!tf_type.resource> loc(unknown), %arg160: tensor<!tf_type.resource> loc(unknown), %arg161: tensor<!tf_type.resource> loc(unknown), %arg162: tensor<!tf_type.resource> loc(unknown), %arg163: tensor<!tf_type.resource> loc(unknown), %arg164: tensor<!tf_type.resource> loc(unknown), %arg165: tensor<!tf_type.resource> loc(unknown), %arg166: tensor<!tf_type.resource> loc(unknown), %arg167: tensor<!tf_type.resource> loc(unknown), %arg168: tensor<!tf_type.resource> loc(unknown), %arg169: tensor<!tf_type.resource> loc(unknown), %arg170: tensor<!tf_type.resource> loc(unknown), %arg171: tensor<!tf_type.resource> loc(unknown), %arg172: tensor<!tf_type.resource> loc(unknown), %arg173: tensor<!tf_type.resource> loc(unknown), %arg174: tensor<!tf_type.resource> loc(unknown), %arg175: tensor<!tf_type.resource> loc(unknown), %arg176: tensor<!tf_type.resource> loc(unknown), %arg177: tensor<!tf_type.resource> loc(unknown), %arg178: tensor<!tf_type.resource> loc(unknown), %arg179: tensor<!tf_type.resource> loc(unknown), %arg180: tensor<!tf_type.resource> loc(unknown), %arg181: tensor<!tf_type.resource> loc(unknown), %arg182: tensor<!tf_type.resource> loc(unknown), %arg183: tensor<!tf_type.resource> loc(unknown), %arg184: tensor<!tf_type.resource> loc(unknown), %arg185: tensor<!tf_type.resource> loc(unknown), %arg186: tensor<!tf_type.resource> loc(unknown), %arg187: tensor<!tf_type.resource> loc(unknown), %arg188: tensor<!tf_type.resource> loc(unknown), %arg189: tensor<!tf_type.resource> loc(unknown), %arg190: tensor<!tf_type.resource> loc(unknown), %arg191: tensor<!tf_type.resource> loc(unknown), %arg192: tensor<!tf_type.resource> loc(unknown), %arg193: tensor<!tf_type.resource> loc(unknown), %arg194: tensor<!tf_type.resource> loc(unknown), %arg195: tensor<!tf_type.resource> loc(unknown), %arg196: tensor<!tf_type.resource> loc(unknown), %arg197: tensor<!tf_type.resource> loc(unknown), %arg198: tensor<!tf_type.resource> loc(unknown), %arg199: tensor<!tf_type.resource> loc(unknown), %arg200: tensor<!tf_type.resource> loc(unknown), %arg201: tensor<!tf_type.resource> loc(unknown), %arg202: tensor<!tf_type.resource> loc(unknown), %arg203: tensor<!tf_type.resource> loc(unknown), %arg204: tensor<!tf_type.resource> loc(unknown), %arg205: tensor<!tf_type.resource> loc(unknown), %arg206: tensor<!tf_type.resource> loc(unknown), %arg207: tensor<!tf_type.resource> loc(unknown), %arg208: tensor<!tf_type.resource> loc(unknown), %arg209: tensor<!tf_type.resource> loc(unknown), %arg210: tensor<!tf_type.resource> loc(unknown), %arg211: tensor<!tf_type.resource> loc(unknown), %arg212: tensor<!tf_type.resource> loc(unknown), %arg213: tensor<!tf_type.resource> loc(unknown), %arg214: tensor<!tf_type.resource> loc(unknown), %arg215: tensor<!tf_type.resource> loc(unknown), %arg216: tensor<!tf_type.resource> loc(unknown), %arg217: tensor<!tf_type.resource> loc(unknown), %arg218: tensor<!tf_type.resource> loc(unknown), %arg219: tensor<!tf_type.resource> loc(unknown), %arg220: tensor<!tf_type.resource> loc(unknown), %arg221: tensor<!tf_type.resource> loc(unknown), %arg222: tensor<!tf_type.resource> loc(unknown), %arg223: tensor<!tf_type.resource> loc(unknown), %arg224: tensor<!tf_type.resource> loc(unknown), %arg225: tensor<!tf_type.resource> loc(unknown), %arg226: tensor<!tf_type.resource> loc(unknown), %arg227: tensor<!tf_type.resource> loc(unknown), %arg228: tensor<!tf_type.resource> loc(unknown), %arg229: tensor<!tf_type.resource> loc(unknown), %arg230: tensor<!tf_type.resource> loc(unknown), %arg231: tensor<!tf_type.resource> loc(unknown), %arg232: tensor<!tf_type.resource> loc(unknown), %arg233: tensor<!tf_type.resource> loc(unknown), %arg234: tensor<!tf_type.resource> loc(unknown), %arg235: tensor<!tf_type.resource> loc(unknown), %arg236: tensor<!tf_type.resource> loc(unknown), %arg237: tensor<!tf_type.resource> loc(unknown), %arg238: tensor<!tf_type.resource> loc(unknown), %arg239: tensor<!tf_type.resource> loc(unknown), %arg240: tensor<!tf_type.resource> loc(unknown), %arg241: tensor<!tf_type.resource> loc(unknown), %arg242: tensor<!tf_type.resource> loc(unknown), %arg243: tensor<!tf_type.resource> loc(unknown), %arg244: tensor<!tf_type.resource> loc(unknown), %arg245: tensor<!tf_type.resource> loc(unknown), %arg246: tensor<!tf_type.resource> loc(unknown), %arg247: tensor<!tf_type.resource> loc(unknown), %arg248: tensor<!tf_type.resource> loc(unknown), %arg249: tensor<!tf_type.resource> loc(unknown), %arg250: tensor<!tf_type.resource> loc(unknown), %arg251: tensor<!tf_type.resource> loc(unknown), %arg252: tensor<!tf_type.resource> loc(unknown), %arg253: tensor<!tf_type.resource> loc(unknown), %arg254: tensor<!tf_type.resource> loc(unknown), %arg255: tensor<!tf_type.resource> loc(unknown), %arg256: tensor<!tf_type.resource> loc(unknown), %arg257: tensor<!tf_type.resource> loc(unknown), %arg258: tensor<!tf_type.resource> loc(unknown), %arg259: tensor<!tf_type.resource> loc(unknown), %arg260: tensor<!tf_type.resource> loc(unknown), %arg261: tensor<!tf_type.resource> loc(unknown), %arg262: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x1000xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4469)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4470)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg160) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4471)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg159) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4472)
      %outputs_6, %control_7 = tf_executor.island wraps "tf.ReadVariableOp"(%arg158) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4473)
      %outputs_8, %control_9 = tf_executor.island wraps "tf.ReadVariableOp"(%arg157) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4474)
      %outputs_10, %control_11 = tf_executor.island wraps "tf.ReadVariableOp"(%arg156) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc4475)
      %outputs_12, %control_13 = tf_executor.island wraps "tf.ReadVariableOp"(%arg155) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4476)
      %outputs_14, %control_15 = tf_executor.island wraps "tf.ReadVariableOp"(%arg154) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4477)
      %outputs_16, %control_17 = tf_executor.island wraps "tf.ReadVariableOp"(%arg153) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4478)
      %outputs_18, %control_19 = tf_executor.island wraps "tf.ReadVariableOp"(%arg152) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4479)
      %outputs_20, %control_21 = tf_executor.island wraps "tf.ReadVariableOp"(%arg151) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc4480)
      %outputs_22, %control_23 = tf_executor.island wraps "tf.ReadVariableOp"(%arg165) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4481)
      %outputs_24, %control_25 = tf_executor.island wraps "tf.ReadVariableOp"(%arg164) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4482)
      %outputs_26, %control_27 = tf_executor.island wraps "tf.ReadVariableOp"(%arg163) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4483)
      %outputs_28, %control_29 = tf_executor.island wraps "tf.ReadVariableOp"(%arg162) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4484)
      %outputs_30, %control_31 = tf_executor.island wraps "tf.ReadVariableOp"(%arg161) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x96xf32> loc(#loc4485)
      %outputs_32, %control_33 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4486)
      %outputs_34, %control_35 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4487)
      %outputs_36, %control_37 = tf_executor.island wraps "tf.ReadVariableOp"(%arg175) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4488)
      %outputs_38, %control_39 = tf_executor.island wraps "tf.ReadVariableOp"(%arg174) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4489)
      %outputs_40, %control_41 = tf_executor.island wraps "tf.ReadVariableOp"(%arg173) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4490)
      %outputs_42, %control_43 = tf_executor.island wraps "tf.ReadVariableOp"(%arg172) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4491)
      %outputs_44, %control_45 = tf_executor.island wraps "tf.ReadVariableOp"(%arg171) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc4492)
      %outputs_46, %control_47 = tf_executor.island wraps "tf.ReadVariableOp"(%arg170) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4493)
      %outputs_48, %control_49 = tf_executor.island wraps "tf.ReadVariableOp"(%arg169) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4494)
      %outputs_50, %control_51 = tf_executor.island wraps "tf.ReadVariableOp"(%arg168) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4495)
      %outputs_52, %control_53 = tf_executor.island wraps "tf.ReadVariableOp"(%arg167) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4496)
      %outputs_54, %control_55 = tf_executor.island wraps "tf.ReadVariableOp"(%arg166) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc4497)
      %outputs_56, %control_57 = tf_executor.island wraps "tf.ReadVariableOp"(%arg180) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4498)
      %outputs_58, %control_59 = tf_executor.island wraps "tf.ReadVariableOp"(%arg179) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4499)
      %outputs_60, %control_61 = tf_executor.island wraps "tf.ReadVariableOp"(%arg178) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4500)
      %outputs_62, %control_63 = tf_executor.island wraps "tf.ReadVariableOp"(%arg177) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4501)
      %outputs_64, %control_65 = tf_executor.island wraps "tf.ReadVariableOp"(%arg176) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x96xf32> loc(#loc4502)
      %outputs_66, %control_67 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4503)
      %outputs_68, %control_69 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4504)
      %outputs_70, %control_71 = tf_executor.island wraps "tf.ReadVariableOp"(%arg190) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4505)
      %outputs_72, %control_73 = tf_executor.island wraps "tf.ReadVariableOp"(%arg189) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4506)
      %outputs_74, %control_75 = tf_executor.island wraps "tf.ReadVariableOp"(%arg188) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4507)
      %outputs_76, %control_77 = tf_executor.island wraps "tf.ReadVariableOp"(%arg187) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4508)
      %outputs_78, %control_79 = tf_executor.island wraps "tf.ReadVariableOp"(%arg186) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc4509)
      %outputs_80, %control_81 = tf_executor.island wraps "tf.ReadVariableOp"(%arg185) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4510)
      %outputs_82, %control_83 = tf_executor.island wraps "tf.ReadVariableOp"(%arg184) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4511)
      %outputs_84, %control_85 = tf_executor.island wraps "tf.ReadVariableOp"(%arg183) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4512)
      %outputs_86, %control_87 = tf_executor.island wraps "tf.ReadVariableOp"(%arg182) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4513)
      %outputs_88, %control_89 = tf_executor.island wraps "tf.ReadVariableOp"(%arg181) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc4514)
      %outputs_90, %control_91 = tf_executor.island wraps "tf.ReadVariableOp"(%arg195) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4515)
      %outputs_92, %control_93 = tf_executor.island wraps "tf.ReadVariableOp"(%arg194) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4516)
      %outputs_94, %control_95 = tf_executor.island wraps "tf.ReadVariableOp"(%arg193) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4517)
      %outputs_96, %control_97 = tf_executor.island wraps "tf.ReadVariableOp"(%arg192) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4518)
      %outputs_98, %control_99 = tf_executor.island wraps "tf.ReadVariableOp"(%arg191) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x96xf32> loc(#loc4519)
      %outputs_100, %control_101 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4520)
      %outputs_102, %control_103 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4521)
      %outputs_104, %control_105 = tf_executor.island wraps "tf.ReadVariableOp"(%arg205) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4522)
      %outputs_106, %control_107 = tf_executor.island wraps "tf.ReadVariableOp"(%arg204) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4523)
      %outputs_108, %control_109 = tf_executor.island wraps "tf.ReadVariableOp"(%arg203) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4524)
      %outputs_110, %control_111 = tf_executor.island wraps "tf.ReadVariableOp"(%arg202) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4525)
      %outputs_112, %control_113 = tf_executor.island wraps "tf.ReadVariableOp"(%arg201) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc4526)
      %outputs_114, %control_115 = tf_executor.island wraps "tf.ReadVariableOp"(%arg200) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4527)
      %outputs_116, %control_117 = tf_executor.island wraps "tf.ReadVariableOp"(%arg199) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4528)
      %outputs_118, %control_119 = tf_executor.island wraps "tf.ReadVariableOp"(%arg198) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4529)
      %outputs_120, %control_121 = tf_executor.island wraps "tf.ReadVariableOp"(%arg197) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4530)
      %outputs_122, %control_123 = tf_executor.island wraps "tf.ReadVariableOp"(%arg196) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc4531)
      %outputs_124, %control_125 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc4532)
      %outputs_126, %control_127 = tf_executor.island wraps "tf.ReadVariableOp"(%arg210) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4533)
      %outputs_128, %control_129 = tf_executor.island wraps "tf.ReadVariableOp"(%arg209) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4534)
      %outputs_130, %control_131 = tf_executor.island wraps "tf.ReadVariableOp"(%arg208) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4535)
      %outputs_132, %control_133 = tf_executor.island wraps "tf.ReadVariableOp"(%arg207) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4536)
      %outputs_134, %control_135 = tf_executor.island wraps "tf.ReadVariableOp"(%arg206) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x160xf32> loc(#loc4537)
      %outputs_136, %control_137 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4538)
      %outputs_138, %control_139 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4539)
      %outputs_140, %control_141 = tf_executor.island wraps "tf.ReadVariableOp"(%arg220) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4540)
      %outputs_142, %control_143 = tf_executor.island wraps "tf.ReadVariableOp"(%arg219) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4541)
      %outputs_144, %control_145 = tf_executor.island wraps "tf.ReadVariableOp"(%arg218) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4542)
      %outputs_146, %control_147 = tf_executor.island wraps "tf.ReadVariableOp"(%arg217) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4543)
      %outputs_148, %control_149 = tf_executor.island wraps "tf.ReadVariableOp"(%arg216) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc4544)
      %outputs_150, %control_151 = tf_executor.island wraps "tf.ReadVariableOp"(%arg215) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4545)
      %outputs_152, %control_153 = tf_executor.island wraps "tf.ReadVariableOp"(%arg214) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4546)
      %outputs_154, %control_155 = tf_executor.island wraps "tf.ReadVariableOp"(%arg213) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4547)
      %outputs_156, %control_157 = tf_executor.island wraps "tf.ReadVariableOp"(%arg212) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4548)
      %outputs_158, %control_159 = tf_executor.island wraps "tf.ReadVariableOp"(%arg211) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc4549)
      %outputs_160, %control_161 = tf_executor.island wraps "tf.ReadVariableOp"(%arg225) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4550)
      %outputs_162, %control_163 = tf_executor.island wraps "tf.ReadVariableOp"(%arg224) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4551)
      %outputs_164, %control_165 = tf_executor.island wraps "tf.ReadVariableOp"(%arg223) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4552)
      %outputs_166, %control_167 = tf_executor.island wraps "tf.ReadVariableOp"(%arg222) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4553)
      %outputs_168, %control_169 = tf_executor.island wraps "tf.ReadVariableOp"(%arg221) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x160xf32> loc(#loc4554)
      %outputs_170, %control_171 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4555)
      %outputs_172, %control_173 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4556)
      %outputs_174, %control_175 = tf_executor.island wraps "tf.ReadVariableOp"(%arg235) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4557)
      %outputs_176, %control_177 = tf_executor.island wraps "tf.ReadVariableOp"(%arg234) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4558)
      %outputs_178, %control_179 = tf_executor.island wraps "tf.ReadVariableOp"(%arg233) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4559)
      %outputs_180, %control_181 = tf_executor.island wraps "tf.ReadVariableOp"(%arg232) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4560)
      %outputs_182, %control_183 = tf_executor.island wraps "tf.ReadVariableOp"(%arg231) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc4561)
      %outputs_184, %control_185 = tf_executor.island wraps "tf.ReadVariableOp"(%arg230) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4562)
      %outputs_186, %control_187 = tf_executor.island wraps "tf.ReadVariableOp"(%arg229) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4563)
      %outputs_188, %control_189 = tf_executor.island wraps "tf.ReadVariableOp"(%arg228) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4564)
      %outputs_190, %control_191 = tf_executor.island wraps "tf.ReadVariableOp"(%arg227) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4565)
      %outputs_192, %control_193 = tf_executor.island wraps "tf.ReadVariableOp"(%arg226) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc4566)
      %outputs_194, %control_195 = tf_executor.island wraps "tf.ReadVariableOp"(%arg240) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4567)
      %outputs_196, %control_197 = tf_executor.island wraps "tf.ReadVariableOp"(%arg239) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4568)
      %outputs_198, %control_199 = tf_executor.island wraps "tf.ReadVariableOp"(%arg238) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4569)
      %outputs_200, %control_201 = tf_executor.island wraps "tf.ReadVariableOp"(%arg237) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4570)
      %outputs_202, %control_203 = tf_executor.island wraps "tf.ReadVariableOp"(%arg236) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x160xf32> loc(#loc4571)
      %outputs_204, %control_205 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4572)
      %outputs_206, %control_207 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4573)
      %outputs_208, %control_209 = tf_executor.island wraps "tf.ReadVariableOp"(%arg250) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4574)
      %outputs_210, %control_211 = tf_executor.island wraps "tf.ReadVariableOp"(%arg249) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4575)
      %outputs_212, %control_213 = tf_executor.island wraps "tf.ReadVariableOp"(%arg248) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4576)
      %outputs_214, %control_215 = tf_executor.island wraps "tf.ReadVariableOp"(%arg247) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4577)
      %outputs_216, %control_217 = tf_executor.island wraps "tf.ReadVariableOp"(%arg246) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc4578)
      %outputs_218, %control_219 = tf_executor.island wraps "tf.ReadVariableOp"(%arg245) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4579)
      %outputs_220, %control_221 = tf_executor.island wraps "tf.ReadVariableOp"(%arg244) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4580)
      %outputs_222, %control_223 = tf_executor.island wraps "tf.ReadVariableOp"(%arg243) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4581)
      %outputs_224, %control_225 = tf_executor.island wraps "tf.ReadVariableOp"(%arg242) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc4582)
      %outputs_226, %control_227 = tf_executor.island wraps "tf.ReadVariableOp"(%arg241) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc4583)
      %outputs_228, %control_229 = tf_executor.island wraps "tf.ReadVariableOp"(%arg255) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc4584)
      %outputs_230, %control_231 = tf_executor.island wraps "tf.ReadVariableOp"(%arg254) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc4585)
      %outputs_232, %control_233 = tf_executor.island wraps "tf.ReadVariableOp"(%arg253) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc4586)
      %outputs_234, %control_235 = tf_executor.island wraps "tf.ReadVariableOp"(%arg252) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc4587)
      %outputs_236, %control_237 = tf_executor.island wraps "tf.ReadVariableOp"(%arg251) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x320xf32> loc(#loc4588)
      %outputs_238, %control_239 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 96, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4589)
      %outputs_240, %control_241 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4590)
      %outputs_242, %control_243 = tf_executor.island wraps "tf.ReadVariableOp"(%arg25) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4591)
      %outputs_244, %control_245 = tf_executor.island wraps "tf.ReadVariableOp"(%arg24) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4592)
      %outputs_246, %control_247 = tf_executor.island wraps "tf.ReadVariableOp"(%arg23) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4593)
      %outputs_248, %control_249 = tf_executor.island wraps "tf.ReadVariableOp"(%arg22) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4594)
      %outputs_250, %control_251 = tf_executor.island wraps "tf.ReadVariableOp"(%arg21) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x96x1xf32> loc(#loc4595)
      %outputs_252, %control_253 = tf_executor.island wraps "tf.ReadVariableOp"(%arg20) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4596)
      %outputs_254, %control_255 = tf_executor.island wraps "tf.ReadVariableOp"(%arg19) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4597)
      %outputs_256, %control_257 = tf_executor.island wraps "tf.ReadVariableOp"(%arg18) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4598)
      %outputs_258, %control_259 = tf_executor.island wraps "tf.ReadVariableOp"(%arg17) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4599)
      %outputs_260, %control_261 = tf_executor.island wraps "tf.ReadVariableOp"(%arg16) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x16x96xf32> loc(#loc4600)
      %outputs_262, %control_263 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc4601)
      %outputs_264, %control_265 = tf_executor.island wraps "tf.ReadVariableOp"(%arg30) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc4602)
      %outputs_266, %control_267 = tf_executor.island wraps "tf.ReadVariableOp"(%arg29) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc4603)
      %outputs_268, %control_269 = tf_executor.island wraps "tf.ReadVariableOp"(%arg28) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc4604)
      %outputs_270, %control_271 = tf_executor.island wraps "tf.ReadVariableOp"(%arg27) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc4605)
      %outputs_272, %control_273 = tf_executor.island wraps "tf.ReadVariableOp"(%arg26) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x24xf32> loc(#loc4606)
      %outputs_274, %control_275 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 144, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4607)
      %outputs_276, %control_277 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4608)
      %outputs_278, %control_279 = tf_executor.island wraps "tf.ReadVariableOp"(%arg40) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4609)
      %outputs_280, %control_281 = tf_executor.island wraps "tf.ReadVariableOp"(%arg39) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4610)
      %outputs_282, %control_283 = tf_executor.island wraps "tf.ReadVariableOp"(%arg38) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4611)
      %outputs_284, %control_285 = tf_executor.island wraps "tf.ReadVariableOp"(%arg37) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4612)
      %outputs_286, %control_287 = tf_executor.island wraps "tf.ReadVariableOp"(%arg36) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x144x1xf32> loc(#loc4613)
      %outputs_288, %control_289 = tf_executor.island wraps "tf.ReadVariableOp"(%arg35) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4614)
      %outputs_290, %control_291 = tf_executor.island wraps "tf.ReadVariableOp"(%arg34) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4615)
      %outputs_292, %control_293 = tf_executor.island wraps "tf.ReadVariableOp"(%arg33) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4616)
      %outputs_294, %control_295 = tf_executor.island wraps "tf.ReadVariableOp"(%arg32) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4617)
      %outputs_296, %control_297 = tf_executor.island wraps "tf.ReadVariableOp"(%arg31) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x24x144xf32> loc(#loc4618)
      %outputs_298, %control_299 = tf_executor.island wraps "tf.ReadVariableOp"(%arg45) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc4619)
      %outputs_300, %control_301 = tf_executor.island wraps "tf.ReadVariableOp"(%arg44) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc4620)
      %outputs_302, %control_303 = tf_executor.island wraps "tf.ReadVariableOp"(%arg43) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc4621)
      %outputs_304, %control_305 = tf_executor.island wraps "tf.ReadVariableOp"(%arg42) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc4622)
      %outputs_306, %control_307 = tf_executor.island wraps "tf.ReadVariableOp"(%arg41) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x144x24xf32> loc(#loc4623)
      %outputs_308, %control_309 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 144, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4624)
      %outputs_310, %control_311 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4625)
      %outputs_312, %control_313 = tf_executor.island wraps "tf.ReadVariableOp"(%arg55) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4626)
      %outputs_314, %control_315 = tf_executor.island wraps "tf.ReadVariableOp"(%arg54) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4627)
      %outputs_316, %control_317 = tf_executor.island wraps "tf.ReadVariableOp"(%arg53) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4628)
      %outputs_318, %control_319 = tf_executor.island wraps "tf.ReadVariableOp"(%arg52) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4629)
      %outputs_320, %control_321 = tf_executor.island wraps "tf.ReadVariableOp"(%arg51) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x144x1xf32> loc(#loc4630)
      %outputs_322, %control_323 = tf_executor.island wraps "tf.ReadVariableOp"(%arg50) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4631)
      %outputs_324, %control_325 = tf_executor.island wraps "tf.ReadVariableOp"(%arg49) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4632)
      %outputs_326, %control_327 = tf_executor.island wraps "tf.ReadVariableOp"(%arg48) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4633)
      %outputs_328, %control_329 = tf_executor.island wraps "tf.ReadVariableOp"(%arg47) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc4634)
      %outputs_330, %control_331 = tf_executor.island wraps "tf.ReadVariableOp"(%arg46) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x24x144xf32> loc(#loc4635)
      %outputs_332, %control_333 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc4636)
      %outputs_334, %control_335 = tf_executor.island wraps "tf.ReadVariableOp"(%arg60) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4637)
      %outputs_336, %control_337 = tf_executor.island wraps "tf.ReadVariableOp"(%arg59) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4638)
      %outputs_338, %control_339 = tf_executor.island wraps "tf.ReadVariableOp"(%arg58) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4639)
      %outputs_340, %control_341 = tf_executor.island wraps "tf.ReadVariableOp"(%arg57) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4640)
      %outputs_342, %control_343 = tf_executor.island wraps "tf.ReadVariableOp"(%arg56) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x144x32xf32> loc(#loc4641)
      %outputs_344, %control_345 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4642)
      %outputs_346, %control_347 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4643)
      %outputs_348, %control_349 = tf_executor.island wraps "tf.ReadVariableOp"(%arg70) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4644)
      %outputs_350, %control_351 = tf_executor.island wraps "tf.ReadVariableOp"(%arg69) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4645)
      %outputs_352, %control_353 = tf_executor.island wraps "tf.ReadVariableOp"(%arg68) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4646)
      %outputs_354, %control_355 = tf_executor.island wraps "tf.ReadVariableOp"(%arg67) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4647)
      %outputs_356, %control_357 = tf_executor.island wraps "tf.ReadVariableOp"(%arg66) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc4648)
      %outputs_358, %control_359 = tf_executor.island wraps "tf.ReadVariableOp"(%arg65) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4649)
      %outputs_360, %control_361 = tf_executor.island wraps "tf.ReadVariableOp"(%arg64) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4650)
      %outputs_362, %control_363 = tf_executor.island wraps "tf.ReadVariableOp"(%arg63) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4651)
      %outputs_364, %control_365 = tf_executor.island wraps "tf.ReadVariableOp"(%arg62) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4652)
      %outputs_366, %control_367 = tf_executor.island wraps "tf.ReadVariableOp"(%arg61) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc4653)
      %outputs_368, %control_369 = tf_executor.island wraps "tf.ReadVariableOp"(%arg75) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4654)
      %outputs_370, %control_371 = tf_executor.island wraps "tf.ReadVariableOp"(%arg74) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4655)
      %outputs_372, %control_373 = tf_executor.island wraps "tf.ReadVariableOp"(%arg73) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4656)
      %outputs_374, %control_375 = tf_executor.island wraps "tf.ReadVariableOp"(%arg72) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4657)
      %outputs_376, %control_377 = tf_executor.island wraps "tf.ReadVariableOp"(%arg71) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x32xf32> loc(#loc4658)
      %outputs_378, %control_379 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4659)
      %outputs_380, %control_381 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4660)
      %outputs_382, %control_383 = tf_executor.island wraps "tf.ReadVariableOp"(%arg85) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4661)
      %outputs_384, %control_385 = tf_executor.island wraps "tf.ReadVariableOp"(%arg84) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4662)
      %outputs_386, %control_387 = tf_executor.island wraps "tf.ReadVariableOp"(%arg83) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4663)
      %outputs_388, %control_389 = tf_executor.island wraps "tf.ReadVariableOp"(%arg82) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4664)
      %outputs_390, %control_391 = tf_executor.island wraps "tf.ReadVariableOp"(%arg81) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc4665)
      %outputs_392, %control_393 = tf_executor.island wraps "tf.ReadVariableOp"(%arg80) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4666)
      %outputs_394, %control_395 = tf_executor.island wraps "tf.ReadVariableOp"(%arg79) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4667)
      %outputs_396, %control_397 = tf_executor.island wraps "tf.ReadVariableOp"(%arg78) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4668)
      %outputs_398, %control_399 = tf_executor.island wraps "tf.ReadVariableOp"(%arg77) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4669)
      %outputs_400, %control_401 = tf_executor.island wraps "tf.ReadVariableOp"(%arg76) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc4670)
      %outputs_402, %control_403 = tf_executor.island wraps "tf.ReadVariableOp"(%arg90) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4671)
      %outputs_404, %control_405 = tf_executor.island wraps "tf.ReadVariableOp"(%arg89) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4672)
      %outputs_406, %control_407 = tf_executor.island wraps "tf.ReadVariableOp"(%arg88) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4673)
      %outputs_408, %control_409 = tf_executor.island wraps "tf.ReadVariableOp"(%arg87) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4674)
      %outputs_410, %control_411 = tf_executor.island wraps "tf.ReadVariableOp"(%arg86) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x32xf32> loc(#loc4675)
      %outputs_412, %control_413 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4676)
      %outputs_414, %control_415 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4677)
      %outputs_416, %control_417 = tf_executor.island wraps "tf.ReadVariableOp"(%arg100) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4678)
      %outputs_418, %control_419 = tf_executor.island wraps "tf.ReadVariableOp"(%arg99) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4679)
      %outputs_420, %control_421 = tf_executor.island wraps "tf.ReadVariableOp"(%arg98) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4680)
      %outputs_422, %control_423 = tf_executor.island wraps "tf.ReadVariableOp"(%arg97) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4681)
      %outputs_424, %control_425 = tf_executor.island wraps "tf.ReadVariableOp"(%arg96) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc4682)
      %outputs_426, %control_427 = tf_executor.island wraps "tf.ReadVariableOp"(%arg95) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4683)
      %outputs_428, %control_429 = tf_executor.island wraps "tf.ReadVariableOp"(%arg94) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4684)
      %outputs_430, %control_431 = tf_executor.island wraps "tf.ReadVariableOp"(%arg93) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4685)
      %outputs_432, %control_433 = tf_executor.island wraps "tf.ReadVariableOp"(%arg92) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc4686)
      %outputs_434, %control_435 = tf_executor.island wraps "tf.ReadVariableOp"(%arg91) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc4687)
      %outputs_436, %control_437 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc4688)
      %outputs_438, %control_439 = tf_executor.island wraps "tf.ReadVariableOp"(%arg105) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4689)
      %outputs_440, %control_441 = tf_executor.island wraps "tf.ReadVariableOp"(%arg104) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4690)
      %outputs_442, %control_443 = tf_executor.island wraps "tf.ReadVariableOp"(%arg103) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4691)
      %outputs_444, %control_445 = tf_executor.island wraps "tf.ReadVariableOp"(%arg102) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4692)
      %outputs_446, %control_447 = tf_executor.island wraps "tf.ReadVariableOp"(%arg101) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x64xf32> loc(#loc4693)
      %outputs_448, %control_449 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4694)
      %outputs_450, %control_451 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4695)
      %outputs_452, %control_453 = tf_executor.island wraps "tf.ReadVariableOp"(%arg115) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4696)
      %outputs_454, %control_455 = tf_executor.island wraps "tf.ReadVariableOp"(%arg114) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4697)
      %outputs_456, %control_457 = tf_executor.island wraps "tf.ReadVariableOp"(%arg113) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4698)
      %outputs_458, %control_459 = tf_executor.island wraps "tf.ReadVariableOp"(%arg112) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4699)
      %outputs_460, %control_461 = tf_executor.island wraps "tf.ReadVariableOp"(%arg111) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc4700)
      %outputs_462, %control_463 = tf_executor.island wraps "tf.ReadVariableOp"(%arg110) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4701)
      %outputs_464, %control_465 = tf_executor.island wraps "tf.ReadVariableOp"(%arg109) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4702)
      %outputs_466, %control_467 = tf_executor.island wraps "tf.ReadVariableOp"(%arg108) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4703)
      %outputs_468, %control_469 = tf_executor.island wraps "tf.ReadVariableOp"(%arg107) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4704)
      %outputs_470, %control_471 = tf_executor.island wraps "tf.ReadVariableOp"(%arg106) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc4705)
      %outputs_472, %control_473 = tf_executor.island wraps "tf.ReadVariableOp"(%arg120) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4706)
      %outputs_474, %control_475 = tf_executor.island wraps "tf.ReadVariableOp"(%arg119) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4707)
      %outputs_476, %control_477 = tf_executor.island wraps "tf.ReadVariableOp"(%arg118) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4708)
      %outputs_478, %control_479 = tf_executor.island wraps "tf.ReadVariableOp"(%arg117) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4709)
      %outputs_480, %control_481 = tf_executor.island wraps "tf.ReadVariableOp"(%arg116) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc4710)
      %outputs_482, %control_483 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4711)
      %outputs_484, %control_485 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4712)
      %outputs_486, %control_487 = tf_executor.island wraps "tf.ReadVariableOp"(%arg130) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4713)
      %outputs_488, %control_489 = tf_executor.island wraps "tf.ReadVariableOp"(%arg129) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4714)
      %outputs_490, %control_491 = tf_executor.island wraps "tf.ReadVariableOp"(%arg128) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4715)
      %outputs_492, %control_493 = tf_executor.island wraps "tf.ReadVariableOp"(%arg127) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4716)
      %outputs_494, %control_495 = tf_executor.island wraps "tf.ReadVariableOp"(%arg126) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc4717)
      %outputs_496, %control_497 = tf_executor.island wraps "tf.ReadVariableOp"(%arg125) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4718)
      %outputs_498, %control_499 = tf_executor.island wraps "tf.ReadVariableOp"(%arg124) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4719)
      %outputs_500, %control_501 = tf_executor.island wraps "tf.ReadVariableOp"(%arg123) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4720)
      %outputs_502, %control_503 = tf_executor.island wraps "tf.ReadVariableOp"(%arg122) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4721)
      %outputs_504, %control_505 = tf_executor.island wraps "tf.ReadVariableOp"(%arg121) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc4722)
      %outputs_506, %control_507 = tf_executor.island wraps "tf.ReadVariableOp"(%arg135) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4723)
      %outputs_508, %control_509 = tf_executor.island wraps "tf.ReadVariableOp"(%arg134) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4724)
      %outputs_510, %control_511 = tf_executor.island wraps "tf.ReadVariableOp"(%arg133) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4725)
      %outputs_512, %control_513 = tf_executor.island wraps "tf.ReadVariableOp"(%arg132) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4726)
      %outputs_514, %control_515 = tf_executor.island wraps "tf.ReadVariableOp"(%arg131) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc4727)
      %outputs_516, %control_517 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4728)
      %outputs_518, %control_519 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4729)
      %outputs_520, %control_521 = tf_executor.island wraps "tf.ReadVariableOp"(%arg145) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4730)
      %outputs_522, %control_523 = tf_executor.island wraps "tf.ReadVariableOp"(%arg144) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4731)
      %outputs_524, %control_525 = tf_executor.island wraps "tf.ReadVariableOp"(%arg143) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4732)
      %outputs_526, %control_527 = tf_executor.island wraps "tf.ReadVariableOp"(%arg142) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4733)
      %outputs_528, %control_529 = tf_executor.island wraps "tf.ReadVariableOp"(%arg141) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc4734)
      %outputs_530, %control_531 = tf_executor.island wraps "tf.ReadVariableOp"(%arg140) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4735)
      %outputs_532, %control_533 = tf_executor.island wraps "tf.ReadVariableOp"(%arg139) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4736)
      %outputs_534, %control_535 = tf_executor.island wraps "tf.ReadVariableOp"(%arg138) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4737)
      %outputs_536, %control_537 = tf_executor.island wraps "tf.ReadVariableOp"(%arg137) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4738)
      %outputs_538, %control_539 = tf_executor.island wraps "tf.ReadVariableOp"(%arg136) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc4739)
      %outputs_540, %control_541 = tf_executor.island wraps "tf.ReadVariableOp"(%arg150) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4740)
      %outputs_542, %control_543 = tf_executor.island wraps "tf.ReadVariableOp"(%arg149) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4741)
      %outputs_544, %control_545 = tf_executor.island wraps "tf.ReadVariableOp"(%arg148) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4742)
      %outputs_546, %control_547 = tf_executor.island wraps "tf.ReadVariableOp"(%arg147) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc4743)
      %outputs_548, %control_549 = tf_executor.island wraps "tf.ReadVariableOp"(%arg146) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc4744)
      %outputs_550, %control_551 = tf_executor.island wraps "tf.ReadVariableOp"(%arg5) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4745)
      %outputs_552, %control_553 = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4746)
      %outputs_554, %control_555 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4747)
      %outputs_556, %control_557 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4748)
      %outputs_558, %control_559 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x3x32xf32> loc(#loc4749)
      %outputs_560, %control_561 = tf_executor.island wraps "tf.ReadVariableOp"(%arg260) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc4750)
      %outputs_562, %control_563 = tf_executor.island wraps "tf.ReadVariableOp"(%arg259) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc4751)
      %outputs_564, %control_565 = tf_executor.island wraps "tf.ReadVariableOp"(%arg258) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc4752)
      %outputs_566, %control_567 = tf_executor.island wraps "tf.ReadVariableOp"(%arg257) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc4753)
      %outputs_568, %control_569 = tf_executor.island wraps "tf.ReadVariableOp"(%arg256) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x320x1280xf32> loc(#loc4754)
      %outputs_570, %control_571 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 32, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4755)
      %outputs_572, %control_573 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4756)
      %outputs_574, %control_575 = tf_executor.island wraps "tf.ReadVariableOp"(%arg10) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4757)
      %outputs_576, %control_577 = tf_executor.island wraps "tf.ReadVariableOp"(%arg9) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4758)
      %outputs_578, %control_579 = tf_executor.island wraps "tf.ReadVariableOp"(%arg8) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4759)
      %outputs_580, %control_581 = tf_executor.island wraps "tf.ReadVariableOp"(%arg7) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc4760)
      %outputs_582, %control_583 = tf_executor.island wraps "tf.ReadVariableOp"(%arg6) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x32x1xf32> loc(#loc4761)
      %outputs_584, %control_585 = tf_executor.island wraps "tf.ReadVariableOp"(%arg15) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc4762)
      %outputs_586, %control_587 = tf_executor.island wraps "tf.ReadVariableOp"(%arg14) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc4763)
      %outputs_588, %control_589 = tf_executor.island wraps "tf.ReadVariableOp"(%arg13) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc4764)
      %outputs_590, %control_591 = tf_executor.island wraps "tf.ReadVariableOp"(%arg12) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc4765)
      %outputs_592, %control_593 = tf_executor.island wraps "tf.ReadVariableOp"(%arg11) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x16xf32> loc(#loc4766)
      %outputs_594, %control_595 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[1, 2]> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4767)
      %outputs_596, %control_597 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs_558) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 2, 2, 1], use_cudnn_on_gpu = true} : (tensor<?x224x224x3xf32>, tensor<3x3x3x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc4768)
      %outputs_598:6, %control_599 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_596, %outputs_556, %outputs_554, %outputs_552, %outputs_550) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc4769)
      %outputs_600, %control_601 = tf_executor.island wraps "tf.Relu6"(%outputs_598#0) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc4770)
      %outputs_602, %control_603 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_600, %outputs_582) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x112x112x32xf32>, tensor<3x3x32x1xf32>) -> tensor<?x112x112x32xf32> loc(#loc4771)
      %outputs_604:6, %control_605 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_602, %outputs_580, %outputs_578, %outputs_576, %outputs_574) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc4772)
      %outputs_606, %control_607 = tf_executor.island wraps "tf.Relu6"(%outputs_604#0) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc4773)
      %outputs_608, %control_609 = tf_executor.island wraps "tf.Conv2D"(%outputs_606, %outputs_592) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x112x112x32xf32>, tensor<1x1x32x16xf32>) -> tensor<?x112x112x16xf32> loc(#loc4774)
      %outputs_610:6, %control_611 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_608, %outputs_590, %outputs_588, %outputs_586, %outputs_584) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x112x112x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> (tensor<?x112x112x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<*xf32>) loc(#loc4775)
      %outputs_612, %control_613 = tf_executor.island wraps "tf.Conv2D"(%outputs_610#0, %outputs_260) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x112x112x16xf32>, tensor<1x1x16x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc4776)
      %outputs_614:6, %control_615 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_612, %outputs_258, %outputs_256, %outputs_254, %outputs_252) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x112x112x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x112x112x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc4777)
      %outputs_616, %control_617 = tf_executor.island wraps "tf.Relu6"(%outputs_614#0) {device = ""} : (tensor<?x112x112x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc4778)
      %outputs_618, %control_619 = tf_executor.island wraps "tf.Pad"(%outputs_616, %outputs_262) {device = ""} : (tensor<?x112x112x96xf32>, tensor<4x2xi32>) -> tensor<?x113x113x96xf32> loc(#loc4779)
      %outputs_620, %control_621 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_618, %outputs_250) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x113x113x96xf32>, tensor<3x3x96x1xf32>) -> tensor<?x56x56x96xf32> loc(#loc4780)
      %outputs_622:6, %control_623 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_620, %outputs_248, %outputs_246, %outputs_244, %outputs_242) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x56x56x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x56x56x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc4781)
      %outputs_624, %control_625 = tf_executor.island wraps "tf.Relu6"(%outputs_622#0) {device = ""} : (tensor<?x56x56x96xf32>) -> tensor<?x56x56x96xf32> loc(#loc4782)
      %outputs_626, %control_627 = tf_executor.island wraps "tf.Conv2D"(%outputs_624, %outputs_272) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x96xf32>, tensor<1x1x96x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc4783)
      %outputs_628:6, %control_629 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_626, %outputs_270, %outputs_268, %outputs_266, %outputs_264) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc4784)
      %outputs_630, %control_631 = tf_executor.island wraps "tf.Conv2D"(%outputs_628#0, %outputs_296) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc4785)
      %outputs_632:6, %control_633 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_630, %outputs_294, %outputs_292, %outputs_290, %outputs_288) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc4786)
      %outputs_634, %control_635 = tf_executor.island wraps "tf.Relu6"(%outputs_632#0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc4787)
      %outputs_636, %control_637 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_634, %outputs_286) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x56x56x144xf32>, tensor<3x3x144x1xf32>) -> tensor<?x56x56x144xf32> loc(#loc4788)
      %outputs_638:6, %control_639 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_636, %outputs_284, %outputs_282, %outputs_280, %outputs_278) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc4789)
      %outputs_640, %control_641 = tf_executor.island wraps "tf.Relu6"(%outputs_638#0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc4790)
      %outputs_642, %control_643 = tf_executor.island wraps "tf.Conv2D"(%outputs_640, %outputs_306) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x144xf32>, tensor<1x1x144x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc4791)
      %outputs_644:6, %control_645 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_642, %outputs_304, %outputs_302, %outputs_300, %outputs_298) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc4792)
      %outputs_646, %control_647 = tf_executor.island wraps "tf.AddV2"(%outputs_628#0, %outputs_644#0) {device = ""} : (tensor<?x56x56x24xf32>, tensor<?x56x56x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc4793)
      %outputs_648, %control_649 = tf_executor.island wraps "tf.Conv2D"(%outputs_646, %outputs_330) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc4794)
      %outputs_650:6, %control_651 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_648, %outputs_328, %outputs_326, %outputs_324, %outputs_322) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc4795)
      %outputs_652, %control_653 = tf_executor.island wraps "tf.Relu6"(%outputs_650#0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc4796)
      %outputs_654, %control_655 = tf_executor.island wraps "tf.Pad"(%outputs_652, %outputs_332) {device = ""} : (tensor<?x56x56x144xf32>, tensor<4x2xi32>) -> tensor<?x57x57x144xf32> loc(#loc4797)
      %outputs_656, %control_657 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_654, %outputs_320) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x57x57x144xf32>, tensor<3x3x144x1xf32>) -> tensor<?x28x28x144xf32> loc(#loc4798)
      %outputs_658:6, %control_659 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_656, %outputs_318, %outputs_316, %outputs_314, %outputs_312) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x28x28x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc4799)
      %outputs_660, %control_661 = tf_executor.island wraps "tf.Relu6"(%outputs_658#0) {device = ""} : (tensor<?x28x28x144xf32>) -> tensor<?x28x28x144xf32> loc(#loc4800)
      %outputs_662, %control_663 = tf_executor.island wraps "tf.Conv2D"(%outputs_660, %outputs_342) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x144xf32>, tensor<1x1x144x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc4801)
      %outputs_664:6, %control_665 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_662, %outputs_340, %outputs_338, %outputs_336, %outputs_334) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc4802)
      %outputs_666, %control_667 = tf_executor.island wraps "tf.Conv2D"(%outputs_664#0, %outputs_366) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc4803)
      %outputs_668:6, %control_669 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_666, %outputs_364, %outputs_362, %outputs_360, %outputs_358) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc4804)
      %outputs_670, %control_671 = tf_executor.island wraps "tf.Relu6"(%outputs_668#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc4805)
      %outputs_672, %control_673 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_670, %outputs_356) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x28x28x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x28x28x192xf32> loc(#loc4806)
      %outputs_674:6, %control_675 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_672, %outputs_354, %outputs_352, %outputs_350, %outputs_348) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc4807)
      %outputs_676, %control_677 = tf_executor.island wraps "tf.Relu6"(%outputs_674#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc4808)
      %outputs_678, %control_679 = tf_executor.island wraps "tf.Conv2D"(%outputs_676, %outputs_376) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc4809)
      %outputs_680:6, %control_681 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_678, %outputs_374, %outputs_372, %outputs_370, %outputs_368) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc4810)
      %outputs_682, %control_683 = tf_executor.island wraps "tf.AddV2"(%outputs_664#0, %outputs_680#0) {device = ""} : (tensor<?x28x28x32xf32>, tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc4811)
      %outputs_684, %control_685 = tf_executor.island wraps "tf.Conv2D"(%outputs_682, %outputs_400) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc4812)
      %outputs_686:6, %control_687 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_684, %outputs_398, %outputs_396, %outputs_394, %outputs_392) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc4813)
      %outputs_688, %control_689 = tf_executor.island wraps "tf.Relu6"(%outputs_686#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc4814)
      %outputs_690, %control_691 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_688, %outputs_390) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x28x28x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x28x28x192xf32> loc(#loc4815)
      %outputs_692:6, %control_693 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_690, %outputs_388, %outputs_386, %outputs_384, %outputs_382) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc4816)
      %outputs_694, %control_695 = tf_executor.island wraps "tf.Relu6"(%outputs_692#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc4817)
      %outputs_696, %control_697 = tf_executor.island wraps "tf.Conv2D"(%outputs_694, %outputs_410) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc4818)
      %outputs_698:6, %control_699 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_696, %outputs_408, %outputs_406, %outputs_404, %outputs_402) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc4819)
      %outputs_700, %control_701 = tf_executor.island wraps "tf.AddV2"(%outputs_682, %outputs_698#0) {device = ""} : (tensor<?x28x28x32xf32>, tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc4820)
      %outputs_702, %control_703 = tf_executor.island wraps "tf.Conv2D"(%outputs_700, %outputs_434) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc4821)
      %outputs_704:6, %control_705 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_702, %outputs_432, %outputs_430, %outputs_428, %outputs_426) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc4822)
      %outputs_706, %control_707 = tf_executor.island wraps "tf.Relu6"(%outputs_704#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc4823)
      %outputs_708, %control_709 = tf_executor.island wraps "tf.Pad"(%outputs_706, %outputs_436) {device = ""} : (tensor<?x28x28x192xf32>, tensor<4x2xi32>) -> tensor<?x29x29x192xf32> loc(#loc4824)
      %outputs_710, %control_711 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_708, %outputs_424) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x29x29x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x14x14x192xf32> loc(#loc4825)
      %outputs_712:6, %control_713 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_710, %outputs_422, %outputs_420, %outputs_418, %outputs_416) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x14x14x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc4826)
      %outputs_714, %control_715 = tf_executor.island wraps "tf.Relu6"(%outputs_712#0) {device = ""} : (tensor<?x14x14x192xf32>) -> tensor<?x14x14x192xf32> loc(#loc4827)
      %outputs_716, %control_717 = tf_executor.island wraps "tf.Conv2D"(%outputs_714, %outputs_446) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x192xf32>, tensor<1x1x192x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc4828)
      %outputs_718:6, %control_719 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_716, %outputs_444, %outputs_442, %outputs_440, %outputs_438) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc4829)
      %outputs_720, %control_721 = tf_executor.island wraps "tf.Conv2D"(%outputs_718#0, %outputs_470) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc4830)
      %outputs_722:6, %control_723 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_720, %outputs_468, %outputs_466, %outputs_464, %outputs_462) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc4831)
      %outputs_724, %control_725 = tf_executor.island wraps "tf.Relu6"(%outputs_722#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc4832)
      %outputs_726, %control_727 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_724, %outputs_460) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc4833)
      %outputs_728:6, %control_729 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_726, %outputs_458, %outputs_456, %outputs_454, %outputs_452) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc4834)
      %outputs_730, %control_731 = tf_executor.island wraps "tf.Relu6"(%outputs_728#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc4835)
      %outputs_732, %control_733 = tf_executor.island wraps "tf.Conv2D"(%outputs_730, %outputs_480) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc4836)
      %outputs_734:6, %control_735 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_732, %outputs_478, %outputs_476, %outputs_474, %outputs_472) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc4837)
      %outputs_736, %control_737 = tf_executor.island wraps "tf.AddV2"(%outputs_718#0, %outputs_734#0) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc4838)
      %outputs_738, %control_739 = tf_executor.island wraps "tf.Conv2D"(%outputs_736, %outputs_504) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc4839)
      %outputs_740:6, %control_741 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_738, %outputs_502, %outputs_500, %outputs_498, %outputs_496) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc4840)
      %outputs_742, %control_743 = tf_executor.island wraps "tf.Relu6"(%outputs_740#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc4841)
      %outputs_744, %control_745 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_742, %outputs_494) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc4842)
      %outputs_746:6, %control_747 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_744, %outputs_492, %outputs_490, %outputs_488, %outputs_486) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc4843)
      %outputs_748, %control_749 = tf_executor.island wraps "tf.Relu6"(%outputs_746#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc4844)
      %outputs_750, %control_751 = tf_executor.island wraps "tf.Conv2D"(%outputs_748, %outputs_514) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc4845)
      %outputs_752:6, %control_753 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_750, %outputs_512, %outputs_510, %outputs_508, %outputs_506) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc4846)
      %outputs_754, %control_755 = tf_executor.island wraps "tf.AddV2"(%outputs_736, %outputs_752#0) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc4847)
      %outputs_756, %control_757 = tf_executor.island wraps "tf.Conv2D"(%outputs_754, %outputs_538) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc4848)
      %outputs_758:6, %control_759 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_756, %outputs_536, %outputs_534, %outputs_532, %outputs_530) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc4849)
      %outputs_760, %control_761 = tf_executor.island wraps "tf.Relu6"(%outputs_758#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc4850)
      %outputs_762, %control_763 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_760, %outputs_528) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc4851)
      %outputs_764:6, %control_765 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_762, %outputs_526, %outputs_524, %outputs_522, %outputs_520) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc4852)
      %outputs_766, %control_767 = tf_executor.island wraps "tf.Relu6"(%outputs_764#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc4853)
      %outputs_768, %control_769 = tf_executor.island wraps "tf.Conv2D"(%outputs_766, %outputs_548) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc4854)
      %outputs_770:6, %control_771 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_768, %outputs_546, %outputs_544, %outputs_542, %outputs_540) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc4855)
      %outputs_772, %control_773 = tf_executor.island wraps "tf.AddV2"(%outputs_754, %outputs_770#0) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc4856)
      %outputs_774, %control_775 = tf_executor.island wraps "tf.Conv2D"(%outputs_772, %outputs_20) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc4857)
      %outputs_776:6, %control_777 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_774, %outputs_18, %outputs_16, %outputs_14, %outputs_12) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc4858)
      %outputs_778, %control_779 = tf_executor.island wraps "tf.Relu6"(%outputs_776#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc4859)
      %outputs_780, %control_781 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_778, %outputs_10) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc4860)
      %outputs_782:6, %control_783 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_780, %outputs_8, %outputs_6, %outputs_4, %outputs_2) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc4861)
      %outputs_784, %control_785 = tf_executor.island wraps "tf.Relu6"(%outputs_782#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc4862)
      %outputs_786, %control_787 = tf_executor.island wraps "tf.Conv2D"(%outputs_784, %outputs_30) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc4863)
      %outputs_788:6, %control_789 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_786, %outputs_28, %outputs_26, %outputs_24, %outputs_22) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc4864)
      %outputs_790, %control_791 = tf_executor.island wraps "tf.Conv2D"(%outputs_788#0, %outputs_54) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc4865)
      %outputs_792:6, %control_793 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_790, %outputs_52, %outputs_50, %outputs_48, %outputs_46) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc4866)
      %outputs_794, %control_795 = tf_executor.island wraps "tf.Relu6"(%outputs_792#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc4867)
      %outputs_796, %control_797 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_794, %outputs_44) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x14x14x576xf32> loc(#loc4868)
      %outputs_798:6, %control_799 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_796, %outputs_42, %outputs_40, %outputs_38, %outputs_36) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc4869)
      %outputs_800, %control_801 = tf_executor.island wraps "tf.Relu6"(%outputs_798#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc4870)
      %outputs_802, %control_803 = tf_executor.island wraps "tf.Conv2D"(%outputs_800, %outputs_64) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc4871)
      %outputs_804:6, %control_805 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_802, %outputs_62, %outputs_60, %outputs_58, %outputs_56) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc4872)
      %outputs_806, %control_807 = tf_executor.island wraps "tf.AddV2"(%outputs_788#0, %outputs_804#0) {device = ""} : (tensor<?x14x14x96xf32>, tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc4873)
      %outputs_808, %control_809 = tf_executor.island wraps "tf.Conv2D"(%outputs_806, %outputs_88) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc4874)
      %outputs_810:6, %control_811 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_808, %outputs_86, %outputs_84, %outputs_82, %outputs_80) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc4875)
      %outputs_812, %control_813 = tf_executor.island wraps "tf.Relu6"(%outputs_810#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc4876)
      %outputs_814, %control_815 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_812, %outputs_78) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x14x14x576xf32> loc(#loc4877)
      %outputs_816:6, %control_817 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_814, %outputs_76, %outputs_74, %outputs_72, %outputs_70) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc4878)
      %outputs_818, %control_819 = tf_executor.island wraps "tf.Relu6"(%outputs_816#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc4879)
      %outputs_820, %control_821 = tf_executor.island wraps "tf.Conv2D"(%outputs_818, %outputs_98) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc4880)
      %outputs_822:6, %control_823 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_820, %outputs_96, %outputs_94, %outputs_92, %outputs_90) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc4881)
      %outputs_824, %control_825 = tf_executor.island wraps "tf.AddV2"(%outputs_806, %outputs_822#0) {device = ""} : (tensor<?x14x14x96xf32>, tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc4882)
      %outputs_826, %control_827 = tf_executor.island wraps "tf.Conv2D"(%outputs_824, %outputs_122) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc4883)
      %outputs_828:6, %control_829 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_826, %outputs_120, %outputs_118, %outputs_116, %outputs_114) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc4884)
      %outputs_830, %control_831 = tf_executor.island wraps "tf.Relu6"(%outputs_828#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc4885)
      %outputs_832, %control_833 = tf_executor.island wraps "tf.Pad"(%outputs_830, %outputs_124) {device = ""} : (tensor<?x14x14x576xf32>, tensor<4x2xi32>) -> tensor<?x15x15x576xf32> loc(#loc4886)
      %outputs_834, %control_835 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_832, %outputs_112) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x15x15x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x7x7x576xf32> loc(#loc4887)
      %outputs_836:6, %control_837 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_834, %outputs_110, %outputs_108, %outputs_106, %outputs_104) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x7x7x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc4888)
      %outputs_838, %control_839 = tf_executor.island wraps "tf.Relu6"(%outputs_836#0) {device = ""} : (tensor<?x7x7x576xf32>) -> tensor<?x7x7x576xf32> loc(#loc4889)
      %outputs_840, %control_841 = tf_executor.island wraps "tf.Conv2D"(%outputs_838, %outputs_134) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x576xf32>, tensor<1x1x576x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc4890)
      %outputs_842:6, %control_843 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_840, %outputs_132, %outputs_130, %outputs_128, %outputs_126) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc4891)
      %outputs_844, %control_845 = tf_executor.island wraps "tf.Conv2D"(%outputs_842#0, %outputs_158) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc4892)
      %outputs_846:6, %control_847 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_844, %outputs_156, %outputs_154, %outputs_152, %outputs_150) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc4893)
      %outputs_848, %control_849 = tf_executor.island wraps "tf.Relu6"(%outputs_846#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc4894)
      %outputs_850, %control_851 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_848, %outputs_148) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc4895)
      %outputs_852:6, %control_853 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_850, %outputs_146, %outputs_144, %outputs_142, %outputs_140) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc4896)
      %outputs_854, %control_855 = tf_executor.island wraps "tf.Relu6"(%outputs_852#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc4897)
      %outputs_856, %control_857 = tf_executor.island wraps "tf.Conv2D"(%outputs_854, %outputs_168) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc4898)
      %outputs_858:6, %control_859 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_856, %outputs_166, %outputs_164, %outputs_162, %outputs_160) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc4899)
      %outputs_860, %control_861 = tf_executor.island wraps "tf.AddV2"(%outputs_842#0, %outputs_858#0) {device = ""} : (tensor<?x7x7x160xf32>, tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc4900)
      %outputs_862, %control_863 = tf_executor.island wraps "tf.Conv2D"(%outputs_860, %outputs_192) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc4901)
      %outputs_864:6, %control_865 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_862, %outputs_190, %outputs_188, %outputs_186, %outputs_184) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc4902)
      %outputs_866, %control_867 = tf_executor.island wraps "tf.Relu6"(%outputs_864#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc4903)
      %outputs_868, %control_869 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_866, %outputs_182) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc4904)
      %outputs_870:6, %control_871 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_868, %outputs_180, %outputs_178, %outputs_176, %outputs_174) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc4905)
      %outputs_872, %control_873 = tf_executor.island wraps "tf.Relu6"(%outputs_870#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc4906)
      %outputs_874, %control_875 = tf_executor.island wraps "tf.Conv2D"(%outputs_872, %outputs_202) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc4907)
      %outputs_876:6, %control_877 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_874, %outputs_200, %outputs_198, %outputs_196, %outputs_194) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc4908)
      %outputs_878, %control_879 = tf_executor.island wraps "tf.AddV2"(%outputs_860, %outputs_876#0) {device = ""} : (tensor<?x7x7x160xf32>, tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc4909)
      %outputs_880, %control_881 = tf_executor.island wraps "tf.Conv2D"(%outputs_878, %outputs_226) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc4910)
      %outputs_882:6, %control_883 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_880, %outputs_224, %outputs_222, %outputs_220, %outputs_218) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc4911)
      %outputs_884, %control_885 = tf_executor.island wraps "tf.Relu6"(%outputs_882#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc4912)
      %outputs_886, %control_887 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_884, %outputs_216) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc4913)
      %outputs_888:6, %control_889 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_886, %outputs_214, %outputs_212, %outputs_210, %outputs_208) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc4914)
      %outputs_890, %control_891 = tf_executor.island wraps "tf.Relu6"(%outputs_888#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc4915)
      %outputs_892, %control_893 = tf_executor.island wraps "tf.Conv2D"(%outputs_890, %outputs_236) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x320xf32>) -> tensor<?x7x7x320xf32> loc(#loc4916)
      %outputs_894:6, %control_895 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_892, %outputs_234, %outputs_232, %outputs_230, %outputs_228) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>) -> (tensor<?x7x7x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<*xf32>) loc(#loc4917)
      %outputs_896, %control_897 = tf_executor.island wraps "tf.Conv2D"(%outputs_894#0, %outputs_568) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x320xf32>, tensor<1x1x320x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc4918)
      %outputs_898:6, %control_899 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_896, %outputs_566, %outputs_564, %outputs_562, %outputs_560) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e+00 : f32, is_training = false} : (tensor<?x7x7x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>) -> (tensor<?x7x7x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<*xf32>) loc(#loc4919)
      %outputs_900, %control_901 = tf_executor.island wraps "tf.Relu6"(%outputs_898#0) {device = ""} : (tensor<?x7x7x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc4920)
      %outputs_902, %control_903 = tf_executor.island wraps "tf.Mean"(%outputs_900, %outputs_594) {device = "", keep_dims = false} : (tensor<?x7x7x1280xf32>, tensor<2xi32>) -> tensor<?x1280xf32> loc(#loc4921)
      %outputs_904, %control_905 = tf_executor.island wraps "tf.ReadVariableOp"(%arg262) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1000xf32> loc(#loc4922)
      %outputs_906, %control_907 = tf_executor.island wraps "tf.ReadVariableOp"(%arg261) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280x1000xf32> loc(#loc4923)
      %control_908 = tf_executor.island(%control_559, %control_557, %control_555, %control_553, %control_551, %control_583, %control_581, %control_579, %control_577, %control_575, %control_593, %control_591, %control_589, %control_587, %control_585, %control_261, %control_259, %control_257, %control_255, %control_253, %control_251, %control_249, %control_247, %control_245, %control_243, %control_273, %control_271, %control_269, %control_267, %control_265, %control_297, %control_295, %control_293, %control_291, %control_289, %control_287, %control_285, %control_283, %control_281, %control_279, %control_307, %control_305, %control_303, %control_301, %control_299, %control_331, %control_329, %control_327, %control_325, %control_323, %control_321, %control_319, %control_317, %control_315, %control_313, %control_343, %control_341, %control_339, %control_337, %control_335, %control_367, %control_365, %control_363, %control_361, %control_359, %control_357, %control_355, %control_353, %control_351, %control_349, %control_377, %control_375, %control_373, %control_371, %control_369, %control_401, %control_399, %control_397, %control_395, %control_393, %control_391, %control_389, %control_387, %control_385, %control_383, %control_411, %control_409, %control_407, %control_405, %control_403, %control_435, %control_433, %control_431, %control_429, %control_427, %control_425, %control_423, %control_421, %control_419, %control_417, %control_447, %control_445, %control_443, %control_441, %control_439, %control_471, %control_469, %control_467, %control_465, %control_463, %control_461, %control_459, %control_457, %control_455, %control_453, %control_481, %control_479, %control_477, %control_475, %control_473, %control_505, %control_503, %control_501, %control_499, %control_497, %control_495, %control_493, %control_491, %control_489, %control_487, %control_515, %control_513, %control_511, %control_509, %control_507, %control_539, %control_537, %control_535, %control_533, %control_531, %control_529, %control_527, %control_525, %control_523, %control_521, %control_549, %control_547, %control_545, %control_543, %control_541, %control_21, %control_19, %control_17, %control_15, %control_13, %control_11, %control_9, %control_7, %control_5, %control_3, %control_31, %control_29, %control_27, %control_25, %control_23, %control_55, %control_53, %control_51, %control_49, %control_47, %control_45, %control_43, %control_41, %control_39, %control_37, %control_65, %control_63, %control_61, %control_59, %control_57, %control_89, %control_87, %control_85, %control_83, %control_81, %control_79, %control_77, %control_75, %control_73, %control_71, %control_99, %control_97, %control_95, %control_93, %control_91, %control_123, %control_121, %control_119, %control_117, %control_115, %control_113, %control_111, %control_109, %control_107, %control_105, %control_135, %control_133, %control_131, %control_129, %control_127, %control_159, %control_157, %control_155, %control_153, %control_151, %control_149, %control_147, %control_145, %control_143, %control_141, %control_169, %control_167, %control_165, %control_163, %control_161, %control_193, %control_191, %control_189, %control_187, %control_185, %control_183, %control_181, %control_179, %control_177, %control_175, %control_203, %control_201, %control_199, %control_197, %control_195, %control_227, %control_225, %control_223, %control_221, %control_219, %control_217, %control_215, %control_213, %control_211, %control_209, %control_237, %control_235, %control_233, %control_231, %control_229, %control_569, %control_567, %control_565, %control_563, %control_561, %control_907, %control_905) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc4924)
      %outputs_909, %control_910 = tf_executor.island wraps "tf.MatMul"(%outputs_902, %outputs_906) {device = "", transpose_a = false, transpose_b = false} : (tensor<?x1280xf32>, tensor<1280x1000xf32>) -> tensor<?x1000xf32> loc(#loc4925)
      %outputs_911, %control_912 = tf_executor.island wraps "tf.BiasAdd"(%outputs_909, %outputs_904) {data_format = "NHWC", device = ""} : (tensor<?x1000xf32>, tensor<1000xf32>) -> tensor<?x1000xf32> loc(#loc4926)
      %outputs_913, %control_914 = tf_executor.island wraps "tf.Softmax"(%outputs_911) {device = ""} : (tensor<?x1000xf32>) -> tensor<?x1000xf32> loc(#loc4927)
      %outputs_915, %control_916 = tf_executor.island(%control_908) wraps "tf.Identity"(%outputs_913) {device = ""} : (tensor<?x1000xf32>) -> tensor<?x1000xf32> loc(#loc4928)
      tf_executor.fetch %outputs_915, %control_559, %control_557, %control_555, %control_553, %control_551, %control_583, %control_581, %control_579, %control_577, %control_575, %control_593, %control_591, %control_589, %control_587, %control_585, %control_261, %control_259, %control_257, %control_255, %control_253, %control_251, %control_249, %control_247, %control_245, %control_243, %control_273, %control_271, %control_269, %control_267, %control_265, %control_297, %control_295, %control_293, %control_291, %control_289, %control_287, %control_285, %control_283, %control_281, %control_279, %control_307, %control_305, %control_303, %control_301, %control_299, %control_331, %control_329, %control_327, %control_325, %control_323, %control_321, %control_319, %control_317, %control_315, %control_313, %control_343, %control_341, %control_339, %control_337, %control_335, %control_367, %control_365, %control_363, %control_361, %control_359, %control_357, %control_355, %control_353, %control_351, %control_349, %control_377, %control_375, %control_373, %control_371, %control_369, %control_401, %control_399, %control_397, %control_395, %control_393, %control_391, %control_389, %control_387, %control_385, %control_383, %control_411, %control_409, %control_407, %control_405, %control_403, %control_435, %control_433, %control_431, %control_429, %control_427, %control_425, %control_423, %control_421, %control_419, %control_417, %control_447, %control_445, %control_443, %control_441, %control_439, %control_471, %control_469, %control_467, %control_465, %control_463, %control_461, %control_459, %control_457, %control_455, %control_453, %control_481, %control_479, %control_477, %control_475, %control_473, %control_505, %control_503, %control_501, %control_499, %control_497, %control_495, %control_493, %control_491, %control_489, %control_487, %control_515, %control_513, %control_511, %control_509, %control_507, %control_539, %control_537, %control_535, %control_533, %control_531, %control_529, %control_527, %control_525, %control_523, %control_521, %control_549, %control_547, %control_545, %control_543, %control_541, %control_21, %control_19, %control_17, %control_15, %control_13, %control_11, %control_9, %control_7, %control_5, %control_3, %control_31, %control_29, %control_27, %control_25, %control_23, %control_55, %control_53, %control_51, %control_49, %control_47, %control_45, %control_43, %control_41, %control_39, %control_37, %control_65, %control_63, %control_61, %control_59, %control_57, %control_89, %control_87, %control_85, %control_83, %control_81, %control_79, %control_77, %control_75, %control_73, %control_71, %control_99, %control_97, %control_95, %control_93, %control_91, %control_123, %control_121, %control_119, %control_117, %control_115, %control_113, %control_111, %control_109, %control_107, %control_105, %control_135, %control_133, %control_131, %control_129, %control_127, %control_159, %control_157, %control_155, %control_153, %control_151, %control_149, %control_147, %control_145, %control_143, %control_141, %control_169, %control_167, %control_165, %control_163, %control_161, %control_193, %control_191, %control_189, %control_187, %control_185, %control_183, %control_181, %control_179, %control_177, %control_175, %control_203, %control_201, %control_199, %control_197, %control_195, %control_227, %control_225, %control_223, %control_221, %control_219, %control_217, %control_215, %control_213, %control_211, %control_209, %control_237, %control_235, %control_233, %control_231, %control_229, %control_569, %control_567, %control_565, %control_563, %control_561, %control_907, %control_905 : tensor<?x1000xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x1000xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_183120(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown), %arg5: tensor<!tf_type.resource> loc(unknown), %arg6: tensor<!tf_type.resource> loc(unknown), %arg7: tensor<!tf_type.resource> loc(unknown), %arg8: tensor<!tf_type.resource> loc(unknown), %arg9: tensor<!tf_type.resource> loc(unknown), %arg10: tensor<!tf_type.resource> loc(unknown), %arg11: tensor<!tf_type.resource> loc(unknown), %arg12: tensor<!tf_type.resource> loc(unknown), %arg13: tensor<!tf_type.resource> loc(unknown), %arg14: tensor<!tf_type.resource> loc(unknown), %arg15: tensor<!tf_type.resource> loc(unknown), %arg16: tensor<!tf_type.resource> loc(unknown), %arg17: tensor<!tf_type.resource> loc(unknown), %arg18: tensor<!tf_type.resource> loc(unknown), %arg19: tensor<!tf_type.resource> loc(unknown), %arg20: tensor<!tf_type.resource> loc(unknown), %arg21: tensor<!tf_type.resource> loc(unknown), %arg22: tensor<!tf_type.resource> loc(unknown), %arg23: tensor<!tf_type.resource> loc(unknown), %arg24: tensor<!tf_type.resource> loc(unknown), %arg25: tensor<!tf_type.resource> loc(unknown), %arg26: tensor<!tf_type.resource> loc(unknown), %arg27: tensor<!tf_type.resource> loc(unknown), %arg28: tensor<!tf_type.resource> loc(unknown), %arg29: tensor<!tf_type.resource> loc(unknown), %arg30: tensor<!tf_type.resource> loc(unknown), %arg31: tensor<!tf_type.resource> loc(unknown), %arg32: tensor<!tf_type.resource> loc(unknown), %arg33: tensor<!tf_type.resource> loc(unknown), %arg34: tensor<!tf_type.resource> loc(unknown), %arg35: tensor<!tf_type.resource> loc(unknown), %arg36: tensor<!tf_type.resource> loc(unknown), %arg37: tensor<!tf_type.resource> loc(unknown), %arg38: tensor<!tf_type.resource> loc(unknown), %arg39: tensor<!tf_type.resource> loc(unknown), %arg40: tensor<!tf_type.resource> loc(unknown), %arg41: tensor<!tf_type.resource> loc(unknown), %arg42: tensor<!tf_type.resource> loc(unknown), %arg43: tensor<!tf_type.resource> loc(unknown), %arg44: tensor<!tf_type.resource> loc(unknown), %arg45: tensor<!tf_type.resource> loc(unknown), %arg46: tensor<!tf_type.resource> loc(unknown), %arg47: tensor<!tf_type.resource> loc(unknown), %arg48: tensor<!tf_type.resource> loc(unknown), %arg49: tensor<!tf_type.resource> loc(unknown), %arg50: tensor<!tf_type.resource> loc(unknown), %arg51: tensor<!tf_type.resource> loc(unknown), %arg52: tensor<!tf_type.resource> loc(unknown), %arg53: tensor<!tf_type.resource> loc(unknown), %arg54: tensor<!tf_type.resource> loc(unknown), %arg55: tensor<!tf_type.resource> loc(unknown), %arg56: tensor<!tf_type.resource> loc(unknown), %arg57: tensor<!tf_type.resource> loc(unknown), %arg58: tensor<!tf_type.resource> loc(unknown), %arg59: tensor<!tf_type.resource> loc(unknown), %arg60: tensor<!tf_type.resource> loc(unknown), %arg61: tensor<!tf_type.resource> loc(unknown), %arg62: tensor<!tf_type.resource> loc(unknown), %arg63: tensor<!tf_type.resource> loc(unknown), %arg64: tensor<!tf_type.resource> loc(unknown), %arg65: tensor<!tf_type.resource> loc(unknown), %arg66: tensor<!tf_type.resource> loc(unknown), %arg67: tensor<!tf_type.resource> loc(unknown), %arg68: tensor<!tf_type.resource> loc(unknown), %arg69: tensor<!tf_type.resource> loc(unknown), %arg70: tensor<!tf_type.resource> loc(unknown), %arg71: tensor<!tf_type.resource> loc(unknown), %arg72: tensor<!tf_type.resource> loc(unknown), %arg73: tensor<!tf_type.resource> loc(unknown), %arg74: tensor<!tf_type.resource> loc(unknown), %arg75: tensor<!tf_type.resource> loc(unknown), %arg76: tensor<!tf_type.resource> loc(unknown), %arg77: tensor<!tf_type.resource> loc(unknown), %arg78: tensor<!tf_type.resource> loc(unknown), %arg79: tensor<!tf_type.resource> loc(unknown), %arg80: tensor<!tf_type.resource> loc(unknown), %arg81: tensor<!tf_type.resource> loc(unknown), %arg82: tensor<!tf_type.resource> loc(unknown), %arg83: tensor<!tf_type.resource> loc(unknown), %arg84: tensor<!tf_type.resource> loc(unknown), %arg85: tensor<!tf_type.resource> loc(unknown), %arg86: tensor<!tf_type.resource> loc(unknown), %arg87: tensor<!tf_type.resource> loc(unknown), %arg88: tensor<!tf_type.resource> loc(unknown), %arg89: tensor<!tf_type.resource> loc(unknown), %arg90: tensor<!tf_type.resource> loc(unknown), %arg91: tensor<!tf_type.resource> loc(unknown), %arg92: tensor<!tf_type.resource> loc(unknown), %arg93: tensor<!tf_type.resource> loc(unknown), %arg94: tensor<!tf_type.resource> loc(unknown), %arg95: tensor<!tf_type.resource> loc(unknown), %arg96: tensor<!tf_type.resource> loc(unknown), %arg97: tensor<!tf_type.resource> loc(unknown), %arg98: tensor<!tf_type.resource> loc(unknown), %arg99: tensor<!tf_type.resource> loc(unknown), %arg100: tensor<!tf_type.resource> loc(unknown), %arg101: tensor<!tf_type.resource> loc(unknown), %arg102: tensor<!tf_type.resource> loc(unknown), %arg103: tensor<!tf_type.resource> loc(unknown), %arg104: tensor<!tf_type.resource> loc(unknown), %arg105: tensor<!tf_type.resource> loc(unknown), %arg106: tensor<!tf_type.resource> loc(unknown), %arg107: tensor<!tf_type.resource> loc(unknown), %arg108: tensor<!tf_type.resource> loc(unknown), %arg109: tensor<!tf_type.resource> loc(unknown), %arg110: tensor<!tf_type.resource> loc(unknown), %arg111: tensor<!tf_type.resource> loc(unknown), %arg112: tensor<!tf_type.resource> loc(unknown), %arg113: tensor<!tf_type.resource> loc(unknown), %arg114: tensor<!tf_type.resource> loc(unknown), %arg115: tensor<!tf_type.resource> loc(unknown), %arg116: tensor<!tf_type.resource> loc(unknown), %arg117: tensor<!tf_type.resource> loc(unknown), %arg118: tensor<!tf_type.resource> loc(unknown), %arg119: tensor<!tf_type.resource> loc(unknown), %arg120: tensor<!tf_type.resource> loc(unknown), %arg121: tensor<!tf_type.resource> loc(unknown), %arg122: tensor<!tf_type.resource> loc(unknown), %arg123: tensor<!tf_type.resource> loc(unknown), %arg124: tensor<!tf_type.resource> loc(unknown), %arg125: tensor<!tf_type.resource> loc(unknown), %arg126: tensor<!tf_type.resource> loc(unknown), %arg127: tensor<!tf_type.resource> loc(unknown), %arg128: tensor<!tf_type.resource> loc(unknown), %arg129: tensor<!tf_type.resource> loc(unknown), %arg130: tensor<!tf_type.resource> loc(unknown), %arg131: tensor<!tf_type.resource> loc(unknown), %arg132: tensor<!tf_type.resource> loc(unknown), %arg133: tensor<!tf_type.resource> loc(unknown), %arg134: tensor<!tf_type.resource> loc(unknown), %arg135: tensor<!tf_type.resource> loc(unknown), %arg136: tensor<!tf_type.resource> loc(unknown), %arg137: tensor<!tf_type.resource> loc(unknown), %arg138: tensor<!tf_type.resource> loc(unknown), %arg139: tensor<!tf_type.resource> loc(unknown), %arg140: tensor<!tf_type.resource> loc(unknown), %arg141: tensor<!tf_type.resource> loc(unknown), %arg142: tensor<!tf_type.resource> loc(unknown), %arg143: tensor<!tf_type.resource> loc(unknown), %arg144: tensor<!tf_type.resource> loc(unknown), %arg145: tensor<!tf_type.resource> loc(unknown), %arg146: tensor<!tf_type.resource> loc(unknown), %arg147: tensor<!tf_type.resource> loc(unknown), %arg148: tensor<!tf_type.resource> loc(unknown), %arg149: tensor<!tf_type.resource> loc(unknown), %arg150: tensor<!tf_type.resource> loc(unknown), %arg151: tensor<!tf_type.resource> loc(unknown), %arg152: tensor<!tf_type.resource> loc(unknown), %arg153: tensor<!tf_type.resource> loc(unknown), %arg154: tensor<!tf_type.resource> loc(unknown), %arg155: tensor<!tf_type.resource> loc(unknown), %arg156: tensor<!tf_type.resource> loc(unknown), %arg157: tensor<!tf_type.resource> loc(unknown), %arg158: tensor<!tf_type.resource> loc(unknown), %arg159: tensor<!tf_type.resource> loc(unknown), %arg160: tensor<!tf_type.resource> loc(unknown), %arg161: tensor<!tf_type.resource> loc(unknown), %arg162: tensor<!tf_type.resource> loc(unknown), %arg163: tensor<!tf_type.resource> loc(unknown), %arg164: tensor<!tf_type.resource> loc(unknown), %arg165: tensor<!tf_type.resource> loc(unknown), %arg166: tensor<!tf_type.resource> loc(unknown), %arg167: tensor<!tf_type.resource> loc(unknown), %arg168: tensor<!tf_type.resource> loc(unknown), %arg169: tensor<!tf_type.resource> loc(unknown), %arg170: tensor<!tf_type.resource> loc(unknown), %arg171: tensor<!tf_type.resource> loc(unknown), %arg172: tensor<!tf_type.resource> loc(unknown), %arg173: tensor<!tf_type.resource> loc(unknown), %arg174: tensor<!tf_type.resource> loc(unknown), %arg175: tensor<!tf_type.resource> loc(unknown), %arg176: tensor<!tf_type.resource> loc(unknown), %arg177: tensor<!tf_type.resource> loc(unknown), %arg178: tensor<!tf_type.resource> loc(unknown), %arg179: tensor<!tf_type.resource> loc(unknown), %arg180: tensor<!tf_type.resource> loc(unknown), %arg181: tensor<!tf_type.resource> loc(unknown), %arg182: tensor<!tf_type.resource> loc(unknown), %arg183: tensor<!tf_type.resource> loc(unknown), %arg184: tensor<!tf_type.resource> loc(unknown), %arg185: tensor<!tf_type.resource> loc(unknown), %arg186: tensor<!tf_type.resource> loc(unknown), %arg187: tensor<!tf_type.resource> loc(unknown), %arg188: tensor<!tf_type.resource> loc(unknown), %arg189: tensor<!tf_type.resource> loc(unknown), %arg190: tensor<!tf_type.resource> loc(unknown), %arg191: tensor<!tf_type.resource> loc(unknown), %arg192: tensor<!tf_type.resource> loc(unknown), %arg193: tensor<!tf_type.resource> loc(unknown), %arg194: tensor<!tf_type.resource> loc(unknown), %arg195: tensor<!tf_type.resource> loc(unknown), %arg196: tensor<!tf_type.resource> loc(unknown), %arg197: tensor<!tf_type.resource> loc(unknown), %arg198: tensor<!tf_type.resource> loc(unknown), %arg199: tensor<!tf_type.resource> loc(unknown), %arg200: tensor<!tf_type.resource> loc(unknown), %arg201: tensor<!tf_type.resource> loc(unknown), %arg202: tensor<!tf_type.resource> loc(unknown), %arg203: tensor<!tf_type.resource> loc(unknown), %arg204: tensor<!tf_type.resource> loc(unknown), %arg205: tensor<!tf_type.resource> loc(unknown), %arg206: tensor<!tf_type.resource> loc(unknown), %arg207: tensor<!tf_type.resource> loc(unknown), %arg208: tensor<!tf_type.resource> loc(unknown), %arg209: tensor<!tf_type.resource> loc(unknown), %arg210: tensor<!tf_type.resource> loc(unknown), %arg211: tensor<!tf_type.resource> loc(unknown), %arg212: tensor<!tf_type.resource> loc(unknown), %arg213: tensor<!tf_type.resource> loc(unknown), %arg214: tensor<!tf_type.resource> loc(unknown), %arg215: tensor<!tf_type.resource> loc(unknown), %arg216: tensor<!tf_type.resource> loc(unknown), %arg217: tensor<!tf_type.resource> loc(unknown), %arg218: tensor<!tf_type.resource> loc(unknown), %arg219: tensor<!tf_type.resource> loc(unknown), %arg220: tensor<!tf_type.resource> loc(unknown), %arg221: tensor<!tf_type.resource> loc(unknown), %arg222: tensor<!tf_type.resource> loc(unknown), %arg223: tensor<!tf_type.resource> loc(unknown), %arg224: tensor<!tf_type.resource> loc(unknown), %arg225: tensor<!tf_type.resource> loc(unknown), %arg226: tensor<!tf_type.resource> loc(unknown), %arg227: tensor<!tf_type.resource> loc(unknown), %arg228: tensor<!tf_type.resource> loc(unknown), %arg229: tensor<!tf_type.resource> loc(unknown), %arg230: tensor<!tf_type.resource> loc(unknown), %arg231: tensor<!tf_type.resource> loc(unknown), %arg232: tensor<!tf_type.resource> loc(unknown), %arg233: tensor<!tf_type.resource> loc(unknown), %arg234: tensor<!tf_type.resource> loc(unknown), %arg235: tensor<!tf_type.resource> loc(unknown), %arg236: tensor<!tf_type.resource> loc(unknown), %arg237: tensor<!tf_type.resource> loc(unknown), %arg238: tensor<!tf_type.resource> loc(unknown), %arg239: tensor<!tf_type.resource> loc(unknown), %arg240: tensor<!tf_type.resource> loc(unknown), %arg241: tensor<!tf_type.resource> loc(unknown), %arg242: tensor<!tf_type.resource> loc(unknown), %arg243: tensor<!tf_type.resource> loc(unknown), %arg244: tensor<!tf_type.resource> loc(unknown), %arg245: tensor<!tf_type.resource> loc(unknown), %arg246: tensor<!tf_type.resource> loc(unknown), %arg247: tensor<!tf_type.resource> loc(unknown), %arg248: tensor<!tf_type.resource> loc(unknown), %arg249: tensor<!tf_type.resource> loc(unknown), %arg250: tensor<!tf_type.resource> loc(unknown), %arg251: tensor<!tf_type.resource> loc(unknown), %arg252: tensor<!tf_type.resource> loc(unknown), %arg253: tensor<!tf_type.resource> loc(unknown), %arg254: tensor<!tf_type.resource> loc(unknown), %arg255: tensor<!tf_type.resource> loc(unknown), %arg256: tensor<!tf_type.resource> loc(unknown), %arg257: tensor<!tf_type.resource> loc(unknown), %arg258: tensor<!tf_type.resource> loc(unknown), %arg259: tensor<!tf_type.resource> loc(unknown), %arg260: tensor<!tf_type.resource> loc(unknown), %arg261: tensor<!tf_type.resource> loc(unknown), %arg262: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x1000xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4929)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4930)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.ReadVariableOp"(%arg160) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4931)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.ReadVariableOp"(%arg159) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4932)
      %outputs_6, %control_7 = tf_executor.island wraps "tf.ReadVariableOp"(%arg158) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4933)
      %outputs_8, %control_9 = tf_executor.island wraps "tf.ReadVariableOp"(%arg157) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4934)
      %outputs_10, %control_11 = tf_executor.island wraps "tf.ReadVariableOp"(%arg156) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc4935)
      %outputs_12, %control_13 = tf_executor.island wraps "tf.ReadVariableOp"(%arg155) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4936)
      %outputs_14, %control_15 = tf_executor.island wraps "tf.ReadVariableOp"(%arg154) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4937)
      %outputs_16, %control_17 = tf_executor.island wraps "tf.ReadVariableOp"(%arg153) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4938)
      %outputs_18, %control_19 = tf_executor.island wraps "tf.ReadVariableOp"(%arg152) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc4939)
      %outputs_20, %control_21 = tf_executor.island wraps "tf.ReadVariableOp"(%arg151) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc4940)
      %outputs_22, %control_23 = tf_executor.island wraps "tf.ReadVariableOp"(%arg165) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4941)
      %outputs_24, %control_25 = tf_executor.island wraps "tf.ReadVariableOp"(%arg164) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4942)
      %outputs_26, %control_27 = tf_executor.island wraps "tf.ReadVariableOp"(%arg163) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4943)
      %outputs_28, %control_29 = tf_executor.island wraps "tf.ReadVariableOp"(%arg162) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4944)
      %outputs_30, %control_31 = tf_executor.island wraps "tf.ReadVariableOp"(%arg161) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x96xf32> loc(#loc4945)
      %outputs_32, %control_33 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4946)
      %outputs_34, %control_35 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4947)
      %outputs_36, %control_37 = tf_executor.island wraps "tf.ReadVariableOp"(%arg175) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4948)
      %outputs_38, %control_39 = tf_executor.island wraps "tf.ReadVariableOp"(%arg174) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4949)
      %outputs_40, %control_41 = tf_executor.island wraps "tf.ReadVariableOp"(%arg173) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4950)
      %outputs_42, %control_43 = tf_executor.island wraps "tf.ReadVariableOp"(%arg172) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4951)
      %outputs_44, %control_45 = tf_executor.island wraps "tf.ReadVariableOp"(%arg171) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc4952)
      %outputs_46, %control_47 = tf_executor.island wraps "tf.ReadVariableOp"(%arg170) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4953)
      %outputs_48, %control_49 = tf_executor.island wraps "tf.ReadVariableOp"(%arg169) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4954)
      %outputs_50, %control_51 = tf_executor.island wraps "tf.ReadVariableOp"(%arg168) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4955)
      %outputs_52, %control_53 = tf_executor.island wraps "tf.ReadVariableOp"(%arg167) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4956)
      %outputs_54, %control_55 = tf_executor.island wraps "tf.ReadVariableOp"(%arg166) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc4957)
      %outputs_56, %control_57 = tf_executor.island wraps "tf.ReadVariableOp"(%arg180) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4958)
      %outputs_58, %control_59 = tf_executor.island wraps "tf.ReadVariableOp"(%arg179) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4959)
      %outputs_60, %control_61 = tf_executor.island wraps "tf.ReadVariableOp"(%arg178) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4960)
      %outputs_62, %control_63 = tf_executor.island wraps "tf.ReadVariableOp"(%arg177) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4961)
      %outputs_64, %control_65 = tf_executor.island wraps "tf.ReadVariableOp"(%arg176) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x96xf32> loc(#loc4962)
      %outputs_66, %control_67 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4963)
      %outputs_68, %control_69 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4964)
      %outputs_70, %control_71 = tf_executor.island wraps "tf.ReadVariableOp"(%arg190) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4965)
      %outputs_72, %control_73 = tf_executor.island wraps "tf.ReadVariableOp"(%arg189) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4966)
      %outputs_74, %control_75 = tf_executor.island wraps "tf.ReadVariableOp"(%arg188) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4967)
      %outputs_76, %control_77 = tf_executor.island wraps "tf.ReadVariableOp"(%arg187) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4968)
      %outputs_78, %control_79 = tf_executor.island wraps "tf.ReadVariableOp"(%arg186) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc4969)
      %outputs_80, %control_81 = tf_executor.island wraps "tf.ReadVariableOp"(%arg185) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4970)
      %outputs_82, %control_83 = tf_executor.island wraps "tf.ReadVariableOp"(%arg184) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4971)
      %outputs_84, %control_85 = tf_executor.island wraps "tf.ReadVariableOp"(%arg183) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4972)
      %outputs_86, %control_87 = tf_executor.island wraps "tf.ReadVariableOp"(%arg182) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4973)
      %outputs_88, %control_89 = tf_executor.island wraps "tf.ReadVariableOp"(%arg181) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc4974)
      %outputs_90, %control_91 = tf_executor.island wraps "tf.ReadVariableOp"(%arg195) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4975)
      %outputs_92, %control_93 = tf_executor.island wraps "tf.ReadVariableOp"(%arg194) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4976)
      %outputs_94, %control_95 = tf_executor.island wraps "tf.ReadVariableOp"(%arg193) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4977)
      %outputs_96, %control_97 = tf_executor.island wraps "tf.ReadVariableOp"(%arg192) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc4978)
      %outputs_98, %control_99 = tf_executor.island wraps "tf.ReadVariableOp"(%arg191) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x96xf32> loc(#loc4979)
      %outputs_100, %control_101 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 576, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4980)
      %outputs_102, %control_103 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4981)
      %outputs_104, %control_105 = tf_executor.island wraps "tf.ReadVariableOp"(%arg205) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4982)
      %outputs_106, %control_107 = tf_executor.island wraps "tf.ReadVariableOp"(%arg204) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4983)
      %outputs_108, %control_109 = tf_executor.island wraps "tf.ReadVariableOp"(%arg203) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4984)
      %outputs_110, %control_111 = tf_executor.island wraps "tf.ReadVariableOp"(%arg202) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4985)
      %outputs_112, %control_113 = tf_executor.island wraps "tf.ReadVariableOp"(%arg201) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x576x1xf32> loc(#loc4986)
      %outputs_114, %control_115 = tf_executor.island wraps "tf.ReadVariableOp"(%arg200) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4987)
      %outputs_116, %control_117 = tf_executor.island wraps "tf.ReadVariableOp"(%arg199) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4988)
      %outputs_118, %control_119 = tf_executor.island wraps "tf.ReadVariableOp"(%arg198) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4989)
      %outputs_120, %control_121 = tf_executor.island wraps "tf.ReadVariableOp"(%arg197) {device = ""} : (tensor<!tf_type.resource>) -> tensor<576xf32> loc(#loc4990)
      %outputs_122, %control_123 = tf_executor.island wraps "tf.ReadVariableOp"(%arg196) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x576xf32> loc(#loc4991)
      %outputs_124, %control_125 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc4992)
      %outputs_126, %control_127 = tf_executor.island wraps "tf.ReadVariableOp"(%arg210) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4993)
      %outputs_128, %control_129 = tf_executor.island wraps "tf.ReadVariableOp"(%arg209) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4994)
      %outputs_130, %control_131 = tf_executor.island wraps "tf.ReadVariableOp"(%arg208) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4995)
      %outputs_132, %control_133 = tf_executor.island wraps "tf.ReadVariableOp"(%arg207) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc4996)
      %outputs_134, %control_135 = tf_executor.island wraps "tf.ReadVariableOp"(%arg206) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x576x160xf32> loc(#loc4997)
      %outputs_136, %control_137 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc4998)
      %outputs_138, %control_139 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc4999)
      %outputs_140, %control_141 = tf_executor.island wraps "tf.ReadVariableOp"(%arg220) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5000)
      %outputs_142, %control_143 = tf_executor.island wraps "tf.ReadVariableOp"(%arg219) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5001)
      %outputs_144, %control_145 = tf_executor.island wraps "tf.ReadVariableOp"(%arg218) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5002)
      %outputs_146, %control_147 = tf_executor.island wraps "tf.ReadVariableOp"(%arg217) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5003)
      %outputs_148, %control_149 = tf_executor.island wraps "tf.ReadVariableOp"(%arg216) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc5004)
      %outputs_150, %control_151 = tf_executor.island wraps "tf.ReadVariableOp"(%arg215) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5005)
      %outputs_152, %control_153 = tf_executor.island wraps "tf.ReadVariableOp"(%arg214) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5006)
      %outputs_154, %control_155 = tf_executor.island wraps "tf.ReadVariableOp"(%arg213) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5007)
      %outputs_156, %control_157 = tf_executor.island wraps "tf.ReadVariableOp"(%arg212) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5008)
      %outputs_158, %control_159 = tf_executor.island wraps "tf.ReadVariableOp"(%arg211) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc5009)
      %outputs_160, %control_161 = tf_executor.island wraps "tf.ReadVariableOp"(%arg225) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc5010)
      %outputs_162, %control_163 = tf_executor.island wraps "tf.ReadVariableOp"(%arg224) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc5011)
      %outputs_164, %control_165 = tf_executor.island wraps "tf.ReadVariableOp"(%arg223) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc5012)
      %outputs_166, %control_167 = tf_executor.island wraps "tf.ReadVariableOp"(%arg222) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc5013)
      %outputs_168, %control_169 = tf_executor.island wraps "tf.ReadVariableOp"(%arg221) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x160xf32> loc(#loc5014)
      %outputs_170, %control_171 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc5015)
      %outputs_172, %control_173 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc5016)
      %outputs_174, %control_175 = tf_executor.island wraps "tf.ReadVariableOp"(%arg235) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5017)
      %outputs_176, %control_177 = tf_executor.island wraps "tf.ReadVariableOp"(%arg234) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5018)
      %outputs_178, %control_179 = tf_executor.island wraps "tf.ReadVariableOp"(%arg233) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5019)
      %outputs_180, %control_181 = tf_executor.island wraps "tf.ReadVariableOp"(%arg232) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5020)
      %outputs_182, %control_183 = tf_executor.island wraps "tf.ReadVariableOp"(%arg231) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc5021)
      %outputs_184, %control_185 = tf_executor.island wraps "tf.ReadVariableOp"(%arg230) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5022)
      %outputs_186, %control_187 = tf_executor.island wraps "tf.ReadVariableOp"(%arg229) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5023)
      %outputs_188, %control_189 = tf_executor.island wraps "tf.ReadVariableOp"(%arg228) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5024)
      %outputs_190, %control_191 = tf_executor.island wraps "tf.ReadVariableOp"(%arg227) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5025)
      %outputs_192, %control_193 = tf_executor.island wraps "tf.ReadVariableOp"(%arg226) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc5026)
      %outputs_194, %control_195 = tf_executor.island wraps "tf.ReadVariableOp"(%arg240) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc5027)
      %outputs_196, %control_197 = tf_executor.island wraps "tf.ReadVariableOp"(%arg239) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc5028)
      %outputs_198, %control_199 = tf_executor.island wraps "tf.ReadVariableOp"(%arg238) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc5029)
      %outputs_200, %control_201 = tf_executor.island wraps "tf.ReadVariableOp"(%arg237) {device = ""} : (tensor<!tf_type.resource>) -> tensor<160xf32> loc(#loc5030)
      %outputs_202, %control_203 = tf_executor.island wraps "tf.ReadVariableOp"(%arg236) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x160xf32> loc(#loc5031)
      %outputs_204, %control_205 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 960, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc5032)
      %outputs_206, %control_207 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc5033)
      %outputs_208, %control_209 = tf_executor.island wraps "tf.ReadVariableOp"(%arg250) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5034)
      %outputs_210, %control_211 = tf_executor.island wraps "tf.ReadVariableOp"(%arg249) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5035)
      %outputs_212, %control_213 = tf_executor.island wraps "tf.ReadVariableOp"(%arg248) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5036)
      %outputs_214, %control_215 = tf_executor.island wraps "tf.ReadVariableOp"(%arg247) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5037)
      %outputs_216, %control_217 = tf_executor.island wraps "tf.ReadVariableOp"(%arg246) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x960x1xf32> loc(#loc5038)
      %outputs_218, %control_219 = tf_executor.island wraps "tf.ReadVariableOp"(%arg245) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5039)
      %outputs_220, %control_221 = tf_executor.island wraps "tf.ReadVariableOp"(%arg244) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5040)
      %outputs_222, %control_223 = tf_executor.island wraps "tf.ReadVariableOp"(%arg243) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5041)
      %outputs_224, %control_225 = tf_executor.island wraps "tf.ReadVariableOp"(%arg242) {device = ""} : (tensor<!tf_type.resource>) -> tensor<960xf32> loc(#loc5042)
      %outputs_226, %control_227 = tf_executor.island wraps "tf.ReadVariableOp"(%arg241) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x160x960xf32> loc(#loc5043)
      %outputs_228, %control_229 = tf_executor.island wraps "tf.ReadVariableOp"(%arg255) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc5044)
      %outputs_230, %control_231 = tf_executor.island wraps "tf.ReadVariableOp"(%arg254) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc5045)
      %outputs_232, %control_233 = tf_executor.island wraps "tf.ReadVariableOp"(%arg253) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc5046)
      %outputs_234, %control_235 = tf_executor.island wraps "tf.ReadVariableOp"(%arg252) {device = ""} : (tensor<!tf_type.resource>) -> tensor<320xf32> loc(#loc5047)
      %outputs_236, %control_237 = tf_executor.island wraps "tf.ReadVariableOp"(%arg251) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x960x320xf32> loc(#loc5048)
      %outputs_238, %control_239 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 96, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc5049)
      %outputs_240, %control_241 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc5050)
      %outputs_242, %control_243 = tf_executor.island wraps "tf.ReadVariableOp"(%arg25) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc5051)
      %outputs_244, %control_245 = tf_executor.island wraps "tf.ReadVariableOp"(%arg24) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc5052)
      %outputs_246, %control_247 = tf_executor.island wraps "tf.ReadVariableOp"(%arg23) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc5053)
      %outputs_248, %control_249 = tf_executor.island wraps "tf.ReadVariableOp"(%arg22) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc5054)
      %outputs_250, %control_251 = tf_executor.island wraps "tf.ReadVariableOp"(%arg21) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x96x1xf32> loc(#loc5055)
      %outputs_252, %control_253 = tf_executor.island wraps "tf.ReadVariableOp"(%arg20) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc5056)
      %outputs_254, %control_255 = tf_executor.island wraps "tf.ReadVariableOp"(%arg19) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc5057)
      %outputs_256, %control_257 = tf_executor.island wraps "tf.ReadVariableOp"(%arg18) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc5058)
      %outputs_258, %control_259 = tf_executor.island wraps "tf.ReadVariableOp"(%arg17) {device = ""} : (tensor<!tf_type.resource>) -> tensor<96xf32> loc(#loc5059)
      %outputs_260, %control_261 = tf_executor.island wraps "tf.ReadVariableOp"(%arg16) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x16x96xf32> loc(#loc5060)
      %outputs_262, %control_263 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc5061)
      %outputs_264, %control_265 = tf_executor.island wraps "tf.ReadVariableOp"(%arg30) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc5062)
      %outputs_266, %control_267 = tf_executor.island wraps "tf.ReadVariableOp"(%arg29) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc5063)
      %outputs_268, %control_269 = tf_executor.island wraps "tf.ReadVariableOp"(%arg28) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc5064)
      %outputs_270, %control_271 = tf_executor.island wraps "tf.ReadVariableOp"(%arg27) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc5065)
      %outputs_272, %control_273 = tf_executor.island wraps "tf.ReadVariableOp"(%arg26) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x96x24xf32> loc(#loc5066)
      %outputs_274, %control_275 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 144, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc5067)
      %outputs_276, %control_277 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc5068)
      %outputs_278, %control_279 = tf_executor.island wraps "tf.ReadVariableOp"(%arg40) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5069)
      %outputs_280, %control_281 = tf_executor.island wraps "tf.ReadVariableOp"(%arg39) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5070)
      %outputs_282, %control_283 = tf_executor.island wraps "tf.ReadVariableOp"(%arg38) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5071)
      %outputs_284, %control_285 = tf_executor.island wraps "tf.ReadVariableOp"(%arg37) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5072)
      %outputs_286, %control_287 = tf_executor.island wraps "tf.ReadVariableOp"(%arg36) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x144x1xf32> loc(#loc5073)
      %outputs_288, %control_289 = tf_executor.island wraps "tf.ReadVariableOp"(%arg35) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5074)
      %outputs_290, %control_291 = tf_executor.island wraps "tf.ReadVariableOp"(%arg34) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5075)
      %outputs_292, %control_293 = tf_executor.island wraps "tf.ReadVariableOp"(%arg33) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5076)
      %outputs_294, %control_295 = tf_executor.island wraps "tf.ReadVariableOp"(%arg32) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5077)
      %outputs_296, %control_297 = tf_executor.island wraps "tf.ReadVariableOp"(%arg31) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x24x144xf32> loc(#loc5078)
      %outputs_298, %control_299 = tf_executor.island wraps "tf.ReadVariableOp"(%arg45) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc5079)
      %outputs_300, %control_301 = tf_executor.island wraps "tf.ReadVariableOp"(%arg44) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc5080)
      %outputs_302, %control_303 = tf_executor.island wraps "tf.ReadVariableOp"(%arg43) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc5081)
      %outputs_304, %control_305 = tf_executor.island wraps "tf.ReadVariableOp"(%arg42) {device = ""} : (tensor<!tf_type.resource>) -> tensor<24xf32> loc(#loc5082)
      %outputs_306, %control_307 = tf_executor.island wraps "tf.ReadVariableOp"(%arg41) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x144x24xf32> loc(#loc5083)
      %outputs_308, %control_309 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 144, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc5084)
      %outputs_310, %control_311 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc5085)
      %outputs_312, %control_313 = tf_executor.island wraps "tf.ReadVariableOp"(%arg55) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5086)
      %outputs_314, %control_315 = tf_executor.island wraps "tf.ReadVariableOp"(%arg54) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5087)
      %outputs_316, %control_317 = tf_executor.island wraps "tf.ReadVariableOp"(%arg53) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5088)
      %outputs_318, %control_319 = tf_executor.island wraps "tf.ReadVariableOp"(%arg52) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5089)
      %outputs_320, %control_321 = tf_executor.island wraps "tf.ReadVariableOp"(%arg51) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x144x1xf32> loc(#loc5090)
      %outputs_322, %control_323 = tf_executor.island wraps "tf.ReadVariableOp"(%arg50) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5091)
      %outputs_324, %control_325 = tf_executor.island wraps "tf.ReadVariableOp"(%arg49) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5092)
      %outputs_326, %control_327 = tf_executor.island wraps "tf.ReadVariableOp"(%arg48) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5093)
      %outputs_328, %control_329 = tf_executor.island wraps "tf.ReadVariableOp"(%arg47) {device = ""} : (tensor<!tf_type.resource>) -> tensor<144xf32> loc(#loc5094)
      %outputs_330, %control_331 = tf_executor.island wraps "tf.ReadVariableOp"(%arg46) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x24x144xf32> loc(#loc5095)
      %outputs_332, %control_333 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc5096)
      %outputs_334, %control_335 = tf_executor.island wraps "tf.ReadVariableOp"(%arg60) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5097)
      %outputs_336, %control_337 = tf_executor.island wraps "tf.ReadVariableOp"(%arg59) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5098)
      %outputs_338, %control_339 = tf_executor.island wraps "tf.ReadVariableOp"(%arg58) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5099)
      %outputs_340, %control_341 = tf_executor.island wraps "tf.ReadVariableOp"(%arg57) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5100)
      %outputs_342, %control_343 = tf_executor.island wraps "tf.ReadVariableOp"(%arg56) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x144x32xf32> loc(#loc5101)
      %outputs_344, %control_345 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc5102)
      %outputs_346, %control_347 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc5103)
      %outputs_348, %control_349 = tf_executor.island wraps "tf.ReadVariableOp"(%arg70) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5104)
      %outputs_350, %control_351 = tf_executor.island wraps "tf.ReadVariableOp"(%arg69) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5105)
      %outputs_352, %control_353 = tf_executor.island wraps "tf.ReadVariableOp"(%arg68) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5106)
      %outputs_354, %control_355 = tf_executor.island wraps "tf.ReadVariableOp"(%arg67) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5107)
      %outputs_356, %control_357 = tf_executor.island wraps "tf.ReadVariableOp"(%arg66) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc5108)
      %outputs_358, %control_359 = tf_executor.island wraps "tf.ReadVariableOp"(%arg65) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5109)
      %outputs_360, %control_361 = tf_executor.island wraps "tf.ReadVariableOp"(%arg64) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5110)
      %outputs_362, %control_363 = tf_executor.island wraps "tf.ReadVariableOp"(%arg63) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5111)
      %outputs_364, %control_365 = tf_executor.island wraps "tf.ReadVariableOp"(%arg62) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5112)
      %outputs_366, %control_367 = tf_executor.island wraps "tf.ReadVariableOp"(%arg61) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc5113)
      %outputs_368, %control_369 = tf_executor.island wraps "tf.ReadVariableOp"(%arg75) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5114)
      %outputs_370, %control_371 = tf_executor.island wraps "tf.ReadVariableOp"(%arg74) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5115)
      %outputs_372, %control_373 = tf_executor.island wraps "tf.ReadVariableOp"(%arg73) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5116)
      %outputs_374, %control_375 = tf_executor.island wraps "tf.ReadVariableOp"(%arg72) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5117)
      %outputs_376, %control_377 = tf_executor.island wraps "tf.ReadVariableOp"(%arg71) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x32xf32> loc(#loc5118)
      %outputs_378, %control_379 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc5119)
      %outputs_380, %control_381 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc5120)
      %outputs_382, %control_383 = tf_executor.island wraps "tf.ReadVariableOp"(%arg85) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5121)
      %outputs_384, %control_385 = tf_executor.island wraps "tf.ReadVariableOp"(%arg84) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5122)
      %outputs_386, %control_387 = tf_executor.island wraps "tf.ReadVariableOp"(%arg83) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5123)
      %outputs_388, %control_389 = tf_executor.island wraps "tf.ReadVariableOp"(%arg82) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5124)
      %outputs_390, %control_391 = tf_executor.island wraps "tf.ReadVariableOp"(%arg81) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc5125)
      %outputs_392, %control_393 = tf_executor.island wraps "tf.ReadVariableOp"(%arg80) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5126)
      %outputs_394, %control_395 = tf_executor.island wraps "tf.ReadVariableOp"(%arg79) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5127)
      %outputs_396, %control_397 = tf_executor.island wraps "tf.ReadVariableOp"(%arg78) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5128)
      %outputs_398, %control_399 = tf_executor.island wraps "tf.ReadVariableOp"(%arg77) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5129)
      %outputs_400, %control_401 = tf_executor.island wraps "tf.ReadVariableOp"(%arg76) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc5130)
      %outputs_402, %control_403 = tf_executor.island wraps "tf.ReadVariableOp"(%arg90) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5131)
      %outputs_404, %control_405 = tf_executor.island wraps "tf.ReadVariableOp"(%arg89) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5132)
      %outputs_406, %control_407 = tf_executor.island wraps "tf.ReadVariableOp"(%arg88) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5133)
      %outputs_408, %control_409 = tf_executor.island wraps "tf.ReadVariableOp"(%arg87) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5134)
      %outputs_410, %control_411 = tf_executor.island wraps "tf.ReadVariableOp"(%arg86) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x32xf32> loc(#loc5135)
      %outputs_412, %control_413 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 192, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc5136)
      %outputs_414, %control_415 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc5137)
      %outputs_416, %control_417 = tf_executor.island wraps "tf.ReadVariableOp"(%arg100) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5138)
      %outputs_418, %control_419 = tf_executor.island wraps "tf.ReadVariableOp"(%arg99) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5139)
      %outputs_420, %control_421 = tf_executor.island wraps "tf.ReadVariableOp"(%arg98) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5140)
      %outputs_422, %control_423 = tf_executor.island wraps "tf.ReadVariableOp"(%arg97) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5141)
      %outputs_424, %control_425 = tf_executor.island wraps "tf.ReadVariableOp"(%arg96) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x192x1xf32> loc(#loc5142)
      %outputs_426, %control_427 = tf_executor.island wraps "tf.ReadVariableOp"(%arg95) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5143)
      %outputs_428, %control_429 = tf_executor.island wraps "tf.ReadVariableOp"(%arg94) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5144)
      %outputs_430, %control_431 = tf_executor.island wraps "tf.ReadVariableOp"(%arg93) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5145)
      %outputs_432, %control_433 = tf_executor.island wraps "tf.ReadVariableOp"(%arg92) {device = ""} : (tensor<!tf_type.resource>) -> tensor<192xf32> loc(#loc5146)
      %outputs_434, %control_435 = tf_executor.island wraps "tf.ReadVariableOp"(%arg91) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x192xf32> loc(#loc5147)
      %outputs_436, %control_437 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[[0, 0], [0, 1], [0, 1], [0, 0]]> : tensor<4x2xi32>} : () -> tensor<4x2xi32> loc(#loc5148)
      %outputs_438, %control_439 = tf_executor.island wraps "tf.ReadVariableOp"(%arg105) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5149)
      %outputs_440, %control_441 = tf_executor.island wraps "tf.ReadVariableOp"(%arg104) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5150)
      %outputs_442, %control_443 = tf_executor.island wraps "tf.ReadVariableOp"(%arg103) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5151)
      %outputs_444, %control_445 = tf_executor.island wraps "tf.ReadVariableOp"(%arg102) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5152)
      %outputs_446, %control_447 = tf_executor.island wraps "tf.ReadVariableOp"(%arg101) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x192x64xf32> loc(#loc5153)
      %outputs_448, %control_449 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc5154)
      %outputs_450, %control_451 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc5155)
      %outputs_452, %control_453 = tf_executor.island wraps "tf.ReadVariableOp"(%arg115) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5156)
      %outputs_454, %control_455 = tf_executor.island wraps "tf.ReadVariableOp"(%arg114) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5157)
      %outputs_456, %control_457 = tf_executor.island wraps "tf.ReadVariableOp"(%arg113) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5158)
      %outputs_458, %control_459 = tf_executor.island wraps "tf.ReadVariableOp"(%arg112) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5159)
      %outputs_460, %control_461 = tf_executor.island wraps "tf.ReadVariableOp"(%arg111) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc5160)
      %outputs_462, %control_463 = tf_executor.island wraps "tf.ReadVariableOp"(%arg110) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5161)
      %outputs_464, %control_465 = tf_executor.island wraps "tf.ReadVariableOp"(%arg109) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5162)
      %outputs_466, %control_467 = tf_executor.island wraps "tf.ReadVariableOp"(%arg108) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5163)
      %outputs_468, %control_469 = tf_executor.island wraps "tf.ReadVariableOp"(%arg107) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5164)
      %outputs_470, %control_471 = tf_executor.island wraps "tf.ReadVariableOp"(%arg106) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc5165)
      %outputs_472, %control_473 = tf_executor.island wraps "tf.ReadVariableOp"(%arg120) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5166)
      %outputs_474, %control_475 = tf_executor.island wraps "tf.ReadVariableOp"(%arg119) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5167)
      %outputs_476, %control_477 = tf_executor.island wraps "tf.ReadVariableOp"(%arg118) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5168)
      %outputs_478, %control_479 = tf_executor.island wraps "tf.ReadVariableOp"(%arg117) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5169)
      %outputs_480, %control_481 = tf_executor.island wraps "tf.ReadVariableOp"(%arg116) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc5170)
      %outputs_482, %control_483 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc5171)
      %outputs_484, %control_485 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc5172)
      %outputs_486, %control_487 = tf_executor.island wraps "tf.ReadVariableOp"(%arg130) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5173)
      %outputs_488, %control_489 = tf_executor.island wraps "tf.ReadVariableOp"(%arg129) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5174)
      %outputs_490, %control_491 = tf_executor.island wraps "tf.ReadVariableOp"(%arg128) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5175)
      %outputs_492, %control_493 = tf_executor.island wraps "tf.ReadVariableOp"(%arg127) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5176)
      %outputs_494, %control_495 = tf_executor.island wraps "tf.ReadVariableOp"(%arg126) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc5177)
      %outputs_496, %control_497 = tf_executor.island wraps "tf.ReadVariableOp"(%arg125) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5178)
      %outputs_498, %control_499 = tf_executor.island wraps "tf.ReadVariableOp"(%arg124) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5179)
      %outputs_500, %control_501 = tf_executor.island wraps "tf.ReadVariableOp"(%arg123) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5180)
      %outputs_502, %control_503 = tf_executor.island wraps "tf.ReadVariableOp"(%arg122) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5181)
      %outputs_504, %control_505 = tf_executor.island wraps "tf.ReadVariableOp"(%arg121) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc5182)
      %outputs_506, %control_507 = tf_executor.island wraps "tf.ReadVariableOp"(%arg135) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5183)
      %outputs_508, %control_509 = tf_executor.island wraps "tf.ReadVariableOp"(%arg134) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5184)
      %outputs_510, %control_511 = tf_executor.island wraps "tf.ReadVariableOp"(%arg133) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5185)
      %outputs_512, %control_513 = tf_executor.island wraps "tf.ReadVariableOp"(%arg132) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5186)
      %outputs_514, %control_515 = tf_executor.island wraps "tf.ReadVariableOp"(%arg131) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc5187)
      %outputs_516, %control_517 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 384, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc5188)
      %outputs_518, %control_519 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc5189)
      %outputs_520, %control_521 = tf_executor.island wraps "tf.ReadVariableOp"(%arg145) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5190)
      %outputs_522, %control_523 = tf_executor.island wraps "tf.ReadVariableOp"(%arg144) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5191)
      %outputs_524, %control_525 = tf_executor.island wraps "tf.ReadVariableOp"(%arg143) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5192)
      %outputs_526, %control_527 = tf_executor.island wraps "tf.ReadVariableOp"(%arg142) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5193)
      %outputs_528, %control_529 = tf_executor.island wraps "tf.ReadVariableOp"(%arg141) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x384x1xf32> loc(#loc5194)
      %outputs_530, %control_531 = tf_executor.island wraps "tf.ReadVariableOp"(%arg140) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5195)
      %outputs_532, %control_533 = tf_executor.island wraps "tf.ReadVariableOp"(%arg139) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5196)
      %outputs_534, %control_535 = tf_executor.island wraps "tf.ReadVariableOp"(%arg138) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5197)
      %outputs_536, %control_537 = tf_executor.island wraps "tf.ReadVariableOp"(%arg137) {device = ""} : (tensor<!tf_type.resource>) -> tensor<384xf32> loc(#loc5198)
      %outputs_538, %control_539 = tf_executor.island wraps "tf.ReadVariableOp"(%arg136) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x64x384xf32> loc(#loc5199)
      %outputs_540, %control_541 = tf_executor.island wraps "tf.ReadVariableOp"(%arg150) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5200)
      %outputs_542, %control_543 = tf_executor.island wraps "tf.ReadVariableOp"(%arg149) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5201)
      %outputs_544, %control_545 = tf_executor.island wraps "tf.ReadVariableOp"(%arg148) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5202)
      %outputs_546, %control_547 = tf_executor.island wraps "tf.ReadVariableOp"(%arg147) {device = ""} : (tensor<!tf_type.resource>) -> tensor<64xf32> loc(#loc5203)
      %outputs_548, %control_549 = tf_executor.island wraps "tf.ReadVariableOp"(%arg146) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x384x64xf32> loc(#loc5204)
      %outputs_550, %control_551 = tf_executor.island wraps "tf.ReadVariableOp"(%arg5) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5205)
      %outputs_552, %control_553 = tf_executor.island wraps "tf.ReadVariableOp"(%arg4) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5206)
      %outputs_554, %control_555 = tf_executor.island wraps "tf.ReadVariableOp"(%arg3) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5207)
      %outputs_556, %control_557 = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5208)
      %outputs_558, %control_559 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x3x32xf32> loc(#loc5209)
      %outputs_560, %control_561 = tf_executor.island wraps "tf.ReadVariableOp"(%arg260) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc5210)
      %outputs_562, %control_563 = tf_executor.island wraps "tf.ReadVariableOp"(%arg259) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc5211)
      %outputs_564, %control_565 = tf_executor.island wraps "tf.ReadVariableOp"(%arg258) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc5212)
      %outputs_566, %control_567 = tf_executor.island wraps "tf.ReadVariableOp"(%arg257) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280xf32> loc(#loc5213)
      %outputs_568, %control_569 = tf_executor.island wraps "tf.ReadVariableOp"(%arg256) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x320x1280xf32> loc(#loc5214)
      %outputs_570, %control_571 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[3, 3, 32, 1]> : tensor<4xi32>} : () -> tensor<4xi32> loc(#loc5215)
      %outputs_572, %control_573 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<1> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc5216)
      %outputs_574, %control_575 = tf_executor.island wraps "tf.ReadVariableOp"(%arg10) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5217)
      %outputs_576, %control_577 = tf_executor.island wraps "tf.ReadVariableOp"(%arg9) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5218)
      %outputs_578, %control_579 = tf_executor.island wraps "tf.ReadVariableOp"(%arg8) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5219)
      %outputs_580, %control_581 = tf_executor.island wraps "tf.ReadVariableOp"(%arg7) {device = ""} : (tensor<!tf_type.resource>) -> tensor<32xf32> loc(#loc5220)
      %outputs_582, %control_583 = tf_executor.island wraps "tf.ReadVariableOp"(%arg6) {device = ""} : (tensor<!tf_type.resource>) -> tensor<3x3x32x1xf32> loc(#loc5221)
      %outputs_584, %control_585 = tf_executor.island wraps "tf.ReadVariableOp"(%arg15) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc5222)
      %outputs_586, %control_587 = tf_executor.island wraps "tf.ReadVariableOp"(%arg14) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc5223)
      %outputs_588, %control_589 = tf_executor.island wraps "tf.ReadVariableOp"(%arg13) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc5224)
      %outputs_590, %control_591 = tf_executor.island wraps "tf.ReadVariableOp"(%arg12) {device = ""} : (tensor<!tf_type.resource>) -> tensor<16xf32> loc(#loc5225)
      %outputs_592, %control_593 = tf_executor.island wraps "tf.ReadVariableOp"(%arg11) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1x1x32x16xf32> loc(#loc5226)
      %outputs_594, %control_595 = tf_executor.island wraps "tf.Const"() {device = "", value = dense<[1, 2]> : tensor<2xi32>} : () -> tensor<2xi32> loc(#loc5227)
      %outputs_596, %control_597 = tf_executor.island wraps "tf.Conv2D"(%arg0, %outputs_558) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 2, 2, 1], use_cudnn_on_gpu = true} : (tensor<?x224x224x3xf32>, tensor<3x3x3x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc5228)
      %outputs_598:6, %control_599 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_596, %outputs_556, %outputs_554, %outputs_552, %outputs_550) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc5229)
      %outputs_600, %control_601 = tf_executor.island wraps "tf.Relu6"(%outputs_598#0) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc5230)
      %outputs_602, %control_603 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_600, %outputs_582) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x112x112x32xf32>, tensor<3x3x32x1xf32>) -> tensor<?x112x112x32xf32> loc(#loc5231)
      %outputs_604:6, %control_605 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_602, %outputs_580, %outputs_578, %outputs_576, %outputs_574) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x112x112x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc5232)
      %control_606 = tf_executor.island(%control_577) wraps "tf.AssignVariableOp"(%arg9, %outputs_604#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc5233)
      %control_607 = tf_executor.island(%control_575) wraps "tf.AssignVariableOp"(%arg10, %outputs_604#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc5234)
      %outputs_608, %control_609 = tf_executor.island wraps "tf.Relu6"(%outputs_604#0) {device = ""} : (tensor<?x112x112x32xf32>) -> tensor<?x112x112x32xf32> loc(#loc5235)
      %outputs_610, %control_611 = tf_executor.island wraps "tf.Conv2D"(%outputs_608, %outputs_592) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x112x112x32xf32>, tensor<1x1x32x16xf32>) -> tensor<?x112x112x16xf32> loc(#loc5236)
      %outputs_612:6, %control_613 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_610, %outputs_590, %outputs_588, %outputs_586, %outputs_584) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x112x112x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>) -> (tensor<?x112x112x16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<16xf32>, tensor<*xf32>) loc(#loc5237)
      %outputs_614, %control_615 = tf_executor.island wraps "tf.Conv2D"(%outputs_612#0, %outputs_260) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x112x112x16xf32>, tensor<1x1x16x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc5238)
      %outputs_616:6, %control_617 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_614, %outputs_258, %outputs_256, %outputs_254, %outputs_252) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x112x112x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x112x112x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc5239)
      %control_618 = tf_executor.island(%control_255) wraps "tf.AssignVariableOp"(%arg19, %outputs_616#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc5240)
      %control_619 = tf_executor.island(%control_253) wraps "tf.AssignVariableOp"(%arg20, %outputs_616#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc5241)
      %outputs_620, %control_621 = tf_executor.island wraps "tf.Relu6"(%outputs_616#0) {device = ""} : (tensor<?x112x112x96xf32>) -> tensor<?x112x112x96xf32> loc(#loc5242)
      %outputs_622, %control_623 = tf_executor.island wraps "tf.Pad"(%outputs_620, %outputs_262) {device = ""} : (tensor<?x112x112x96xf32>, tensor<4x2xi32>) -> tensor<?x113x113x96xf32> loc(#loc5243)
      %outputs_624, %control_625 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_622, %outputs_250) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x113x113x96xf32>, tensor<3x3x96x1xf32>) -> tensor<?x56x56x96xf32> loc(#loc5244)
      %outputs_626:6, %control_627 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_624, %outputs_248, %outputs_246, %outputs_244, %outputs_242) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x56x56x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x56x56x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc5245)
      %control_628 = tf_executor.island(%control_245) wraps "tf.AssignVariableOp"(%arg24, %outputs_626#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc5246)
      %control_629 = tf_executor.island(%control_243) wraps "tf.AssignVariableOp"(%arg25, %outputs_626#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc5247)
      %outputs_630, %control_631 = tf_executor.island wraps "tf.Relu6"(%outputs_626#0) {device = ""} : (tensor<?x56x56x96xf32>) -> tensor<?x56x56x96xf32> loc(#loc5248)
      %outputs_632, %control_633 = tf_executor.island wraps "tf.Conv2D"(%outputs_630, %outputs_272) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x96xf32>, tensor<1x1x96x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc5249)
      %outputs_634:6, %control_635 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_632, %outputs_270, %outputs_268, %outputs_266, %outputs_264) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc5250)
      %control_636 = tf_executor.island(%control_267) wraps "tf.AssignVariableOp"(%arg29, %outputs_634#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<24xf32>) -> () loc(#loc5251)
      %control_637 = tf_executor.island(%control_265) wraps "tf.AssignVariableOp"(%arg30, %outputs_634#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<24xf32>) -> () loc(#loc5252)
      %outputs_638, %control_639 = tf_executor.island wraps "tf.Conv2D"(%outputs_634#0, %outputs_296) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc5253)
      %outputs_640:6, %control_641 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_638, %outputs_294, %outputs_292, %outputs_290, %outputs_288) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc5254)
      %control_642 = tf_executor.island(%control_291) wraps "tf.AssignVariableOp"(%arg34, %outputs_640#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc5255)
      %control_643 = tf_executor.island(%control_289) wraps "tf.AssignVariableOp"(%arg35, %outputs_640#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc5256)
      %outputs_644, %control_645 = tf_executor.island wraps "tf.Relu6"(%outputs_640#0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc5257)
      %outputs_646, %control_647 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_644, %outputs_286) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x56x56x144xf32>, tensor<3x3x144x1xf32>) -> tensor<?x56x56x144xf32> loc(#loc5258)
      %outputs_648:6, %control_649 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_646, %outputs_284, %outputs_282, %outputs_280, %outputs_278) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc5259)
      %control_650 = tf_executor.island(%control_281) wraps "tf.AssignVariableOp"(%arg39, %outputs_648#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc5260)
      %control_651 = tf_executor.island(%control_279) wraps "tf.AssignVariableOp"(%arg40, %outputs_648#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc5261)
      %outputs_652, %control_653 = tf_executor.island wraps "tf.Relu6"(%outputs_648#0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc5262)
      %outputs_654, %control_655 = tf_executor.island wraps "tf.Conv2D"(%outputs_652, %outputs_306) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x144xf32>, tensor<1x1x144x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc5263)
      %outputs_656:6, %control_657 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_654, %outputs_304, %outputs_302, %outputs_300, %outputs_298) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>) -> (tensor<?x56x56x24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<24xf32>, tensor<*xf32>) loc(#loc5264)
      %outputs_658, %control_659 = tf_executor.island wraps "tf.AddV2"(%outputs_634#0, %outputs_656#0) {device = ""} : (tensor<?x56x56x24xf32>, tensor<?x56x56x24xf32>) -> tensor<?x56x56x24xf32> loc(#loc5265)
      %outputs_660, %control_661 = tf_executor.island wraps "tf.Conv2D"(%outputs_658, %outputs_330) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x56x56x24xf32>, tensor<1x1x24x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc5266)
      %outputs_662:6, %control_663 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_660, %outputs_328, %outputs_326, %outputs_324, %outputs_322) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x56x56x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc5267)
      %control_664 = tf_executor.island(%control_325) wraps "tf.AssignVariableOp"(%arg49, %outputs_662#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc5268)
      %control_665 = tf_executor.island(%control_323) wraps "tf.AssignVariableOp"(%arg50, %outputs_662#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc5269)
      %outputs_666, %control_667 = tf_executor.island wraps "tf.Relu6"(%outputs_662#0) {device = ""} : (tensor<?x56x56x144xf32>) -> tensor<?x56x56x144xf32> loc(#loc5270)
      %outputs_668, %control_669 = tf_executor.island wraps "tf.Pad"(%outputs_666, %outputs_332) {device = ""} : (tensor<?x56x56x144xf32>, tensor<4x2xi32>) -> tensor<?x57x57x144xf32> loc(#loc5271)
      %outputs_670, %control_671 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_668, %outputs_320) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x57x57x144xf32>, tensor<3x3x144x1xf32>) -> tensor<?x28x28x144xf32> loc(#loc5272)
      %outputs_672:6, %control_673 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_670, %outputs_318, %outputs_316, %outputs_314, %outputs_312) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x28x28x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>) -> (tensor<?x28x28x144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<144xf32>, tensor<*xf32>) loc(#loc5273)
      %control_674 = tf_executor.island(%control_315) wraps "tf.AssignVariableOp"(%arg54, %outputs_672#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc5274)
      %control_675 = tf_executor.island(%control_313) wraps "tf.AssignVariableOp"(%arg55, %outputs_672#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<144xf32>) -> () loc(#loc5275)
      %outputs_676, %control_677 = tf_executor.island wraps "tf.Relu6"(%outputs_672#0) {device = ""} : (tensor<?x28x28x144xf32>) -> tensor<?x28x28x144xf32> loc(#loc5276)
      %outputs_678, %control_679 = tf_executor.island wraps "tf.Conv2D"(%outputs_676, %outputs_342) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x144xf32>, tensor<1x1x144x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc5277)
      %outputs_680:6, %control_681 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_678, %outputs_340, %outputs_338, %outputs_336, %outputs_334) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc5278)
      %control_682 = tf_executor.island(%control_337) wraps "tf.AssignVariableOp"(%arg59, %outputs_680#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc5279)
      %control_683 = tf_executor.island(%control_335) wraps "tf.AssignVariableOp"(%arg60, %outputs_680#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc5280)
      %outputs_684, %control_685 = tf_executor.island wraps "tf.Conv2D"(%outputs_680#0, %outputs_366) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc5281)
      %outputs_686:6, %control_687 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_684, %outputs_364, %outputs_362, %outputs_360, %outputs_358) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc5282)
      %control_688 = tf_executor.island(%control_361) wraps "tf.AssignVariableOp"(%arg64, %outputs_686#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc5283)
      %control_689 = tf_executor.island(%control_359) wraps "tf.AssignVariableOp"(%arg65, %outputs_686#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc5284)
      %outputs_690, %control_691 = tf_executor.island wraps "tf.Relu6"(%outputs_686#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc5285)
      %outputs_692, %control_693 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_690, %outputs_356) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x28x28x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x28x28x192xf32> loc(#loc5286)
      %outputs_694:6, %control_695 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_692, %outputs_354, %outputs_352, %outputs_350, %outputs_348) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc5287)
      %control_696 = tf_executor.island(%control_351) wraps "tf.AssignVariableOp"(%arg69, %outputs_694#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc5288)
      %control_697 = tf_executor.island(%control_349) wraps "tf.AssignVariableOp"(%arg70, %outputs_694#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc5289)
      %outputs_698, %control_699 = tf_executor.island wraps "tf.Relu6"(%outputs_694#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc5290)
      %outputs_700, %control_701 = tf_executor.island wraps "tf.Conv2D"(%outputs_698, %outputs_376) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc5291)
      %outputs_702:6, %control_703 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_700, %outputs_374, %outputs_372, %outputs_370, %outputs_368) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc5292)
      %outputs_704, %control_705 = tf_executor.island wraps "tf.AddV2"(%outputs_680#0, %outputs_702#0) {device = ""} : (tensor<?x28x28x32xf32>, tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc5293)
      %outputs_706, %control_707 = tf_executor.island wraps "tf.Conv2D"(%outputs_704, %outputs_400) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc5294)
      %outputs_708:6, %control_709 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_706, %outputs_398, %outputs_396, %outputs_394, %outputs_392) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc5295)
      %control_710 = tf_executor.island(%control_395) wraps "tf.AssignVariableOp"(%arg79, %outputs_708#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc5296)
      %control_711 = tf_executor.island(%control_393) wraps "tf.AssignVariableOp"(%arg80, %outputs_708#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc5297)
      %outputs_712, %control_713 = tf_executor.island wraps "tf.Relu6"(%outputs_708#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc5298)
      %outputs_714, %control_715 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_712, %outputs_390) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x28x28x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x28x28x192xf32> loc(#loc5299)
      %outputs_716:6, %control_717 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_714, %outputs_388, %outputs_386, %outputs_384, %outputs_382) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc5300)
      %control_718 = tf_executor.island(%control_385) wraps "tf.AssignVariableOp"(%arg84, %outputs_716#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc5301)
      %control_719 = tf_executor.island(%control_383) wraps "tf.AssignVariableOp"(%arg85, %outputs_716#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc5302)
      %outputs_720, %control_721 = tf_executor.island wraps "tf.Relu6"(%outputs_716#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc5303)
      %outputs_722, %control_723 = tf_executor.island wraps "tf.Conv2D"(%outputs_720, %outputs_410) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x192xf32>, tensor<1x1x192x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc5304)
      %outputs_724:6, %control_725 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_722, %outputs_408, %outputs_406, %outputs_404, %outputs_402) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>) -> (tensor<?x28x28x32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<32xf32>, tensor<*xf32>) loc(#loc5305)
      %outputs_726, %control_727 = tf_executor.island wraps "tf.AddV2"(%outputs_704, %outputs_724#0) {device = ""} : (tensor<?x28x28x32xf32>, tensor<?x28x28x32xf32>) -> tensor<?x28x28x32xf32> loc(#loc5306)
      %outputs_728, %control_729 = tf_executor.island wraps "tf.Conv2D"(%outputs_726, %outputs_434) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x28x28x32xf32>, tensor<1x1x32x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc5307)
      %outputs_730:6, %control_731 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_728, %outputs_432, %outputs_430, %outputs_428, %outputs_426) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x28x28x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc5308)
      %control_732 = tf_executor.island(%control_429) wraps "tf.AssignVariableOp"(%arg94, %outputs_730#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc5309)
      %control_733 = tf_executor.island(%control_427) wraps "tf.AssignVariableOp"(%arg95, %outputs_730#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc5310)
      %outputs_734, %control_735 = tf_executor.island wraps "tf.Relu6"(%outputs_730#0) {device = ""} : (tensor<?x28x28x192xf32>) -> tensor<?x28x28x192xf32> loc(#loc5311)
      %outputs_736, %control_737 = tf_executor.island wraps "tf.Pad"(%outputs_734, %outputs_436) {device = ""} : (tensor<?x28x28x192xf32>, tensor<4x2xi32>) -> tensor<?x29x29x192xf32> loc(#loc5312)
      %outputs_738, %control_739 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_736, %outputs_424) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x29x29x192xf32>, tensor<3x3x192x1xf32>) -> tensor<?x14x14x192xf32> loc(#loc5313)
      %outputs_740:6, %control_741 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_738, %outputs_422, %outputs_420, %outputs_418, %outputs_416) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>) -> (tensor<?x14x14x192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<192xf32>, tensor<*xf32>) loc(#loc5314)
      %control_742 = tf_executor.island(%control_419) wraps "tf.AssignVariableOp"(%arg99, %outputs_740#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc5315)
      %control_743 = tf_executor.island(%control_417) wraps "tf.AssignVariableOp"(%arg100, %outputs_740#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<192xf32>) -> () loc(#loc5316)
      %outputs_744, %control_745 = tf_executor.island wraps "tf.Relu6"(%outputs_740#0) {device = ""} : (tensor<?x14x14x192xf32>) -> tensor<?x14x14x192xf32> loc(#loc5317)
      %outputs_746, %control_747 = tf_executor.island wraps "tf.Conv2D"(%outputs_744, %outputs_446) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x192xf32>, tensor<1x1x192x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc5318)
      %outputs_748:6, %control_749 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_746, %outputs_444, %outputs_442, %outputs_440, %outputs_438) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc5319)
      %control_750 = tf_executor.island(%control_441) wraps "tf.AssignVariableOp"(%arg104, %outputs_748#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc5320)
      %control_751 = tf_executor.island(%control_439) wraps "tf.AssignVariableOp"(%arg105, %outputs_748#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc5321)
      %outputs_752, %control_753 = tf_executor.island wraps "tf.Conv2D"(%outputs_748#0, %outputs_470) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc5322)
      %outputs_754:6, %control_755 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_752, %outputs_468, %outputs_466, %outputs_464, %outputs_462) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc5323)
      %control_756 = tf_executor.island(%control_465) wraps "tf.AssignVariableOp"(%arg109, %outputs_754#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5324)
      %control_757 = tf_executor.island(%control_463) wraps "tf.AssignVariableOp"(%arg110, %outputs_754#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5325)
      %outputs_758, %control_759 = tf_executor.island wraps "tf.Relu6"(%outputs_754#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc5326)
      %outputs_760, %control_761 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_758, %outputs_460) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc5327)
      %outputs_762:6, %control_763 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_760, %outputs_458, %outputs_456, %outputs_454, %outputs_452) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc5328)
      %control_764 = tf_executor.island(%control_455) wraps "tf.AssignVariableOp"(%arg114, %outputs_762#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5329)
      %control_765 = tf_executor.island(%control_453) wraps "tf.AssignVariableOp"(%arg115, %outputs_762#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5330)
      %outputs_766, %control_767 = tf_executor.island wraps "tf.Relu6"(%outputs_762#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc5331)
      %outputs_768, %control_769 = tf_executor.island wraps "tf.Conv2D"(%outputs_766, %outputs_480) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc5332)
      %outputs_770:6, %control_771 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_768, %outputs_478, %outputs_476, %outputs_474, %outputs_472) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc5333)
      %outputs_772, %control_773 = tf_executor.island wraps "tf.AddV2"(%outputs_748#0, %outputs_770#0) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc5334)
      %outputs_774, %control_775 = tf_executor.island wraps "tf.Conv2D"(%outputs_772, %outputs_504) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc5335)
      %outputs_776:6, %control_777 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_774, %outputs_502, %outputs_500, %outputs_498, %outputs_496) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc5336)
      %control_778 = tf_executor.island(%control_499) wraps "tf.AssignVariableOp"(%arg124, %outputs_776#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5337)
      %control_779 = tf_executor.island(%control_497) wraps "tf.AssignVariableOp"(%arg125, %outputs_776#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5338)
      %outputs_780, %control_781 = tf_executor.island wraps "tf.Relu6"(%outputs_776#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc5339)
      %outputs_782, %control_783 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_780, %outputs_494) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc5340)
      %outputs_784:6, %control_785 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_782, %outputs_492, %outputs_490, %outputs_488, %outputs_486) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc5341)
      %control_786 = tf_executor.island(%control_489) wraps "tf.AssignVariableOp"(%arg129, %outputs_784#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5342)
      %control_787 = tf_executor.island(%control_487) wraps "tf.AssignVariableOp"(%arg130, %outputs_784#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5343)
      %outputs_788, %control_789 = tf_executor.island wraps "tf.Relu6"(%outputs_784#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc5344)
      %outputs_790, %control_791 = tf_executor.island wraps "tf.Conv2D"(%outputs_788, %outputs_514) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc5345)
      %outputs_792:6, %control_793 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_790, %outputs_512, %outputs_510, %outputs_508, %outputs_506) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc5346)
      %outputs_794, %control_795 = tf_executor.island wraps "tf.AddV2"(%outputs_772, %outputs_792#0) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc5347)
      %outputs_796, %control_797 = tf_executor.island wraps "tf.Conv2D"(%outputs_794, %outputs_538) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc5348)
      %outputs_798:6, %control_799 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_796, %outputs_536, %outputs_534, %outputs_532, %outputs_530) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc5349)
      %control_800 = tf_executor.island(%control_533) wraps "tf.AssignVariableOp"(%arg139, %outputs_798#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5350)
      %control_801 = tf_executor.island(%control_531) wraps "tf.AssignVariableOp"(%arg140, %outputs_798#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5351)
      %outputs_802, %control_803 = tf_executor.island wraps "tf.Relu6"(%outputs_798#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc5352)
      %outputs_804, %control_805 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_802, %outputs_528) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc5353)
      %outputs_806:6, %control_807 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_804, %outputs_526, %outputs_524, %outputs_522, %outputs_520) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc5354)
      %control_808 = tf_executor.island(%control_523) wraps "tf.AssignVariableOp"(%arg144, %outputs_806#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5355)
      %control_809 = tf_executor.island(%control_521) wraps "tf.AssignVariableOp"(%arg145, %outputs_806#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5356)
      %outputs_810, %control_811 = tf_executor.island wraps "tf.Relu6"(%outputs_806#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc5357)
      %outputs_812, %control_813 = tf_executor.island wraps "tf.Conv2D"(%outputs_810, %outputs_548) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc5358)
      %outputs_814:6, %control_815 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_812, %outputs_546, %outputs_544, %outputs_542, %outputs_540) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>) -> (tensor<?x14x14x64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<*xf32>) loc(#loc5359)
      %outputs_816, %control_817 = tf_executor.island wraps "tf.AddV2"(%outputs_794, %outputs_814#0) {device = ""} : (tensor<?x14x14x64xf32>, tensor<?x14x14x64xf32>) -> tensor<?x14x14x64xf32> loc(#loc5360)
      %outputs_818, %control_819 = tf_executor.island wraps "tf.Conv2D"(%outputs_816, %outputs_20) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x64xf32>, tensor<1x1x64x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc5361)
      %outputs_820:6, %control_821 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_818, %outputs_18, %outputs_16, %outputs_14, %outputs_12) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc5362)
      %control_822 = tf_executor.island(%control_15) wraps "tf.AssignVariableOp"(%arg154, %outputs_820#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5363)
      %control_823 = tf_executor.island(%control_13) wraps "tf.AssignVariableOp"(%arg155, %outputs_820#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5364)
      %outputs_824, %control_825 = tf_executor.island wraps "tf.Relu6"(%outputs_820#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc5365)
      %outputs_826, %control_827 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_824, %outputs_10) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x384xf32>, tensor<3x3x384x1xf32>) -> tensor<?x14x14x384xf32> loc(#loc5366)
      %outputs_828:6, %control_829 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_826, %outputs_8, %outputs_6, %outputs_4, %outputs_2) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>) -> (tensor<?x14x14x384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<384xf32>, tensor<*xf32>) loc(#loc5367)
      %control_830 = tf_executor.island(%control_5) wraps "tf.AssignVariableOp"(%arg159, %outputs_828#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5368)
      %control_831 = tf_executor.island(%control_3) wraps "tf.AssignVariableOp"(%arg160, %outputs_828#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<384xf32>) -> () loc(#loc5369)
      %outputs_832, %control_833 = tf_executor.island wraps "tf.Relu6"(%outputs_828#0) {device = ""} : (tensor<?x14x14x384xf32>) -> tensor<?x14x14x384xf32> loc(#loc5370)
      %outputs_834, %control_835 = tf_executor.island wraps "tf.Conv2D"(%outputs_832, %outputs_30) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x384xf32>, tensor<1x1x384x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc5371)
      %outputs_836:6, %control_837 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_834, %outputs_28, %outputs_26, %outputs_24, %outputs_22) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc5372)
      %control_838 = tf_executor.island(%control_25) wraps "tf.AssignVariableOp"(%arg164, %outputs_836#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc5373)
      %control_839 = tf_executor.island(%control_23) wraps "tf.AssignVariableOp"(%arg165, %outputs_836#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc5374)
      %outputs_840, %control_841 = tf_executor.island wraps "tf.Conv2D"(%outputs_836#0, %outputs_54) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc5375)
      %outputs_842:6, %control_843 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_840, %outputs_52, %outputs_50, %outputs_48, %outputs_46) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc5376)
      %control_844 = tf_executor.island(%control_49) wraps "tf.AssignVariableOp"(%arg169, %outputs_842#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc5377)
      %control_845 = tf_executor.island(%control_47) wraps "tf.AssignVariableOp"(%arg170, %outputs_842#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc5378)
      %outputs_846, %control_847 = tf_executor.island wraps "tf.Relu6"(%outputs_842#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc5379)
      %outputs_848, %control_849 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_846, %outputs_44) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x14x14x576xf32> loc(#loc5380)
      %outputs_850:6, %control_851 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_848, %outputs_42, %outputs_40, %outputs_38, %outputs_36) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc5381)
      %control_852 = tf_executor.island(%control_39) wraps "tf.AssignVariableOp"(%arg174, %outputs_850#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc5382)
      %control_853 = tf_executor.island(%control_37) wraps "tf.AssignVariableOp"(%arg175, %outputs_850#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc5383)
      %outputs_854, %control_855 = tf_executor.island wraps "tf.Relu6"(%outputs_850#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc5384)
      %outputs_856, %control_857 = tf_executor.island wraps "tf.Conv2D"(%outputs_854, %outputs_64) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc5385)
      %outputs_858:6, %control_859 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_856, %outputs_62, %outputs_60, %outputs_58, %outputs_56) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc5386)
      %outputs_860, %control_861 = tf_executor.island wraps "tf.AddV2"(%outputs_836#0, %outputs_858#0) {device = ""} : (tensor<?x14x14x96xf32>, tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc5387)
      %outputs_862, %control_863 = tf_executor.island wraps "tf.Conv2D"(%outputs_860, %outputs_88) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc5388)
      %outputs_864:6, %control_865 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_862, %outputs_86, %outputs_84, %outputs_82, %outputs_80) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc5389)
      %control_866 = tf_executor.island(%control_83) wraps "tf.AssignVariableOp"(%arg184, %outputs_864#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc5390)
      %control_867 = tf_executor.island(%control_81) wraps "tf.AssignVariableOp"(%arg185, %outputs_864#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc5391)
      %outputs_868, %control_869 = tf_executor.island wraps "tf.Relu6"(%outputs_864#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc5392)
      %outputs_870, %control_871 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_868, %outputs_78) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x14x14x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x14x14x576xf32> loc(#loc5393)
      %outputs_872:6, %control_873 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_870, %outputs_76, %outputs_74, %outputs_72, %outputs_70) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc5394)
      %control_874 = tf_executor.island(%control_73) wraps "tf.AssignVariableOp"(%arg189, %outputs_872#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc5395)
      %control_875 = tf_executor.island(%control_71) wraps "tf.AssignVariableOp"(%arg190, %outputs_872#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc5396)
      %outputs_876, %control_877 = tf_executor.island wraps "tf.Relu6"(%outputs_872#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc5397)
      %outputs_878, %control_879 = tf_executor.island wraps "tf.Conv2D"(%outputs_876, %outputs_98) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x576xf32>, tensor<1x1x576x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc5398)
      %outputs_880:6, %control_881 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_878, %outputs_96, %outputs_94, %outputs_92, %outputs_90) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>) -> (tensor<?x14x14x96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<96xf32>, tensor<*xf32>) loc(#loc5399)
      %outputs_882, %control_883 = tf_executor.island wraps "tf.AddV2"(%outputs_860, %outputs_880#0) {device = ""} : (tensor<?x14x14x96xf32>, tensor<?x14x14x96xf32>) -> tensor<?x14x14x96xf32> loc(#loc5400)
      %outputs_884, %control_885 = tf_executor.island wraps "tf.Conv2D"(%outputs_882, %outputs_122) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x14x14x96xf32>, tensor<1x1x96x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc5401)
      %outputs_886:6, %control_887 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_884, %outputs_120, %outputs_118, %outputs_116, %outputs_114) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x14x14x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc5402)
      %control_888 = tf_executor.island(%control_117) wraps "tf.AssignVariableOp"(%arg199, %outputs_886#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc5403)
      %control_889 = tf_executor.island(%control_115) wraps "tf.AssignVariableOp"(%arg200, %outputs_886#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc5404)
      %outputs_890, %control_891 = tf_executor.island wraps "tf.Relu6"(%outputs_886#0) {device = ""} : (tensor<?x14x14x576xf32>) -> tensor<?x14x14x576xf32> loc(#loc5405)
      %outputs_892, %control_893 = tf_executor.island wraps "tf.Pad"(%outputs_890, %outputs_124) {device = ""} : (tensor<?x14x14x576xf32>, tensor<4x2xi32>) -> tensor<?x15x15x576xf32> loc(#loc5406)
      %outputs_894, %control_895 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_892, %outputs_112) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 2, 2, 1]} : (tensor<?x15x15x576xf32>, tensor<3x3x576x1xf32>) -> tensor<?x7x7x576xf32> loc(#loc5407)
      %outputs_896:6, %control_897 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_894, %outputs_110, %outputs_108, %outputs_106, %outputs_104) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x7x7x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>) -> (tensor<?x7x7x576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<576xf32>, tensor<*xf32>) loc(#loc5408)
      %control_898 = tf_executor.island(%control_107) wraps "tf.AssignVariableOp"(%arg204, %outputs_896#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc5409)
      %control_899 = tf_executor.island(%control_105) wraps "tf.AssignVariableOp"(%arg205, %outputs_896#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<576xf32>) -> () loc(#loc5410)
      %outputs_900, %control_901 = tf_executor.island wraps "tf.Relu6"(%outputs_896#0) {device = ""} : (tensor<?x7x7x576xf32>) -> tensor<?x7x7x576xf32> loc(#loc5411)
      %outputs_902, %control_903 = tf_executor.island wraps "tf.Conv2D"(%outputs_900, %outputs_134) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x576xf32>, tensor<1x1x576x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc5412)
      %outputs_904:6, %control_905 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_902, %outputs_132, %outputs_130, %outputs_128, %outputs_126) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc5413)
      %control_906 = tf_executor.island(%control_129) wraps "tf.AssignVariableOp"(%arg209, %outputs_904#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc5414)
      %control_907 = tf_executor.island(%control_127) wraps "tf.AssignVariableOp"(%arg210, %outputs_904#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc5415)
      %outputs_908, %control_909 = tf_executor.island wraps "tf.Conv2D"(%outputs_904#0, %outputs_158) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc5416)
      %outputs_910:6, %control_911 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_908, %outputs_156, %outputs_154, %outputs_152, %outputs_150) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc5417)
      %control_912 = tf_executor.island(%control_153) wraps "tf.AssignVariableOp"(%arg214, %outputs_910#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc5418)
      %control_913 = tf_executor.island(%control_151) wraps "tf.AssignVariableOp"(%arg215, %outputs_910#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc5419)
      %outputs_914, %control_915 = tf_executor.island wraps "tf.Relu6"(%outputs_910#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc5420)
      %outputs_916, %control_917 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_914, %outputs_148) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc5421)
      %outputs_918:6, %control_919 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_916, %outputs_146, %outputs_144, %outputs_142, %outputs_140) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc5422)
      %control_920 = tf_executor.island(%control_143) wraps "tf.AssignVariableOp"(%arg219, %outputs_918#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc5423)
      %control_921 = tf_executor.island(%control_141) wraps "tf.AssignVariableOp"(%arg220, %outputs_918#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc5424)
      %outputs_922, %control_923 = tf_executor.island wraps "tf.Relu6"(%outputs_918#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc5425)
      %outputs_924, %control_925 = tf_executor.island wraps "tf.Conv2D"(%outputs_922, %outputs_168) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc5426)
      %outputs_926:6, %control_927 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_924, %outputs_166, %outputs_164, %outputs_162, %outputs_160) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc5427)
      %outputs_928, %control_929 = tf_executor.island wraps "tf.AddV2"(%outputs_904#0, %outputs_926#0) {device = ""} : (tensor<?x7x7x160xf32>, tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc5428)
      %outputs_930, %control_931 = tf_executor.island wraps "tf.Conv2D"(%outputs_928, %outputs_192) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc5429)
      %outputs_932:6, %control_933 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_930, %outputs_190, %outputs_188, %outputs_186, %outputs_184) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc5430)
      %control_934 = tf_executor.island(%control_187) wraps "tf.AssignVariableOp"(%arg229, %outputs_932#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc5431)
      %control_935 = tf_executor.island(%control_185) wraps "tf.AssignVariableOp"(%arg230, %outputs_932#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc5432)
      %outputs_936, %control_937 = tf_executor.island wraps "tf.Relu6"(%outputs_932#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc5433)
      %outputs_938, %control_939 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_936, %outputs_182) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc5434)
      %outputs_940:6, %control_941 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_938, %outputs_180, %outputs_178, %outputs_176, %outputs_174) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc5435)
      %control_942 = tf_executor.island(%control_177) wraps "tf.AssignVariableOp"(%arg234, %outputs_940#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc5436)
      %control_943 = tf_executor.island(%control_175) wraps "tf.AssignVariableOp"(%arg235, %outputs_940#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc5437)
      %outputs_944, %control_945 = tf_executor.island wraps "tf.Relu6"(%outputs_940#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc5438)
      %outputs_946, %control_947 = tf_executor.island wraps "tf.Conv2D"(%outputs_944, %outputs_202) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc5439)
      %outputs_948:6, %control_949 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_946, %outputs_200, %outputs_198, %outputs_196, %outputs_194) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>) -> (tensor<?x7x7x160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<160xf32>, tensor<*xf32>) loc(#loc5440)
      %outputs_950, %control_951 = tf_executor.island wraps "tf.AddV2"(%outputs_928, %outputs_948#0) {device = ""} : (tensor<?x7x7x160xf32>, tensor<?x7x7x160xf32>) -> tensor<?x7x7x160xf32> loc(#loc5441)
      %outputs_952, %control_953 = tf_executor.island wraps "tf.Conv2D"(%outputs_950, %outputs_226) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x160xf32>, tensor<1x1x160x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc5442)
      %outputs_954:6, %control_955 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_952, %outputs_224, %outputs_222, %outputs_220, %outputs_218) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc5443)
      %control_956 = tf_executor.island(%control_221) wraps "tf.AssignVariableOp"(%arg244, %outputs_954#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc5444)
      %control_957 = tf_executor.island(%control_219) wraps "tf.AssignVariableOp"(%arg245, %outputs_954#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc5445)
      %outputs_958, %control_959 = tf_executor.island wraps "tf.Relu6"(%outputs_954#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc5446)
      %outputs_960, %control_961 = tf_executor.island wraps "tf.DepthwiseConv2dNative"(%outputs_958, %outputs_216) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1]} : (tensor<?x7x7x960xf32>, tensor<3x3x960x1xf32>) -> tensor<?x7x7x960xf32> loc(#loc5447)
      %outputs_962:6, %control_963 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_960, %outputs_214, %outputs_212, %outputs_210, %outputs_208) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>) -> (tensor<?x7x7x960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<960xf32>, tensor<*xf32>) loc(#loc5448)
      %control_964 = tf_executor.island(%control_211) wraps "tf.AssignVariableOp"(%arg249, %outputs_962#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc5449)
      %control_965 = tf_executor.island(%control_209) wraps "tf.AssignVariableOp"(%arg250, %outputs_962#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<960xf32>) -> () loc(#loc5450)
      %outputs_966, %control_967 = tf_executor.island wraps "tf.Relu6"(%outputs_962#0) {device = ""} : (tensor<?x7x7x960xf32>) -> tensor<?x7x7x960xf32> loc(#loc5451)
      %outputs_968, %control_969 = tf_executor.island wraps "tf.Conv2D"(%outputs_966, %outputs_236) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "SAME", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x960xf32>, tensor<1x1x960x320xf32>) -> tensor<?x7x7x320xf32> loc(#loc5452)
      %outputs_970:6, %control_971 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_968, %outputs_234, %outputs_232, %outputs_230, %outputs_228) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x7x7x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>) -> (tensor<?x7x7x320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<320xf32>, tensor<*xf32>) loc(#loc5453)
      %outputs_972, %control_973 = tf_executor.island wraps "tf.Conv2D"(%outputs_970#0, %outputs_568) {data_format = "NHWC", device = "", dilations = [1, 1, 1, 1], explicit_paddings = [], padding = "VALID", strides = [1, 1, 1, 1], use_cudnn_on_gpu = true} : (tensor<?x7x7x320xf32>, tensor<1x1x320x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc5454)
      %outputs_974:6, %control_975 = tf_executor.island wraps "tf.FusedBatchNormV3"(%outputs_972, %outputs_566, %outputs_564, %outputs_562, %outputs_560) {data_format = "NHWC", device = "", epsilon = 1.000000e-03 : f32, exponential_avg_factor = 1.000000e-03 : f32, is_training = true} : (tensor<?x7x7x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>) -> (tensor<?x7x7x1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<1280xf32>, tensor<*xf32>) loc(#loc5455)
      %control_976 = tf_executor.island(%control_563) wraps "tf.AssignVariableOp"(%arg259, %outputs_974#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<1280xf32>) -> () loc(#loc5456)
      %control_977 = tf_executor.island(%control_561) wraps "tf.AssignVariableOp"(%arg260, %outputs_974#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<1280xf32>) -> () loc(#loc5457)
      %outputs_978, %control_979 = tf_executor.island wraps "tf.Relu6"(%outputs_974#0) {device = ""} : (tensor<?x7x7x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc5458)
      %outputs_980, %control_981 = tf_executor.island wraps "tf.Mean"(%outputs_978, %outputs_594) {device = "", keep_dims = false} : (tensor<?x7x7x1280xf32>, tensor<2xi32>) -> tensor<?x1280xf32> loc(#loc5459)
      %control_982 = tf_executor.island(%control_231) wraps "tf.AssignVariableOp"(%arg254, %outputs_970#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<320xf32>) -> () loc(#loc5460)
      %control_983 = tf_executor.island(%control_229) wraps "tf.AssignVariableOp"(%arg255, %outputs_970#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<320xf32>) -> () loc(#loc5461)
      %control_984 = tf_executor.island(%control_197) wraps "tf.AssignVariableOp"(%arg239, %outputs_948#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc5462)
      %control_985 = tf_executor.island(%control_195) wraps "tf.AssignVariableOp"(%arg240, %outputs_948#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc5463)
      %control_986 = tf_executor.island(%control_163) wraps "tf.AssignVariableOp"(%arg224, %outputs_926#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc5464)
      %control_987 = tf_executor.island(%control_161) wraps "tf.AssignVariableOp"(%arg225, %outputs_926#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<160xf32>) -> () loc(#loc5465)
      %control_988 = tf_executor.island(%control_93) wraps "tf.AssignVariableOp"(%arg194, %outputs_880#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc5466)
      %control_989 = tf_executor.island(%control_91) wraps "tf.AssignVariableOp"(%arg195, %outputs_880#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc5467)
      %control_990 = tf_executor.island(%control_59) wraps "tf.AssignVariableOp"(%arg179, %outputs_858#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc5468)
      %control_991 = tf_executor.island(%control_57) wraps "tf.AssignVariableOp"(%arg180, %outputs_858#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<96xf32>) -> () loc(#loc5469)
      %control_992 = tf_executor.island(%control_543) wraps "tf.AssignVariableOp"(%arg149, %outputs_814#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc5470)
      %control_993 = tf_executor.island(%control_541) wraps "tf.AssignVariableOp"(%arg150, %outputs_814#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc5471)
      %control_994 = tf_executor.island(%control_509) wraps "tf.AssignVariableOp"(%arg134, %outputs_792#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc5472)
      %control_995 = tf_executor.island(%control_507) wraps "tf.AssignVariableOp"(%arg135, %outputs_792#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc5473)
      %control_996 = tf_executor.island(%control_475) wraps "tf.AssignVariableOp"(%arg119, %outputs_770#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc5474)
      %control_997 = tf_executor.island(%control_473) wraps "tf.AssignVariableOp"(%arg120, %outputs_770#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<64xf32>) -> () loc(#loc5475)
      %control_998 = tf_executor.island(%control_405) wraps "tf.AssignVariableOp"(%arg89, %outputs_724#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc5476)
      %control_999 = tf_executor.island(%control_403) wraps "tf.AssignVariableOp"(%arg90, %outputs_724#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc5477)
      %control_1000 = tf_executor.island(%control_371) wraps "tf.AssignVariableOp"(%arg74, %outputs_702#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc5478)
      %control_1001 = tf_executor.island(%control_369) wraps "tf.AssignVariableOp"(%arg75, %outputs_702#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc5479)
      %control_1002 = tf_executor.island(%control_301) wraps "tf.AssignVariableOp"(%arg44, %outputs_656#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<24xf32>) -> () loc(#loc5480)
      %control_1003 = tf_executor.island(%control_299) wraps "tf.AssignVariableOp"(%arg45, %outputs_656#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<24xf32>) -> () loc(#loc5481)
      %control_1004 = tf_executor.island(%control_587) wraps "tf.AssignVariableOp"(%arg14, %outputs_612#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<16xf32>) -> () loc(#loc5482)
      %control_1005 = tf_executor.island(%control_585) wraps "tf.AssignVariableOp"(%arg15, %outputs_612#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<16xf32>) -> () loc(#loc5483)
      %control_1006 = tf_executor.island(%control_553) wraps "tf.AssignVariableOp"(%arg4, %outputs_598#1) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc5484)
      %control_1007 = tf_executor.island(%control_551) wraps "tf.AssignVariableOp"(%arg5, %outputs_598#2) {device = "", validate_shape = false} : (tensor<!tf_type.resource>, tensor<32xf32>) -> () loc(#loc5485)
      %outputs_1008, %control_1009 = tf_executor.island wraps "tf.ReadVariableOp"(%arg262) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1000xf32> loc(#loc5486)
      %outputs_1010, %control_1011 = tf_executor.island wraps "tf.ReadVariableOp"(%arg261) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280x1000xf32> loc(#loc5487)
      %control_1012 = tf_executor.island(%control_559, %control_557, %control_555, %control_553, %control_551, %control_1006, %control_1007, %control_583, %control_581, %control_579, %control_577, %control_575, %control_606, %control_607, %control_593, %control_591, %control_589, %control_587, %control_585, %control_1004, %control_1005, %control_261, %control_259, %control_257, %control_255, %control_253, %control_618, %control_619, %control_251, %control_249, %control_247, %control_245, %control_243, %control_628, %control_629, %control_273, %control_271, %control_269, %control_267, %control_265, %control_636, %control_637, %control_297, %control_295, %control_293, %control_291, %control_289, %control_642, %control_643, %control_287, %control_285, %control_283, %control_281, %control_279, %control_650, %control_651, %control_307, %control_305, %control_303, %control_301, %control_299, %control_1002, %control_1003, %control_331, %control_329, %control_327, %control_325, %control_323, %control_664, %control_665, %control_321, %control_319, %control_317, %control_315, %control_313, %control_674, %control_675, %control_343, %control_341, %control_339, %control_337, %control_335, %control_682, %control_683, %control_367, %control_365, %control_363, %control_361, %control_359, %control_688, %control_689, %control_357, %control_355, %control_353, %control_351, %control_349, %control_696, %control_697, %control_377, %control_375, %control_373, %control_371, %control_369, %control_1000, %control_1001, %control_401, %control_399, %control_397, %control_395, %control_393, %control_710, %control_711, %control_391, %control_389, %control_387, %control_385, %control_383, %control_718, %control_719, %control_411, %control_409, %control_407, %control_405, %control_403, %control_998, %control_999, %control_435, %control_433, %control_431, %control_429, %control_427, %control_732, %control_733, %control_425, %control_423, %control_421, %control_419, %control_417, %control_742, %control_743, %control_447, %control_445, %control_443, %control_441, %control_439, %control_750, %control_751, %control_471, %control_469, %control_467, %control_465, %control_463, %control_756, %control_757, %control_461, %control_459, %control_457, %control_455, %control_453, %control_764, %control_765, %control_481, %control_479, %control_477, %control_475, %control_473, %control_996, %control_997, %control_505, %control_503, %control_501, %control_499, %control_497, %control_778, %control_779, %control_495, %control_493, %control_491, %control_489, %control_487, %control_786, %control_787, %control_515, %control_513, %control_511, %control_509, %control_507, %control_994, %control_995, %control_539, %control_537, %control_535, %control_533, %control_531, %control_800, %control_801, %control_529, %control_527, %control_525, %control_523, %control_521, %control_808, %control_809, %control_549, %control_547, %control_545, %control_543, %control_541, %control_992, %control_993, %control_21, %control_19, %control_17, %control_15, %control_13, %control_822, %control_823, %control_11, %control_9, %control_7, %control_5, %control_3, %control_830, %control_831, %control_31, %control_29, %control_27, %control_25, %control_23, %control_838, %control_839, %control_55, %control_53, %control_51, %control_49, %control_47, %control_844, %control_845, %control_45, %control_43, %control_41, %control_39, %control_37, %control_852, %control_853, %control_65, %control_63, %control_61, %control_59, %control_57, %control_990, %control_991, %control_89, %control_87, %control_85, %control_83, %control_81, %control_866, %control_867, %control_79, %control_77, %control_75, %control_73, %control_71, %control_874, %control_875, %control_99, %control_97, %control_95, %control_93, %control_91, %control_988, %control_989, %control_123, %control_121, %control_119, %control_117, %control_115, %control_888, %control_889, %control_113, %control_111, %control_109, %control_107, %control_105, %control_898, %control_899, %control_135, %control_133, %control_131, %control_129, %control_127, %control_906, %control_907, %control_159, %control_157, %control_155, %control_153, %control_151, %control_912, %control_913, %control_149, %control_147, %control_145, %control_143, %control_141, %control_920, %control_921, %control_169, %control_167, %control_165, %control_163, %control_161, %control_986, %control_987, %control_193, %control_191, %control_189, %control_187, %control_185, %control_934, %control_935, %control_183, %control_181, %control_179, %control_177, %control_175, %control_942, %control_943, %control_203, %control_201, %control_199, %control_197, %control_195, %control_984, %control_985, %control_227, %control_225, %control_223, %control_221, %control_219, %control_956, %control_957, %control_217, %control_215, %control_213, %control_211, %control_209, %control_964, %control_965, %control_237, %control_235, %control_233, %control_231, %control_229, %control_982, %control_983, %control_569, %control_567, %control_565, %control_563, %control_561, %control_976, %control_977, %control_1011, %control_1009) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc5488)
      %outputs_1013, %control_1014 = tf_executor.island wraps "tf.MatMul"(%outputs_980, %outputs_1010) {device = "", transpose_a = false, transpose_b = false} : (tensor<?x1280xf32>, tensor<1280x1000xf32>) -> tensor<?x1000xf32> loc(#loc5489)
      %outputs_1015, %control_1016 = tf_executor.island wraps "tf.BiasAdd"(%outputs_1013, %outputs_1008) {data_format = "NHWC", device = ""} : (tensor<?x1000xf32>, tensor<1000xf32>) -> tensor<?x1000xf32> loc(#loc5490)
      %outputs_1017, %control_1018 = tf_executor.island wraps "tf.Softmax"(%outputs_1015) {device = ""} : (tensor<?x1000xf32>) -> tensor<?x1000xf32> loc(#loc5491)
      %outputs_1019, %control_1020 = tf_executor.island(%control_1012) wraps "tf.Identity"(%outputs_1017) {device = ""} : (tensor<?x1000xf32>) -> tensor<?x1000xf32> loc(#loc5492)
      tf_executor.fetch %outputs_1019, %control_559, %control_557, %control_555, %control_553, %control_551, %control_1006, %control_1007, %control_583, %control_581, %control_579, %control_577, %control_575, %control_606, %control_607, %control_593, %control_591, %control_589, %control_587, %control_585, %control_1004, %control_1005, %control_261, %control_259, %control_257, %control_255, %control_253, %control_618, %control_619, %control_251, %control_249, %control_247, %control_245, %control_243, %control_628, %control_629, %control_273, %control_271, %control_269, %control_267, %control_265, %control_636, %control_637, %control_297, %control_295, %control_293, %control_291, %control_289, %control_642, %control_643, %control_287, %control_285, %control_283, %control_281, %control_279, %control_650, %control_651, %control_307, %control_305, %control_303, %control_301, %control_299, %control_1002, %control_1003, %control_331, %control_329, %control_327, %control_325, %control_323, %control_664, %control_665, %control_321, %control_319, %control_317, %control_315, %control_313, %control_674, %control_675, %control_343, %control_341, %control_339, %control_337, %control_335, %control_682, %control_683, %control_367, %control_365, %control_363, %control_361, %control_359, %control_688, %control_689, %control_357, %control_355, %control_353, %control_351, %control_349, %control_696, %control_697, %control_377, %control_375, %control_373, %control_371, %control_369, %control_1000, %control_1001, %control_401, %control_399, %control_397, %control_395, %control_393, %control_710, %control_711, %control_391, %control_389, %control_387, %control_385, %control_383, %control_718, %control_719, %control_411, %control_409, %control_407, %control_405, %control_403, %control_998, %control_999, %control_435, %control_433, %control_431, %control_429, %control_427, %control_732, %control_733, %control_425, %control_423, %control_421, %control_419, %control_417, %control_742, %control_743, %control_447, %control_445, %control_443, %control_441, %control_439, %control_750, %control_751, %control_471, %control_469, %control_467, %control_465, %control_463, %control_756, %control_757, %control_461, %control_459, %control_457, %control_455, %control_453, %control_764, %control_765, %control_481, %control_479, %control_477, %control_475, %control_473, %control_996, %control_997, %control_505, %control_503, %control_501, %control_499, %control_497, %control_778, %control_779, %control_495, %control_493, %control_491, %control_489, %control_487, %control_786, %control_787, %control_515, %control_513, %control_511, %control_509, %control_507, %control_994, %control_995, %control_539, %control_537, %control_535, %control_533, %control_531, %control_800, %control_801, %control_529, %control_527, %control_525, %control_523, %control_521, %control_808, %control_809, %control_549, %control_547, %control_545, %control_543, %control_541, %control_992, %control_993, %control_21, %control_19, %control_17, %control_15, %control_13, %control_822, %control_823, %control_11, %control_9, %control_7, %control_5, %control_3, %control_830, %control_831, %control_31, %control_29, %control_27, %control_25, %control_23, %control_838, %control_839, %control_55, %control_53, %control_51, %control_49, %control_47, %control_844, %control_845, %control_45, %control_43, %control_41, %control_39, %control_37, %control_852, %control_853, %control_65, %control_63, %control_61, %control_59, %control_57, %control_990, %control_991, %control_89, %control_87, %control_85, %control_83, %control_81, %control_866, %control_867, %control_79, %control_77, %control_75, %control_73, %control_71, %control_874, %control_875, %control_99, %control_97, %control_95, %control_93, %control_91, %control_988, %control_989, %control_123, %control_121, %control_119, %control_117, %control_115, %control_888, %control_889, %control_113, %control_111, %control_109, %control_107, %control_105, %control_898, %control_899, %control_135, %control_133, %control_131, %control_129, %control_127, %control_906, %control_907, %control_159, %control_157, %control_155, %control_153, %control_151, %control_912, %control_913, %control_149, %control_147, %control_145, %control_143, %control_141, %control_920, %control_921, %control_169, %control_167, %control_165, %control_163, %control_161, %control_986, %control_987, %control_193, %control_191, %control_189, %control_187, %control_185, %control_934, %control_935, %control_183, %control_181, %control_179, %control_177, %control_175, %control_942, %control_943, %control_203, %control_201, %control_199, %control_197, %control_195, %control_984, %control_985, %control_227, %control_225, %control_223, %control_221, %control_219, %control_956, %control_957, %control_217, %control_215, %control_213, %control_211, %control_209, %control_964, %control_965, %control_237, %control_235, %control_233, %control_231, %control_229, %control_982, %control_983, %control_569, %control_567, %control_565, %control_563, %control_561, %control_976, %control_977, %control_1011, %control_1009 : tensor<?x1000xf32>, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x1000xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_mobilenetv2_1.00_224_layer_call_fn_109440(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "input_1"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown), %arg5: tensor<!tf_type.resource> loc(unknown), %arg6: tensor<!tf_type.resource> loc(unknown), %arg7: tensor<!tf_type.resource> loc(unknown), %arg8: tensor<!tf_type.resource> loc(unknown), %arg9: tensor<!tf_type.resource> loc(unknown), %arg10: tensor<!tf_type.resource> loc(unknown), %arg11: tensor<!tf_type.resource> loc(unknown), %arg12: tensor<!tf_type.resource> loc(unknown), %arg13: tensor<!tf_type.resource> loc(unknown), %arg14: tensor<!tf_type.resource> loc(unknown), %arg15: tensor<!tf_type.resource> loc(unknown), %arg16: tensor<!tf_type.resource> loc(unknown), %arg17: tensor<!tf_type.resource> loc(unknown), %arg18: tensor<!tf_type.resource> loc(unknown), %arg19: tensor<!tf_type.resource> loc(unknown), %arg20: tensor<!tf_type.resource> loc(unknown), %arg21: tensor<!tf_type.resource> loc(unknown), %arg22: tensor<!tf_type.resource> loc(unknown), %arg23: tensor<!tf_type.resource> loc(unknown), %arg24: tensor<!tf_type.resource> loc(unknown), %arg25: tensor<!tf_type.resource> loc(unknown), %arg26: tensor<!tf_type.resource> loc(unknown), %arg27: tensor<!tf_type.resource> loc(unknown), %arg28: tensor<!tf_type.resource> loc(unknown), %arg29: tensor<!tf_type.resource> loc(unknown), %arg30: tensor<!tf_type.resource> loc(unknown), %arg31: tensor<!tf_type.resource> loc(unknown), %arg32: tensor<!tf_type.resource> loc(unknown), %arg33: tensor<!tf_type.resource> loc(unknown), %arg34: tensor<!tf_type.resource> loc(unknown), %arg35: tensor<!tf_type.resource> loc(unknown), %arg36: tensor<!tf_type.resource> loc(unknown), %arg37: tensor<!tf_type.resource> loc(unknown), %arg38: tensor<!tf_type.resource> loc(unknown), %arg39: tensor<!tf_type.resource> loc(unknown), %arg40: tensor<!tf_type.resource> loc(unknown), %arg41: tensor<!tf_type.resource> loc(unknown), %arg42: tensor<!tf_type.resource> loc(unknown), %arg43: tensor<!tf_type.resource> loc(unknown), %arg44: tensor<!tf_type.resource> loc(unknown), %arg45: tensor<!tf_type.resource> loc(unknown), %arg46: tensor<!tf_type.resource> loc(unknown), %arg47: tensor<!tf_type.resource> loc(unknown), %arg48: tensor<!tf_type.resource> loc(unknown), %arg49: tensor<!tf_type.resource> loc(unknown), %arg50: tensor<!tf_type.resource> loc(unknown), %arg51: tensor<!tf_type.resource> loc(unknown), %arg52: tensor<!tf_type.resource> loc(unknown), %arg53: tensor<!tf_type.resource> loc(unknown), %arg54: tensor<!tf_type.resource> loc(unknown), %arg55: tensor<!tf_type.resource> loc(unknown), %arg56: tensor<!tf_type.resource> loc(unknown), %arg57: tensor<!tf_type.resource> loc(unknown), %arg58: tensor<!tf_type.resource> loc(unknown), %arg59: tensor<!tf_type.resource> loc(unknown), %arg60: tensor<!tf_type.resource> loc(unknown), %arg61: tensor<!tf_type.resource> loc(unknown), %arg62: tensor<!tf_type.resource> loc(unknown), %arg63: tensor<!tf_type.resource> loc(unknown), %arg64: tensor<!tf_type.resource> loc(unknown), %arg65: tensor<!tf_type.resource> loc(unknown), %arg66: tensor<!tf_type.resource> loc(unknown), %arg67: tensor<!tf_type.resource> loc(unknown), %arg68: tensor<!tf_type.resource> loc(unknown), %arg69: tensor<!tf_type.resource> loc(unknown), %arg70: tensor<!tf_type.resource> loc(unknown), %arg71: tensor<!tf_type.resource> loc(unknown), %arg72: tensor<!tf_type.resource> loc(unknown), %arg73: tensor<!tf_type.resource> loc(unknown), %arg74: tensor<!tf_type.resource> loc(unknown), %arg75: tensor<!tf_type.resource> loc(unknown), %arg76: tensor<!tf_type.resource> loc(unknown), %arg77: tensor<!tf_type.resource> loc(unknown), %arg78: tensor<!tf_type.resource> loc(unknown), %arg79: tensor<!tf_type.resource> loc(unknown), %arg80: tensor<!tf_type.resource> loc(unknown), %arg81: tensor<!tf_type.resource> loc(unknown), %arg82: tensor<!tf_type.resource> loc(unknown), %arg83: tensor<!tf_type.resource> loc(unknown), %arg84: tensor<!tf_type.resource> loc(unknown), %arg85: tensor<!tf_type.resource> loc(unknown), %arg86: tensor<!tf_type.resource> loc(unknown), %arg87: tensor<!tf_type.resource> loc(unknown), %arg88: tensor<!tf_type.resource> loc(unknown), %arg89: tensor<!tf_type.resource> loc(unknown), %arg90: tensor<!tf_type.resource> loc(unknown), %arg91: tensor<!tf_type.resource> loc(unknown), %arg92: tensor<!tf_type.resource> loc(unknown), %arg93: tensor<!tf_type.resource> loc(unknown), %arg94: tensor<!tf_type.resource> loc(unknown), %arg95: tensor<!tf_type.resource> loc(unknown), %arg96: tensor<!tf_type.resource> loc(unknown), %arg97: tensor<!tf_type.resource> loc(unknown), %arg98: tensor<!tf_type.resource> loc(unknown), %arg99: tensor<!tf_type.resource> loc(unknown), %arg100: tensor<!tf_type.resource> loc(unknown), %arg101: tensor<!tf_type.resource> loc(unknown), %arg102: tensor<!tf_type.resource> loc(unknown), %arg103: tensor<!tf_type.resource> loc(unknown), %arg104: tensor<!tf_type.resource> loc(unknown), %arg105: tensor<!tf_type.resource> loc(unknown), %arg106: tensor<!tf_type.resource> loc(unknown), %arg107: tensor<!tf_type.resource> loc(unknown), %arg108: tensor<!tf_type.resource> loc(unknown), %arg109: tensor<!tf_type.resource> loc(unknown), %arg110: tensor<!tf_type.resource> loc(unknown), %arg111: tensor<!tf_type.resource> loc(unknown), %arg112: tensor<!tf_type.resource> loc(unknown), %arg113: tensor<!tf_type.resource> loc(unknown), %arg114: tensor<!tf_type.resource> loc(unknown), %arg115: tensor<!tf_type.resource> loc(unknown), %arg116: tensor<!tf_type.resource> loc(unknown), %arg117: tensor<!tf_type.resource> loc(unknown), %arg118: tensor<!tf_type.resource> loc(unknown), %arg119: tensor<!tf_type.resource> loc(unknown), %arg120: tensor<!tf_type.resource> loc(unknown), %arg121: tensor<!tf_type.resource> loc(unknown), %arg122: tensor<!tf_type.resource> loc(unknown), %arg123: tensor<!tf_type.resource> loc(unknown), %arg124: tensor<!tf_type.resource> loc(unknown), %arg125: tensor<!tf_type.resource> loc(unknown), %arg126: tensor<!tf_type.resource> loc(unknown), %arg127: tensor<!tf_type.resource> loc(unknown), %arg128: tensor<!tf_type.resource> loc(unknown), %arg129: tensor<!tf_type.resource> loc(unknown), %arg130: tensor<!tf_type.resource> loc(unknown), %arg131: tensor<!tf_type.resource> loc(unknown), %arg132: tensor<!tf_type.resource> loc(unknown), %arg133: tensor<!tf_type.resource> loc(unknown), %arg134: tensor<!tf_type.resource> loc(unknown), %arg135: tensor<!tf_type.resource> loc(unknown), %arg136: tensor<!tf_type.resource> loc(unknown), %arg137: tensor<!tf_type.resource> loc(unknown), %arg138: tensor<!tf_type.resource> loc(unknown), %arg139: tensor<!tf_type.resource> loc(unknown), %arg140: tensor<!tf_type.resource> loc(unknown), %arg141: tensor<!tf_type.resource> loc(unknown), %arg142: tensor<!tf_type.resource> loc(unknown), %arg143: tensor<!tf_type.resource> loc(unknown), %arg144: tensor<!tf_type.resource> loc(unknown), %arg145: tensor<!tf_type.resource> loc(unknown), %arg146: tensor<!tf_type.resource> loc(unknown), %arg147: tensor<!tf_type.resource> loc(unknown), %arg148: tensor<!tf_type.resource> loc(unknown), %arg149: tensor<!tf_type.resource> loc(unknown), %arg150: tensor<!tf_type.resource> loc(unknown), %arg151: tensor<!tf_type.resource> loc(unknown), %arg152: tensor<!tf_type.resource> loc(unknown), %arg153: tensor<!tf_type.resource> loc(unknown), %arg154: tensor<!tf_type.resource> loc(unknown), %arg155: tensor<!tf_type.resource> loc(unknown), %arg156: tensor<!tf_type.resource> loc(unknown), %arg157: tensor<!tf_type.resource> loc(unknown), %arg158: tensor<!tf_type.resource> loc(unknown), %arg159: tensor<!tf_type.resource> loc(unknown), %arg160: tensor<!tf_type.resource> loc(unknown), %arg161: tensor<!tf_type.resource> loc(unknown), %arg162: tensor<!tf_type.resource> loc(unknown), %arg163: tensor<!tf_type.resource> loc(unknown), %arg164: tensor<!tf_type.resource> loc(unknown), %arg165: tensor<!tf_type.resource> loc(unknown), %arg166: tensor<!tf_type.resource> loc(unknown), %arg167: tensor<!tf_type.resource> loc(unknown), %arg168: tensor<!tf_type.resource> loc(unknown), %arg169: tensor<!tf_type.resource> loc(unknown), %arg170: tensor<!tf_type.resource> loc(unknown), %arg171: tensor<!tf_type.resource> loc(unknown), %arg172: tensor<!tf_type.resource> loc(unknown), %arg173: tensor<!tf_type.resource> loc(unknown), %arg174: tensor<!tf_type.resource> loc(unknown), %arg175: tensor<!tf_type.resource> loc(unknown), %arg176: tensor<!tf_type.resource> loc(unknown), %arg177: tensor<!tf_type.resource> loc(unknown), %arg178: tensor<!tf_type.resource> loc(unknown), %arg179: tensor<!tf_type.resource> loc(unknown), %arg180: tensor<!tf_type.resource> loc(unknown), %arg181: tensor<!tf_type.resource> loc(unknown), %arg182: tensor<!tf_type.resource> loc(unknown), %arg183: tensor<!tf_type.resource> loc(unknown), %arg184: tensor<!tf_type.resource> loc(unknown), %arg185: tensor<!tf_type.resource> loc(unknown), %arg186: tensor<!tf_type.resource> loc(unknown), %arg187: tensor<!tf_type.resource> loc(unknown), %arg188: tensor<!tf_type.resource> loc(unknown), %arg189: tensor<!tf_type.resource> loc(unknown), %arg190: tensor<!tf_type.resource> loc(unknown), %arg191: tensor<!tf_type.resource> loc(unknown), %arg192: tensor<!tf_type.resource> loc(unknown), %arg193: tensor<!tf_type.resource> loc(unknown), %arg194: tensor<!tf_type.resource> loc(unknown), %arg195: tensor<!tf_type.resource> loc(unknown), %arg196: tensor<!tf_type.resource> loc(unknown), %arg197: tensor<!tf_type.resource> loc(unknown), %arg198: tensor<!tf_type.resource> loc(unknown), %arg199: tensor<!tf_type.resource> loc(unknown), %arg200: tensor<!tf_type.resource> loc(unknown), %arg201: tensor<!tf_type.resource> loc(unknown), %arg202: tensor<!tf_type.resource> loc(unknown), %arg203: tensor<!tf_type.resource> loc(unknown), %arg204: tensor<!tf_type.resource> loc(unknown), %arg205: tensor<!tf_type.resource> loc(unknown), %arg206: tensor<!tf_type.resource> loc(unknown), %arg207: tensor<!tf_type.resource> loc(unknown), %arg208: tensor<!tf_type.resource> loc(unknown), %arg209: tensor<!tf_type.resource> loc(unknown), %arg210: tensor<!tf_type.resource> loc(unknown), %arg211: tensor<!tf_type.resource> loc(unknown), %arg212: tensor<!tf_type.resource> loc(unknown), %arg213: tensor<!tf_type.resource> loc(unknown), %arg214: tensor<!tf_type.resource> loc(unknown), %arg215: tensor<!tf_type.resource> loc(unknown), %arg216: tensor<!tf_type.resource> loc(unknown), %arg217: tensor<!tf_type.resource> loc(unknown), %arg218: tensor<!tf_type.resource> loc(unknown), %arg219: tensor<!tf_type.resource> loc(unknown), %arg220: tensor<!tf_type.resource> loc(unknown), %arg221: tensor<!tf_type.resource> loc(unknown), %arg222: tensor<!tf_type.resource> loc(unknown), %arg223: tensor<!tf_type.resource> loc(unknown), %arg224: tensor<!tf_type.resource> loc(unknown), %arg225: tensor<!tf_type.resource> loc(unknown), %arg226: tensor<!tf_type.resource> loc(unknown), %arg227: tensor<!tf_type.resource> loc(unknown), %arg228: tensor<!tf_type.resource> loc(unknown), %arg229: tensor<!tf_type.resource> loc(unknown), %arg230: tensor<!tf_type.resource> loc(unknown), %arg231: tensor<!tf_type.resource> loc(unknown), %arg232: tensor<!tf_type.resource> loc(unknown), %arg233: tensor<!tf_type.resource> loc(unknown), %arg234: tensor<!tf_type.resource> loc(unknown), %arg235: tensor<!tf_type.resource> loc(unknown), %arg236: tensor<!tf_type.resource> loc(unknown), %arg237: tensor<!tf_type.resource> loc(unknown), %arg238: tensor<!tf_type.resource> loc(unknown), %arg239: tensor<!tf_type.resource> loc(unknown), %arg240: tensor<!tf_type.resource> loc(unknown), %arg241: tensor<!tf_type.resource> loc(unknown), %arg242: tensor<!tf_type.resource> loc(unknown), %arg243: tensor<!tf_type.resource> loc(unknown), %arg244: tensor<!tf_type.resource> loc(unknown), %arg245: tensor<!tf_type.resource> loc(unknown), %arg246: tensor<!tf_type.resource> loc(unknown), %arg247: tensor<!tf_type.resource> loc(unknown), %arg248: tensor<!tf_type.resource> loc(unknown), %arg249: tensor<!tf_type.resource> loc(unknown), %arg250: tensor<!tf_type.resource> loc(unknown), %arg251: tensor<!tf_type.resource> loc(unknown), %arg252: tensor<!tf_type.resource> loc(unknown), %arg253: tensor<!tf_type.resource> loc(unknown), %arg254: tensor<!tf_type.resource> loc(unknown), %arg255: tensor<!tf_type.resource> loc(unknown), %arg256: tensor<!tf_type.resource> loc(unknown), %arg257: tensor<!tf_type.resource> loc(unknown), %arg258: tensor<!tf_type.resource> loc(unknown), %arg259: tensor<!tf_type.resource> loc(unknown), %arg260: tensor<!tf_type.resource> loc(unknown), %arg261: tensor<!tf_type.resource> loc(unknown), %arg262: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11, %arg12, %arg13, %arg14, %arg15, %arg16, %arg17, %arg18, %arg19, %arg20, %arg21, %arg22, %arg23, %arg24, %arg25, %arg26, %arg27, %arg28, %arg29, %arg30, %arg31, %arg32, %arg33, %arg34, %arg35, %arg36, %arg37, %arg38, %arg39, %arg40, %arg41, %arg42, %arg43, %arg44, %arg45, %arg46, %arg47, %arg48, %arg49, %arg50, %arg51, %arg52, %arg53, %arg54, %arg55, %arg56, %arg57, %arg58, %arg59, %arg60, %arg61, %arg62, %arg63, %arg64, %arg65, %arg66, %arg67, %arg68, %arg69, %arg70, %arg71, %arg72, %arg73, %arg74, %arg75, %arg76, %arg77, %arg78, %arg79, %arg80, %arg81, %arg82, %arg83, %arg84, %arg85, %arg86, %arg87, %arg88, %arg89, %arg90, %arg91, %arg92, %arg93, %arg94, %arg95, %arg96, %arg97, %arg98, %arg99, %arg100, %arg101, %arg102, %arg103, %arg104, %arg105, %arg106, %arg107, %arg108, %arg109, %arg110, %arg111, %arg112, %arg113, %arg114, %arg115, %arg116, %arg117, %arg118, %arg119, %arg120, %arg121, %arg122, %arg123, %arg124, %arg125, %arg126, %arg127, %arg128, %arg129, %arg130, %arg131, %arg132, %arg133, %arg134, %arg135, %arg136, %arg137, %arg138, %arg139, %arg140, %arg141, %arg142, %arg143, %arg144, %arg145, %arg146, %arg147, %arg148, %arg149, %arg150, %arg151, %arg152, %arg153, %arg154, %arg155, %arg156, %arg157, %arg158, %arg159, %arg160, %arg161, %arg162, %arg163, %arg164, %arg165, %arg166, %arg167, %arg168, %arg169, %arg170, %arg171, %arg172, %arg173, %arg174, %arg175, %arg176, %arg177, %arg178, %arg179, %arg180, %arg181, %arg182, %arg183, %arg184, %arg185, %arg186, %arg187, %arg188, %arg189, %arg190, %arg191, %arg192, %arg193, %arg194, %arg195, %arg196, %arg197, %arg198, %arg199, %arg200, %arg201, %arg202, %arg203, %arg204, %arg205, %arg206, %arg207, %arg208, %arg209, %arg210, %arg211, %arg212, %arg213, %arg214, %arg215, %arg216, %arg217, %arg218, %arg219, %arg220, %arg221, %arg222, %arg223, %arg224, %arg225, %arg226, %arg227, %arg228, %arg229, %arg230, %arg231, %arg232, %arg233, %arg234, %arg235, %arg236, %arg237, %arg238, %arg239, %arg240, %arg241, %arg242, %arg243, %arg244, %arg245, %arg246, %arg247, %arg248, %arg249, %arg250, %arg251, %arg252, %arg253, %arg254, %arg255, %arg256, %arg257, %arg258, %arg259, %arg260, %arg261, %arg262) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_104170} : (tensor<?x224x224x3xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?xf32> loc(#loc5493)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc5494)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?xf32>) -> tensor<?x?xf32> loc(#loc5495)
      tf_executor.fetch %outputs_1, %control : tensor<?x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_mobilenetv2_1.00_224_layer_call_fn_139200(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "input_1"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown), %arg5: tensor<!tf_type.resource> loc(unknown), %arg6: tensor<!tf_type.resource> loc(unknown), %arg7: tensor<!tf_type.resource> loc(unknown), %arg8: tensor<!tf_type.resource> loc(unknown), %arg9: tensor<!tf_type.resource> loc(unknown), %arg10: tensor<!tf_type.resource> loc(unknown), %arg11: tensor<!tf_type.resource> loc(unknown), %arg12: tensor<!tf_type.resource> loc(unknown), %arg13: tensor<!tf_type.resource> loc(unknown), %arg14: tensor<!tf_type.resource> loc(unknown), %arg15: tensor<!tf_type.resource> loc(unknown), %arg16: tensor<!tf_type.resource> loc(unknown), %arg17: tensor<!tf_type.resource> loc(unknown), %arg18: tensor<!tf_type.resource> loc(unknown), %arg19: tensor<!tf_type.resource> loc(unknown), %arg20: tensor<!tf_type.resource> loc(unknown), %arg21: tensor<!tf_type.resource> loc(unknown), %arg22: tensor<!tf_type.resource> loc(unknown), %arg23: tensor<!tf_type.resource> loc(unknown), %arg24: tensor<!tf_type.resource> loc(unknown), %arg25: tensor<!tf_type.resource> loc(unknown), %arg26: tensor<!tf_type.resource> loc(unknown), %arg27: tensor<!tf_type.resource> loc(unknown), %arg28: tensor<!tf_type.resource> loc(unknown), %arg29: tensor<!tf_type.resource> loc(unknown), %arg30: tensor<!tf_type.resource> loc(unknown), %arg31: tensor<!tf_type.resource> loc(unknown), %arg32: tensor<!tf_type.resource> loc(unknown), %arg33: tensor<!tf_type.resource> loc(unknown), %arg34: tensor<!tf_type.resource> loc(unknown), %arg35: tensor<!tf_type.resource> loc(unknown), %arg36: tensor<!tf_type.resource> loc(unknown), %arg37: tensor<!tf_type.resource> loc(unknown), %arg38: tensor<!tf_type.resource> loc(unknown), %arg39: tensor<!tf_type.resource> loc(unknown), %arg40: tensor<!tf_type.resource> loc(unknown), %arg41: tensor<!tf_type.resource> loc(unknown), %arg42: tensor<!tf_type.resource> loc(unknown), %arg43: tensor<!tf_type.resource> loc(unknown), %arg44: tensor<!tf_type.resource> loc(unknown), %arg45: tensor<!tf_type.resource> loc(unknown), %arg46: tensor<!tf_type.resource> loc(unknown), %arg47: tensor<!tf_type.resource> loc(unknown), %arg48: tensor<!tf_type.resource> loc(unknown), %arg49: tensor<!tf_type.resource> loc(unknown), %arg50: tensor<!tf_type.resource> loc(unknown), %arg51: tensor<!tf_type.resource> loc(unknown), %arg52: tensor<!tf_type.resource> loc(unknown), %arg53: tensor<!tf_type.resource> loc(unknown), %arg54: tensor<!tf_type.resource> loc(unknown), %arg55: tensor<!tf_type.resource> loc(unknown), %arg56: tensor<!tf_type.resource> loc(unknown), %arg57: tensor<!tf_type.resource> loc(unknown), %arg58: tensor<!tf_type.resource> loc(unknown), %arg59: tensor<!tf_type.resource> loc(unknown), %arg60: tensor<!tf_type.resource> loc(unknown), %arg61: tensor<!tf_type.resource> loc(unknown), %arg62: tensor<!tf_type.resource> loc(unknown), %arg63: tensor<!tf_type.resource> loc(unknown), %arg64: tensor<!tf_type.resource> loc(unknown), %arg65: tensor<!tf_type.resource> loc(unknown), %arg66: tensor<!tf_type.resource> loc(unknown), %arg67: tensor<!tf_type.resource> loc(unknown), %arg68: tensor<!tf_type.resource> loc(unknown), %arg69: tensor<!tf_type.resource> loc(unknown), %arg70: tensor<!tf_type.resource> loc(unknown), %arg71: tensor<!tf_type.resource> loc(unknown), %arg72: tensor<!tf_type.resource> loc(unknown), %arg73: tensor<!tf_type.resource> loc(unknown), %arg74: tensor<!tf_type.resource> loc(unknown), %arg75: tensor<!tf_type.resource> loc(unknown), %arg76: tensor<!tf_type.resource> loc(unknown), %arg77: tensor<!tf_type.resource> loc(unknown), %arg78: tensor<!tf_type.resource> loc(unknown), %arg79: tensor<!tf_type.resource> loc(unknown), %arg80: tensor<!tf_type.resource> loc(unknown), %arg81: tensor<!tf_type.resource> loc(unknown), %arg82: tensor<!tf_type.resource> loc(unknown), %arg83: tensor<!tf_type.resource> loc(unknown), %arg84: tensor<!tf_type.resource> loc(unknown), %arg85: tensor<!tf_type.resource> loc(unknown), %arg86: tensor<!tf_type.resource> loc(unknown), %arg87: tensor<!tf_type.resource> loc(unknown), %arg88: tensor<!tf_type.resource> loc(unknown), %arg89: tensor<!tf_type.resource> loc(unknown), %arg90: tensor<!tf_type.resource> loc(unknown), %arg91: tensor<!tf_type.resource> loc(unknown), %arg92: tensor<!tf_type.resource> loc(unknown), %arg93: tensor<!tf_type.resource> loc(unknown), %arg94: tensor<!tf_type.resource> loc(unknown), %arg95: tensor<!tf_type.resource> loc(unknown), %arg96: tensor<!tf_type.resource> loc(unknown), %arg97: tensor<!tf_type.resource> loc(unknown), %arg98: tensor<!tf_type.resource> loc(unknown), %arg99: tensor<!tf_type.resource> loc(unknown), %arg100: tensor<!tf_type.resource> loc(unknown), %arg101: tensor<!tf_type.resource> loc(unknown), %arg102: tensor<!tf_type.resource> loc(unknown), %arg103: tensor<!tf_type.resource> loc(unknown), %arg104: tensor<!tf_type.resource> loc(unknown), %arg105: tensor<!tf_type.resource> loc(unknown), %arg106: tensor<!tf_type.resource> loc(unknown), %arg107: tensor<!tf_type.resource> loc(unknown), %arg108: tensor<!tf_type.resource> loc(unknown), %arg109: tensor<!tf_type.resource> loc(unknown), %arg110: tensor<!tf_type.resource> loc(unknown), %arg111: tensor<!tf_type.resource> loc(unknown), %arg112: tensor<!tf_type.resource> loc(unknown), %arg113: tensor<!tf_type.resource> loc(unknown), %arg114: tensor<!tf_type.resource> loc(unknown), %arg115: tensor<!tf_type.resource> loc(unknown), %arg116: tensor<!tf_type.resource> loc(unknown), %arg117: tensor<!tf_type.resource> loc(unknown), %arg118: tensor<!tf_type.resource> loc(unknown), %arg119: tensor<!tf_type.resource> loc(unknown), %arg120: tensor<!tf_type.resource> loc(unknown), %arg121: tensor<!tf_type.resource> loc(unknown), %arg122: tensor<!tf_type.resource> loc(unknown), %arg123: tensor<!tf_type.resource> loc(unknown), %arg124: tensor<!tf_type.resource> loc(unknown), %arg125: tensor<!tf_type.resource> loc(unknown), %arg126: tensor<!tf_type.resource> loc(unknown), %arg127: tensor<!tf_type.resource> loc(unknown), %arg128: tensor<!tf_type.resource> loc(unknown), %arg129: tensor<!tf_type.resource> loc(unknown), %arg130: tensor<!tf_type.resource> loc(unknown), %arg131: tensor<!tf_type.resource> loc(unknown), %arg132: tensor<!tf_type.resource> loc(unknown), %arg133: tensor<!tf_type.resource> loc(unknown), %arg134: tensor<!tf_type.resource> loc(unknown), %arg135: tensor<!tf_type.resource> loc(unknown), %arg136: tensor<!tf_type.resource> loc(unknown), %arg137: tensor<!tf_type.resource> loc(unknown), %arg138: tensor<!tf_type.resource> loc(unknown), %arg139: tensor<!tf_type.resource> loc(unknown), %arg140: tensor<!tf_type.resource> loc(unknown), %arg141: tensor<!tf_type.resource> loc(unknown), %arg142: tensor<!tf_type.resource> loc(unknown), %arg143: tensor<!tf_type.resource> loc(unknown), %arg144: tensor<!tf_type.resource> loc(unknown), %arg145: tensor<!tf_type.resource> loc(unknown), %arg146: tensor<!tf_type.resource> loc(unknown), %arg147: tensor<!tf_type.resource> loc(unknown), %arg148: tensor<!tf_type.resource> loc(unknown), %arg149: tensor<!tf_type.resource> loc(unknown), %arg150: tensor<!tf_type.resource> loc(unknown), %arg151: tensor<!tf_type.resource> loc(unknown), %arg152: tensor<!tf_type.resource> loc(unknown), %arg153: tensor<!tf_type.resource> loc(unknown), %arg154: tensor<!tf_type.resource> loc(unknown), %arg155: tensor<!tf_type.resource> loc(unknown), %arg156: tensor<!tf_type.resource> loc(unknown), %arg157: tensor<!tf_type.resource> loc(unknown), %arg158: tensor<!tf_type.resource> loc(unknown), %arg159: tensor<!tf_type.resource> loc(unknown), %arg160: tensor<!tf_type.resource> loc(unknown), %arg161: tensor<!tf_type.resource> loc(unknown), %arg162: tensor<!tf_type.resource> loc(unknown), %arg163: tensor<!tf_type.resource> loc(unknown), %arg164: tensor<!tf_type.resource> loc(unknown), %arg165: tensor<!tf_type.resource> loc(unknown), %arg166: tensor<!tf_type.resource> loc(unknown), %arg167: tensor<!tf_type.resource> loc(unknown), %arg168: tensor<!tf_type.resource> loc(unknown), %arg169: tensor<!tf_type.resource> loc(unknown), %arg170: tensor<!tf_type.resource> loc(unknown), %arg171: tensor<!tf_type.resource> loc(unknown), %arg172: tensor<!tf_type.resource> loc(unknown), %arg173: tensor<!tf_type.resource> loc(unknown), %arg174: tensor<!tf_type.resource> loc(unknown), %arg175: tensor<!tf_type.resource> loc(unknown), %arg176: tensor<!tf_type.resource> loc(unknown), %arg177: tensor<!tf_type.resource> loc(unknown), %arg178: tensor<!tf_type.resource> loc(unknown), %arg179: tensor<!tf_type.resource> loc(unknown), %arg180: tensor<!tf_type.resource> loc(unknown), %arg181: tensor<!tf_type.resource> loc(unknown), %arg182: tensor<!tf_type.resource> loc(unknown), %arg183: tensor<!tf_type.resource> loc(unknown), %arg184: tensor<!tf_type.resource> loc(unknown), %arg185: tensor<!tf_type.resource> loc(unknown), %arg186: tensor<!tf_type.resource> loc(unknown), %arg187: tensor<!tf_type.resource> loc(unknown), %arg188: tensor<!tf_type.resource> loc(unknown), %arg189: tensor<!tf_type.resource> loc(unknown), %arg190: tensor<!tf_type.resource> loc(unknown), %arg191: tensor<!tf_type.resource> loc(unknown), %arg192: tensor<!tf_type.resource> loc(unknown), %arg193: tensor<!tf_type.resource> loc(unknown), %arg194: tensor<!tf_type.resource> loc(unknown), %arg195: tensor<!tf_type.resource> loc(unknown), %arg196: tensor<!tf_type.resource> loc(unknown), %arg197: tensor<!tf_type.resource> loc(unknown), %arg198: tensor<!tf_type.resource> loc(unknown), %arg199: tensor<!tf_type.resource> loc(unknown), %arg200: tensor<!tf_type.resource> loc(unknown), %arg201: tensor<!tf_type.resource> loc(unknown), %arg202: tensor<!tf_type.resource> loc(unknown), %arg203: tensor<!tf_type.resource> loc(unknown), %arg204: tensor<!tf_type.resource> loc(unknown), %arg205: tensor<!tf_type.resource> loc(unknown), %arg206: tensor<!tf_type.resource> loc(unknown), %arg207: tensor<!tf_type.resource> loc(unknown), %arg208: tensor<!tf_type.resource> loc(unknown), %arg209: tensor<!tf_type.resource> loc(unknown), %arg210: tensor<!tf_type.resource> loc(unknown), %arg211: tensor<!tf_type.resource> loc(unknown), %arg212: tensor<!tf_type.resource> loc(unknown), %arg213: tensor<!tf_type.resource> loc(unknown), %arg214: tensor<!tf_type.resource> loc(unknown), %arg215: tensor<!tf_type.resource> loc(unknown), %arg216: tensor<!tf_type.resource> loc(unknown), %arg217: tensor<!tf_type.resource> loc(unknown), %arg218: tensor<!tf_type.resource> loc(unknown), %arg219: tensor<!tf_type.resource> loc(unknown), %arg220: tensor<!tf_type.resource> loc(unknown), %arg221: tensor<!tf_type.resource> loc(unknown), %arg222: tensor<!tf_type.resource> loc(unknown), %arg223: tensor<!tf_type.resource> loc(unknown), %arg224: tensor<!tf_type.resource> loc(unknown), %arg225: tensor<!tf_type.resource> loc(unknown), %arg226: tensor<!tf_type.resource> loc(unknown), %arg227: tensor<!tf_type.resource> loc(unknown), %arg228: tensor<!tf_type.resource> loc(unknown), %arg229: tensor<!tf_type.resource> loc(unknown), %arg230: tensor<!tf_type.resource> loc(unknown), %arg231: tensor<!tf_type.resource> loc(unknown), %arg232: tensor<!tf_type.resource> loc(unknown), %arg233: tensor<!tf_type.resource> loc(unknown), %arg234: tensor<!tf_type.resource> loc(unknown), %arg235: tensor<!tf_type.resource> loc(unknown), %arg236: tensor<!tf_type.resource> loc(unknown), %arg237: tensor<!tf_type.resource> loc(unknown), %arg238: tensor<!tf_type.resource> loc(unknown), %arg239: tensor<!tf_type.resource> loc(unknown), %arg240: tensor<!tf_type.resource> loc(unknown), %arg241: tensor<!tf_type.resource> loc(unknown), %arg242: tensor<!tf_type.resource> loc(unknown), %arg243: tensor<!tf_type.resource> loc(unknown), %arg244: tensor<!tf_type.resource> loc(unknown), %arg245: tensor<!tf_type.resource> loc(unknown), %arg246: tensor<!tf_type.resource> loc(unknown), %arg247: tensor<!tf_type.resource> loc(unknown), %arg248: tensor<!tf_type.resource> loc(unknown), %arg249: tensor<!tf_type.resource> loc(unknown), %arg250: tensor<!tf_type.resource> loc(unknown), %arg251: tensor<!tf_type.resource> loc(unknown), %arg252: tensor<!tf_type.resource> loc(unknown), %arg253: tensor<!tf_type.resource> loc(unknown), %arg254: tensor<!tf_type.resource> loc(unknown), %arg255: tensor<!tf_type.resource> loc(unknown), %arg256: tensor<!tf_type.resource> loc(unknown), %arg257: tensor<!tf_type.resource> loc(unknown), %arg258: tensor<!tf_type.resource> loc(unknown), %arg259: tensor<!tf_type.resource> loc(unknown), %arg260: tensor<!tf_type.resource> loc(unknown), %arg261: tensor<!tf_type.resource> loc(unknown), %arg262: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11, %arg12, %arg13, %arg14, %arg15, %arg16, %arg17, %arg18, %arg19, %arg20, %arg21, %arg22, %arg23, %arg24, %arg25, %arg26, %arg27, %arg28, %arg29, %arg30, %arg31, %arg32, %arg33, %arg34, %arg35, %arg36, %arg37, %arg38, %arg39, %arg40, %arg41, %arg42, %arg43, %arg44, %arg45, %arg46, %arg47, %arg48, %arg49, %arg50, %arg51, %arg52, %arg53, %arg54, %arg55, %arg56, %arg57, %arg58, %arg59, %arg60, %arg61, %arg62, %arg63, %arg64, %arg65, %arg66, %arg67, %arg68, %arg69, %arg70, %arg71, %arg72, %arg73, %arg74, %arg75, %arg76, %arg77, %arg78, %arg79, %arg80, %arg81, %arg82, %arg83, %arg84, %arg85, %arg86, %arg87, %arg88, %arg89, %arg90, %arg91, %arg92, %arg93, %arg94, %arg95, %arg96, %arg97, %arg98, %arg99, %arg100, %arg101, %arg102, %arg103, %arg104, %arg105, %arg106, %arg107, %arg108, %arg109, %arg110, %arg111, %arg112, %arg113, %arg114, %arg115, %arg116, %arg117, %arg118, %arg119, %arg120, %arg121, %arg122, %arg123, %arg124, %arg125, %arg126, %arg127, %arg128, %arg129, %arg130, %arg131, %arg132, %arg133, %arg134, %arg135, %arg136, %arg137, %arg138, %arg139, %arg140, %arg141, %arg142, %arg143, %arg144, %arg145, %arg146, %arg147, %arg148, %arg149, %arg150, %arg151, %arg152, %arg153, %arg154, %arg155, %arg156, %arg157, %arg158, %arg159, %arg160, %arg161, %arg162, %arg163, %arg164, %arg165, %arg166, %arg167, %arg168, %arg169, %arg170, %arg171, %arg172, %arg173, %arg174, %arg175, %arg176, %arg177, %arg178, %arg179, %arg180, %arg181, %arg182, %arg183, %arg184, %arg185, %arg186, %arg187, %arg188, %arg189, %arg190, %arg191, %arg192, %arg193, %arg194, %arg195, %arg196, %arg197, %arg198, %arg199, %arg200, %arg201, %arg202, %arg203, %arg204, %arg205, %arg206, %arg207, %arg208, %arg209, %arg210, %arg211, %arg212, %arg213, %arg214, %arg215, %arg216, %arg217, %arg218, %arg219, %arg220, %arg221, %arg222, %arg223, %arg224, %arg225, %arg226, %arg227, %arg228, %arg229, %arg230, %arg231, %arg232, %arg233, %arg234, %arg235, %arg236, %arg237, %arg238, %arg239, %arg240, %arg241, %arg242, %arg243, %arg244, %arg245, %arg246, %arg247, %arg248, %arg249, %arg250, %arg251, %arg252, %arg253, %arg254, %arg255, %arg256, %arg257, %arg258, %arg259, %arg260, %arg261, %arg262) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23, 26, 27, 28, 31, 32, 33, 36, 37, 38, 41, 42, 43, 46, 47, 48, 51, 52, 53, 56, 57, 58, 61, 62, 63, 66, 67, 68, 71, 72, 73, 76, 77, 78, 81, 82, 83, 86, 87, 88, 91, 92, 93, 96, 97, 98, 101, 102, 103, 106, 107, 108, 111, 112, 113, 116, 117, 118, 121, 122, 123, 126, 127, 128, 131, 132, 133, 136, 137, 138, 141, 142, 143, 146, 147, 148, 151, 152, 153, 156, 157, 158, 161, 162, 163, 166, 167, 168, 171, 172, 173, 176, 177, 178, 181, 182, 183, 186, 187, 188, 191, 192, 193, 196, 197, 198, 201, 202, 203, 206, 207, 208, 211, 212, 213, 216, 217, 218, 221, 222, 223, 226, 227, 228, 231, 232, 233, 236, 237, 238, 241, 242, 243, 246, 247, 248, 251, 252, 253, 256, 257, 258, 261, 262], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_128640} : (tensor<?x224x224x3xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?xf32> loc(#loc5496)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc5497)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?xf32>) -> tensor<?x?xf32> loc(#loc5498)
      tf_executor.fetch %outputs_1, %control : tensor<?x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_mobilenetv2_1.00_224_layer_call_fn_158150(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown), %arg5: tensor<!tf_type.resource> loc(unknown), %arg6: tensor<!tf_type.resource> loc(unknown), %arg7: tensor<!tf_type.resource> loc(unknown), %arg8: tensor<!tf_type.resource> loc(unknown), %arg9: tensor<!tf_type.resource> loc(unknown), %arg10: tensor<!tf_type.resource> loc(unknown), %arg11: tensor<!tf_type.resource> loc(unknown), %arg12: tensor<!tf_type.resource> loc(unknown), %arg13: tensor<!tf_type.resource> loc(unknown), %arg14: tensor<!tf_type.resource> loc(unknown), %arg15: tensor<!tf_type.resource> loc(unknown), %arg16: tensor<!tf_type.resource> loc(unknown), %arg17: tensor<!tf_type.resource> loc(unknown), %arg18: tensor<!tf_type.resource> loc(unknown), %arg19: tensor<!tf_type.resource> loc(unknown), %arg20: tensor<!tf_type.resource> loc(unknown), %arg21: tensor<!tf_type.resource> loc(unknown), %arg22: tensor<!tf_type.resource> loc(unknown), %arg23: tensor<!tf_type.resource> loc(unknown), %arg24: tensor<!tf_type.resource> loc(unknown), %arg25: tensor<!tf_type.resource> loc(unknown), %arg26: tensor<!tf_type.resource> loc(unknown), %arg27: tensor<!tf_type.resource> loc(unknown), %arg28: tensor<!tf_type.resource> loc(unknown), %arg29: tensor<!tf_type.resource> loc(unknown), %arg30: tensor<!tf_type.resource> loc(unknown), %arg31: tensor<!tf_type.resource> loc(unknown), %arg32: tensor<!tf_type.resource> loc(unknown), %arg33: tensor<!tf_type.resource> loc(unknown), %arg34: tensor<!tf_type.resource> loc(unknown), %arg35: tensor<!tf_type.resource> loc(unknown), %arg36: tensor<!tf_type.resource> loc(unknown), %arg37: tensor<!tf_type.resource> loc(unknown), %arg38: tensor<!tf_type.resource> loc(unknown), %arg39: tensor<!tf_type.resource> loc(unknown), %arg40: tensor<!tf_type.resource> loc(unknown), %arg41: tensor<!tf_type.resource> loc(unknown), %arg42: tensor<!tf_type.resource> loc(unknown), %arg43: tensor<!tf_type.resource> loc(unknown), %arg44: tensor<!tf_type.resource> loc(unknown), %arg45: tensor<!tf_type.resource> loc(unknown), %arg46: tensor<!tf_type.resource> loc(unknown), %arg47: tensor<!tf_type.resource> loc(unknown), %arg48: tensor<!tf_type.resource> loc(unknown), %arg49: tensor<!tf_type.resource> loc(unknown), %arg50: tensor<!tf_type.resource> loc(unknown), %arg51: tensor<!tf_type.resource> loc(unknown), %arg52: tensor<!tf_type.resource> loc(unknown), %arg53: tensor<!tf_type.resource> loc(unknown), %arg54: tensor<!tf_type.resource> loc(unknown), %arg55: tensor<!tf_type.resource> loc(unknown), %arg56: tensor<!tf_type.resource> loc(unknown), %arg57: tensor<!tf_type.resource> loc(unknown), %arg58: tensor<!tf_type.resource> loc(unknown), %arg59: tensor<!tf_type.resource> loc(unknown), %arg60: tensor<!tf_type.resource> loc(unknown), %arg61: tensor<!tf_type.resource> loc(unknown), %arg62: tensor<!tf_type.resource> loc(unknown), %arg63: tensor<!tf_type.resource> loc(unknown), %arg64: tensor<!tf_type.resource> loc(unknown), %arg65: tensor<!tf_type.resource> loc(unknown), %arg66: tensor<!tf_type.resource> loc(unknown), %arg67: tensor<!tf_type.resource> loc(unknown), %arg68: tensor<!tf_type.resource> loc(unknown), %arg69: tensor<!tf_type.resource> loc(unknown), %arg70: tensor<!tf_type.resource> loc(unknown), %arg71: tensor<!tf_type.resource> loc(unknown), %arg72: tensor<!tf_type.resource> loc(unknown), %arg73: tensor<!tf_type.resource> loc(unknown), %arg74: tensor<!tf_type.resource> loc(unknown), %arg75: tensor<!tf_type.resource> loc(unknown), %arg76: tensor<!tf_type.resource> loc(unknown), %arg77: tensor<!tf_type.resource> loc(unknown), %arg78: tensor<!tf_type.resource> loc(unknown), %arg79: tensor<!tf_type.resource> loc(unknown), %arg80: tensor<!tf_type.resource> loc(unknown), %arg81: tensor<!tf_type.resource> loc(unknown), %arg82: tensor<!tf_type.resource> loc(unknown), %arg83: tensor<!tf_type.resource> loc(unknown), %arg84: tensor<!tf_type.resource> loc(unknown), %arg85: tensor<!tf_type.resource> loc(unknown), %arg86: tensor<!tf_type.resource> loc(unknown), %arg87: tensor<!tf_type.resource> loc(unknown), %arg88: tensor<!tf_type.resource> loc(unknown), %arg89: tensor<!tf_type.resource> loc(unknown), %arg90: tensor<!tf_type.resource> loc(unknown), %arg91: tensor<!tf_type.resource> loc(unknown), %arg92: tensor<!tf_type.resource> loc(unknown), %arg93: tensor<!tf_type.resource> loc(unknown), %arg94: tensor<!tf_type.resource> loc(unknown), %arg95: tensor<!tf_type.resource> loc(unknown), %arg96: tensor<!tf_type.resource> loc(unknown), %arg97: tensor<!tf_type.resource> loc(unknown), %arg98: tensor<!tf_type.resource> loc(unknown), %arg99: tensor<!tf_type.resource> loc(unknown), %arg100: tensor<!tf_type.resource> loc(unknown), %arg101: tensor<!tf_type.resource> loc(unknown), %arg102: tensor<!tf_type.resource> loc(unknown), %arg103: tensor<!tf_type.resource> loc(unknown), %arg104: tensor<!tf_type.resource> loc(unknown), %arg105: tensor<!tf_type.resource> loc(unknown), %arg106: tensor<!tf_type.resource> loc(unknown), %arg107: tensor<!tf_type.resource> loc(unknown), %arg108: tensor<!tf_type.resource> loc(unknown), %arg109: tensor<!tf_type.resource> loc(unknown), %arg110: tensor<!tf_type.resource> loc(unknown), %arg111: tensor<!tf_type.resource> loc(unknown), %arg112: tensor<!tf_type.resource> loc(unknown), %arg113: tensor<!tf_type.resource> loc(unknown), %arg114: tensor<!tf_type.resource> loc(unknown), %arg115: tensor<!tf_type.resource> loc(unknown), %arg116: tensor<!tf_type.resource> loc(unknown), %arg117: tensor<!tf_type.resource> loc(unknown), %arg118: tensor<!tf_type.resource> loc(unknown), %arg119: tensor<!tf_type.resource> loc(unknown), %arg120: tensor<!tf_type.resource> loc(unknown), %arg121: tensor<!tf_type.resource> loc(unknown), %arg122: tensor<!tf_type.resource> loc(unknown), %arg123: tensor<!tf_type.resource> loc(unknown), %arg124: tensor<!tf_type.resource> loc(unknown), %arg125: tensor<!tf_type.resource> loc(unknown), %arg126: tensor<!tf_type.resource> loc(unknown), %arg127: tensor<!tf_type.resource> loc(unknown), %arg128: tensor<!tf_type.resource> loc(unknown), %arg129: tensor<!tf_type.resource> loc(unknown), %arg130: tensor<!tf_type.resource> loc(unknown), %arg131: tensor<!tf_type.resource> loc(unknown), %arg132: tensor<!tf_type.resource> loc(unknown), %arg133: tensor<!tf_type.resource> loc(unknown), %arg134: tensor<!tf_type.resource> loc(unknown), %arg135: tensor<!tf_type.resource> loc(unknown), %arg136: tensor<!tf_type.resource> loc(unknown), %arg137: tensor<!tf_type.resource> loc(unknown), %arg138: tensor<!tf_type.resource> loc(unknown), %arg139: tensor<!tf_type.resource> loc(unknown), %arg140: tensor<!tf_type.resource> loc(unknown), %arg141: tensor<!tf_type.resource> loc(unknown), %arg142: tensor<!tf_type.resource> loc(unknown), %arg143: tensor<!tf_type.resource> loc(unknown), %arg144: tensor<!tf_type.resource> loc(unknown), %arg145: tensor<!tf_type.resource> loc(unknown), %arg146: tensor<!tf_type.resource> loc(unknown), %arg147: tensor<!tf_type.resource> loc(unknown), %arg148: tensor<!tf_type.resource> loc(unknown), %arg149: tensor<!tf_type.resource> loc(unknown), %arg150: tensor<!tf_type.resource> loc(unknown), %arg151: tensor<!tf_type.resource> loc(unknown), %arg152: tensor<!tf_type.resource> loc(unknown), %arg153: tensor<!tf_type.resource> loc(unknown), %arg154: tensor<!tf_type.resource> loc(unknown), %arg155: tensor<!tf_type.resource> loc(unknown), %arg156: tensor<!tf_type.resource> loc(unknown), %arg157: tensor<!tf_type.resource> loc(unknown), %arg158: tensor<!tf_type.resource> loc(unknown), %arg159: tensor<!tf_type.resource> loc(unknown), %arg160: tensor<!tf_type.resource> loc(unknown), %arg161: tensor<!tf_type.resource> loc(unknown), %arg162: tensor<!tf_type.resource> loc(unknown), %arg163: tensor<!tf_type.resource> loc(unknown), %arg164: tensor<!tf_type.resource> loc(unknown), %arg165: tensor<!tf_type.resource> loc(unknown), %arg166: tensor<!tf_type.resource> loc(unknown), %arg167: tensor<!tf_type.resource> loc(unknown), %arg168: tensor<!tf_type.resource> loc(unknown), %arg169: tensor<!tf_type.resource> loc(unknown), %arg170: tensor<!tf_type.resource> loc(unknown), %arg171: tensor<!tf_type.resource> loc(unknown), %arg172: tensor<!tf_type.resource> loc(unknown), %arg173: tensor<!tf_type.resource> loc(unknown), %arg174: tensor<!tf_type.resource> loc(unknown), %arg175: tensor<!tf_type.resource> loc(unknown), %arg176: tensor<!tf_type.resource> loc(unknown), %arg177: tensor<!tf_type.resource> loc(unknown), %arg178: tensor<!tf_type.resource> loc(unknown), %arg179: tensor<!tf_type.resource> loc(unknown), %arg180: tensor<!tf_type.resource> loc(unknown), %arg181: tensor<!tf_type.resource> loc(unknown), %arg182: tensor<!tf_type.resource> loc(unknown), %arg183: tensor<!tf_type.resource> loc(unknown), %arg184: tensor<!tf_type.resource> loc(unknown), %arg185: tensor<!tf_type.resource> loc(unknown), %arg186: tensor<!tf_type.resource> loc(unknown), %arg187: tensor<!tf_type.resource> loc(unknown), %arg188: tensor<!tf_type.resource> loc(unknown), %arg189: tensor<!tf_type.resource> loc(unknown), %arg190: tensor<!tf_type.resource> loc(unknown), %arg191: tensor<!tf_type.resource> loc(unknown), %arg192: tensor<!tf_type.resource> loc(unknown), %arg193: tensor<!tf_type.resource> loc(unknown), %arg194: tensor<!tf_type.resource> loc(unknown), %arg195: tensor<!tf_type.resource> loc(unknown), %arg196: tensor<!tf_type.resource> loc(unknown), %arg197: tensor<!tf_type.resource> loc(unknown), %arg198: tensor<!tf_type.resource> loc(unknown), %arg199: tensor<!tf_type.resource> loc(unknown), %arg200: tensor<!tf_type.resource> loc(unknown), %arg201: tensor<!tf_type.resource> loc(unknown), %arg202: tensor<!tf_type.resource> loc(unknown), %arg203: tensor<!tf_type.resource> loc(unknown), %arg204: tensor<!tf_type.resource> loc(unknown), %arg205: tensor<!tf_type.resource> loc(unknown), %arg206: tensor<!tf_type.resource> loc(unknown), %arg207: tensor<!tf_type.resource> loc(unknown), %arg208: tensor<!tf_type.resource> loc(unknown), %arg209: tensor<!tf_type.resource> loc(unknown), %arg210: tensor<!tf_type.resource> loc(unknown), %arg211: tensor<!tf_type.resource> loc(unknown), %arg212: tensor<!tf_type.resource> loc(unknown), %arg213: tensor<!tf_type.resource> loc(unknown), %arg214: tensor<!tf_type.resource> loc(unknown), %arg215: tensor<!tf_type.resource> loc(unknown), %arg216: tensor<!tf_type.resource> loc(unknown), %arg217: tensor<!tf_type.resource> loc(unknown), %arg218: tensor<!tf_type.resource> loc(unknown), %arg219: tensor<!tf_type.resource> loc(unknown), %arg220: tensor<!tf_type.resource> loc(unknown), %arg221: tensor<!tf_type.resource> loc(unknown), %arg222: tensor<!tf_type.resource> loc(unknown), %arg223: tensor<!tf_type.resource> loc(unknown), %arg224: tensor<!tf_type.resource> loc(unknown), %arg225: tensor<!tf_type.resource> loc(unknown), %arg226: tensor<!tf_type.resource> loc(unknown), %arg227: tensor<!tf_type.resource> loc(unknown), %arg228: tensor<!tf_type.resource> loc(unknown), %arg229: tensor<!tf_type.resource> loc(unknown), %arg230: tensor<!tf_type.resource> loc(unknown), %arg231: tensor<!tf_type.resource> loc(unknown), %arg232: tensor<!tf_type.resource> loc(unknown), %arg233: tensor<!tf_type.resource> loc(unknown), %arg234: tensor<!tf_type.resource> loc(unknown), %arg235: tensor<!tf_type.resource> loc(unknown), %arg236: tensor<!tf_type.resource> loc(unknown), %arg237: tensor<!tf_type.resource> loc(unknown), %arg238: tensor<!tf_type.resource> loc(unknown), %arg239: tensor<!tf_type.resource> loc(unknown), %arg240: tensor<!tf_type.resource> loc(unknown), %arg241: tensor<!tf_type.resource> loc(unknown), %arg242: tensor<!tf_type.resource> loc(unknown), %arg243: tensor<!tf_type.resource> loc(unknown), %arg244: tensor<!tf_type.resource> loc(unknown), %arg245: tensor<!tf_type.resource> loc(unknown), %arg246: tensor<!tf_type.resource> loc(unknown), %arg247: tensor<!tf_type.resource> loc(unknown), %arg248: tensor<!tf_type.resource> loc(unknown), %arg249: tensor<!tf_type.resource> loc(unknown), %arg250: tensor<!tf_type.resource> loc(unknown), %arg251: tensor<!tf_type.resource> loc(unknown), %arg252: tensor<!tf_type.resource> loc(unknown), %arg253: tensor<!tf_type.resource> loc(unknown), %arg254: tensor<!tf_type.resource> loc(unknown), %arg255: tensor<!tf_type.resource> loc(unknown), %arg256: tensor<!tf_type.resource> loc(unknown), %arg257: tensor<!tf_type.resource> loc(unknown), %arg258: tensor<!tf_type.resource> loc(unknown), %arg259: tensor<!tf_type.resource> loc(unknown), %arg260: tensor<!tf_type.resource> loc(unknown), %arg261: tensor<!tf_type.resource> loc(unknown), %arg262: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11, %arg12, %arg13, %arg14, %arg15, %arg16, %arg17, %arg18, %arg19, %arg20, %arg21, %arg22, %arg23, %arg24, %arg25, %arg26, %arg27, %arg28, %arg29, %arg30, %arg31, %arg32, %arg33, %arg34, %arg35, %arg36, %arg37, %arg38, %arg39, %arg40, %arg41, %arg42, %arg43, %arg44, %arg45, %arg46, %arg47, %arg48, %arg49, %arg50, %arg51, %arg52, %arg53, %arg54, %arg55, %arg56, %arg57, %arg58, %arg59, %arg60, %arg61, %arg62, %arg63, %arg64, %arg65, %arg66, %arg67, %arg68, %arg69, %arg70, %arg71, %arg72, %arg73, %arg74, %arg75, %arg76, %arg77, %arg78, %arg79, %arg80, %arg81, %arg82, %arg83, %arg84, %arg85, %arg86, %arg87, %arg88, %arg89, %arg90, %arg91, %arg92, %arg93, %arg94, %arg95, %arg96, %arg97, %arg98, %arg99, %arg100, %arg101, %arg102, %arg103, %arg104, %arg105, %arg106, %arg107, %arg108, %arg109, %arg110, %arg111, %arg112, %arg113, %arg114, %arg115, %arg116, %arg117, %arg118, %arg119, %arg120, %arg121, %arg122, %arg123, %arg124, %arg125, %arg126, %arg127, %arg128, %arg129, %arg130, %arg131, %arg132, %arg133, %arg134, %arg135, %arg136, %arg137, %arg138, %arg139, %arg140, %arg141, %arg142, %arg143, %arg144, %arg145, %arg146, %arg147, %arg148, %arg149, %arg150, %arg151, %arg152, %arg153, %arg154, %arg155, %arg156, %arg157, %arg158, %arg159, %arg160, %arg161, %arg162, %arg163, %arg164, %arg165, %arg166, %arg167, %arg168, %arg169, %arg170, %arg171, %arg172, %arg173, %arg174, %arg175, %arg176, %arg177, %arg178, %arg179, %arg180, %arg181, %arg182, %arg183, %arg184, %arg185, %arg186, %arg187, %arg188, %arg189, %arg190, %arg191, %arg192, %arg193, %arg194, %arg195, %arg196, %arg197, %arg198, %arg199, %arg200, %arg201, %arg202, %arg203, %arg204, %arg205, %arg206, %arg207, %arg208, %arg209, %arg210, %arg211, %arg212, %arg213, %arg214, %arg215, %arg216, %arg217, %arg218, %arg219, %arg220, %arg221, %arg222, %arg223, %arg224, %arg225, %arg226, %arg227, %arg228, %arg229, %arg230, %arg231, %arg232, %arg233, %arg234, %arg235, %arg236, %arg237, %arg238, %arg239, %arg240, %arg241, %arg242, %arg243, %arg244, %arg245, %arg246, %arg247, %arg248, %arg249, %arg250, %arg251, %arg252, %arg253, %arg254, %arg255, %arg256, %arg257, %arg258, %arg259, %arg260, %arg261, %arg262) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_104170} : (tensor<?x224x224x3xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?xf32> loc(#loc5499)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc5500)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?xf32>) -> tensor<?x?xf32> loc(#loc5501)
      tf_executor.fetch %outputs_1, %control : tensor<?x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_mobilenetv2_1.00_224_layer_call_fn_163440(%arg0: tensor<?x224x224x3xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown), %arg3: tensor<!tf_type.resource> loc(unknown), %arg4: tensor<!tf_type.resource> loc(unknown), %arg5: tensor<!tf_type.resource> loc(unknown), %arg6: tensor<!tf_type.resource> loc(unknown), %arg7: tensor<!tf_type.resource> loc(unknown), %arg8: tensor<!tf_type.resource> loc(unknown), %arg9: tensor<!tf_type.resource> loc(unknown), %arg10: tensor<!tf_type.resource> loc(unknown), %arg11: tensor<!tf_type.resource> loc(unknown), %arg12: tensor<!tf_type.resource> loc(unknown), %arg13: tensor<!tf_type.resource> loc(unknown), %arg14: tensor<!tf_type.resource> loc(unknown), %arg15: tensor<!tf_type.resource> loc(unknown), %arg16: tensor<!tf_type.resource> loc(unknown), %arg17: tensor<!tf_type.resource> loc(unknown), %arg18: tensor<!tf_type.resource> loc(unknown), %arg19: tensor<!tf_type.resource> loc(unknown), %arg20: tensor<!tf_type.resource> loc(unknown), %arg21: tensor<!tf_type.resource> loc(unknown), %arg22: tensor<!tf_type.resource> loc(unknown), %arg23: tensor<!tf_type.resource> loc(unknown), %arg24: tensor<!tf_type.resource> loc(unknown), %arg25: tensor<!tf_type.resource> loc(unknown), %arg26: tensor<!tf_type.resource> loc(unknown), %arg27: tensor<!tf_type.resource> loc(unknown), %arg28: tensor<!tf_type.resource> loc(unknown), %arg29: tensor<!tf_type.resource> loc(unknown), %arg30: tensor<!tf_type.resource> loc(unknown), %arg31: tensor<!tf_type.resource> loc(unknown), %arg32: tensor<!tf_type.resource> loc(unknown), %arg33: tensor<!tf_type.resource> loc(unknown), %arg34: tensor<!tf_type.resource> loc(unknown), %arg35: tensor<!tf_type.resource> loc(unknown), %arg36: tensor<!tf_type.resource> loc(unknown), %arg37: tensor<!tf_type.resource> loc(unknown), %arg38: tensor<!tf_type.resource> loc(unknown), %arg39: tensor<!tf_type.resource> loc(unknown), %arg40: tensor<!tf_type.resource> loc(unknown), %arg41: tensor<!tf_type.resource> loc(unknown), %arg42: tensor<!tf_type.resource> loc(unknown), %arg43: tensor<!tf_type.resource> loc(unknown), %arg44: tensor<!tf_type.resource> loc(unknown), %arg45: tensor<!tf_type.resource> loc(unknown), %arg46: tensor<!tf_type.resource> loc(unknown), %arg47: tensor<!tf_type.resource> loc(unknown), %arg48: tensor<!tf_type.resource> loc(unknown), %arg49: tensor<!tf_type.resource> loc(unknown), %arg50: tensor<!tf_type.resource> loc(unknown), %arg51: tensor<!tf_type.resource> loc(unknown), %arg52: tensor<!tf_type.resource> loc(unknown), %arg53: tensor<!tf_type.resource> loc(unknown), %arg54: tensor<!tf_type.resource> loc(unknown), %arg55: tensor<!tf_type.resource> loc(unknown), %arg56: tensor<!tf_type.resource> loc(unknown), %arg57: tensor<!tf_type.resource> loc(unknown), %arg58: tensor<!tf_type.resource> loc(unknown), %arg59: tensor<!tf_type.resource> loc(unknown), %arg60: tensor<!tf_type.resource> loc(unknown), %arg61: tensor<!tf_type.resource> loc(unknown), %arg62: tensor<!tf_type.resource> loc(unknown), %arg63: tensor<!tf_type.resource> loc(unknown), %arg64: tensor<!tf_type.resource> loc(unknown), %arg65: tensor<!tf_type.resource> loc(unknown), %arg66: tensor<!tf_type.resource> loc(unknown), %arg67: tensor<!tf_type.resource> loc(unknown), %arg68: tensor<!tf_type.resource> loc(unknown), %arg69: tensor<!tf_type.resource> loc(unknown), %arg70: tensor<!tf_type.resource> loc(unknown), %arg71: tensor<!tf_type.resource> loc(unknown), %arg72: tensor<!tf_type.resource> loc(unknown), %arg73: tensor<!tf_type.resource> loc(unknown), %arg74: tensor<!tf_type.resource> loc(unknown), %arg75: tensor<!tf_type.resource> loc(unknown), %arg76: tensor<!tf_type.resource> loc(unknown), %arg77: tensor<!tf_type.resource> loc(unknown), %arg78: tensor<!tf_type.resource> loc(unknown), %arg79: tensor<!tf_type.resource> loc(unknown), %arg80: tensor<!tf_type.resource> loc(unknown), %arg81: tensor<!tf_type.resource> loc(unknown), %arg82: tensor<!tf_type.resource> loc(unknown), %arg83: tensor<!tf_type.resource> loc(unknown), %arg84: tensor<!tf_type.resource> loc(unknown), %arg85: tensor<!tf_type.resource> loc(unknown), %arg86: tensor<!tf_type.resource> loc(unknown), %arg87: tensor<!tf_type.resource> loc(unknown), %arg88: tensor<!tf_type.resource> loc(unknown), %arg89: tensor<!tf_type.resource> loc(unknown), %arg90: tensor<!tf_type.resource> loc(unknown), %arg91: tensor<!tf_type.resource> loc(unknown), %arg92: tensor<!tf_type.resource> loc(unknown), %arg93: tensor<!tf_type.resource> loc(unknown), %arg94: tensor<!tf_type.resource> loc(unknown), %arg95: tensor<!tf_type.resource> loc(unknown), %arg96: tensor<!tf_type.resource> loc(unknown), %arg97: tensor<!tf_type.resource> loc(unknown), %arg98: tensor<!tf_type.resource> loc(unknown), %arg99: tensor<!tf_type.resource> loc(unknown), %arg100: tensor<!tf_type.resource> loc(unknown), %arg101: tensor<!tf_type.resource> loc(unknown), %arg102: tensor<!tf_type.resource> loc(unknown), %arg103: tensor<!tf_type.resource> loc(unknown), %arg104: tensor<!tf_type.resource> loc(unknown), %arg105: tensor<!tf_type.resource> loc(unknown), %arg106: tensor<!tf_type.resource> loc(unknown), %arg107: tensor<!tf_type.resource> loc(unknown), %arg108: tensor<!tf_type.resource> loc(unknown), %arg109: tensor<!tf_type.resource> loc(unknown), %arg110: tensor<!tf_type.resource> loc(unknown), %arg111: tensor<!tf_type.resource> loc(unknown), %arg112: tensor<!tf_type.resource> loc(unknown), %arg113: tensor<!tf_type.resource> loc(unknown), %arg114: tensor<!tf_type.resource> loc(unknown), %arg115: tensor<!tf_type.resource> loc(unknown), %arg116: tensor<!tf_type.resource> loc(unknown), %arg117: tensor<!tf_type.resource> loc(unknown), %arg118: tensor<!tf_type.resource> loc(unknown), %arg119: tensor<!tf_type.resource> loc(unknown), %arg120: tensor<!tf_type.resource> loc(unknown), %arg121: tensor<!tf_type.resource> loc(unknown), %arg122: tensor<!tf_type.resource> loc(unknown), %arg123: tensor<!tf_type.resource> loc(unknown), %arg124: tensor<!tf_type.resource> loc(unknown), %arg125: tensor<!tf_type.resource> loc(unknown), %arg126: tensor<!tf_type.resource> loc(unknown), %arg127: tensor<!tf_type.resource> loc(unknown), %arg128: tensor<!tf_type.resource> loc(unknown), %arg129: tensor<!tf_type.resource> loc(unknown), %arg130: tensor<!tf_type.resource> loc(unknown), %arg131: tensor<!tf_type.resource> loc(unknown), %arg132: tensor<!tf_type.resource> loc(unknown), %arg133: tensor<!tf_type.resource> loc(unknown), %arg134: tensor<!tf_type.resource> loc(unknown), %arg135: tensor<!tf_type.resource> loc(unknown), %arg136: tensor<!tf_type.resource> loc(unknown), %arg137: tensor<!tf_type.resource> loc(unknown), %arg138: tensor<!tf_type.resource> loc(unknown), %arg139: tensor<!tf_type.resource> loc(unknown), %arg140: tensor<!tf_type.resource> loc(unknown), %arg141: tensor<!tf_type.resource> loc(unknown), %arg142: tensor<!tf_type.resource> loc(unknown), %arg143: tensor<!tf_type.resource> loc(unknown), %arg144: tensor<!tf_type.resource> loc(unknown), %arg145: tensor<!tf_type.resource> loc(unknown), %arg146: tensor<!tf_type.resource> loc(unknown), %arg147: tensor<!tf_type.resource> loc(unknown), %arg148: tensor<!tf_type.resource> loc(unknown), %arg149: tensor<!tf_type.resource> loc(unknown), %arg150: tensor<!tf_type.resource> loc(unknown), %arg151: tensor<!tf_type.resource> loc(unknown), %arg152: tensor<!tf_type.resource> loc(unknown), %arg153: tensor<!tf_type.resource> loc(unknown), %arg154: tensor<!tf_type.resource> loc(unknown), %arg155: tensor<!tf_type.resource> loc(unknown), %arg156: tensor<!tf_type.resource> loc(unknown), %arg157: tensor<!tf_type.resource> loc(unknown), %arg158: tensor<!tf_type.resource> loc(unknown), %arg159: tensor<!tf_type.resource> loc(unknown), %arg160: tensor<!tf_type.resource> loc(unknown), %arg161: tensor<!tf_type.resource> loc(unknown), %arg162: tensor<!tf_type.resource> loc(unknown), %arg163: tensor<!tf_type.resource> loc(unknown), %arg164: tensor<!tf_type.resource> loc(unknown), %arg165: tensor<!tf_type.resource> loc(unknown), %arg166: tensor<!tf_type.resource> loc(unknown), %arg167: tensor<!tf_type.resource> loc(unknown), %arg168: tensor<!tf_type.resource> loc(unknown), %arg169: tensor<!tf_type.resource> loc(unknown), %arg170: tensor<!tf_type.resource> loc(unknown), %arg171: tensor<!tf_type.resource> loc(unknown), %arg172: tensor<!tf_type.resource> loc(unknown), %arg173: tensor<!tf_type.resource> loc(unknown), %arg174: tensor<!tf_type.resource> loc(unknown), %arg175: tensor<!tf_type.resource> loc(unknown), %arg176: tensor<!tf_type.resource> loc(unknown), %arg177: tensor<!tf_type.resource> loc(unknown), %arg178: tensor<!tf_type.resource> loc(unknown), %arg179: tensor<!tf_type.resource> loc(unknown), %arg180: tensor<!tf_type.resource> loc(unknown), %arg181: tensor<!tf_type.resource> loc(unknown), %arg182: tensor<!tf_type.resource> loc(unknown), %arg183: tensor<!tf_type.resource> loc(unknown), %arg184: tensor<!tf_type.resource> loc(unknown), %arg185: tensor<!tf_type.resource> loc(unknown), %arg186: tensor<!tf_type.resource> loc(unknown), %arg187: tensor<!tf_type.resource> loc(unknown), %arg188: tensor<!tf_type.resource> loc(unknown), %arg189: tensor<!tf_type.resource> loc(unknown), %arg190: tensor<!tf_type.resource> loc(unknown), %arg191: tensor<!tf_type.resource> loc(unknown), %arg192: tensor<!tf_type.resource> loc(unknown), %arg193: tensor<!tf_type.resource> loc(unknown), %arg194: tensor<!tf_type.resource> loc(unknown), %arg195: tensor<!tf_type.resource> loc(unknown), %arg196: tensor<!tf_type.resource> loc(unknown), %arg197: tensor<!tf_type.resource> loc(unknown), %arg198: tensor<!tf_type.resource> loc(unknown), %arg199: tensor<!tf_type.resource> loc(unknown), %arg200: tensor<!tf_type.resource> loc(unknown), %arg201: tensor<!tf_type.resource> loc(unknown), %arg202: tensor<!tf_type.resource> loc(unknown), %arg203: tensor<!tf_type.resource> loc(unknown), %arg204: tensor<!tf_type.resource> loc(unknown), %arg205: tensor<!tf_type.resource> loc(unknown), %arg206: tensor<!tf_type.resource> loc(unknown), %arg207: tensor<!tf_type.resource> loc(unknown), %arg208: tensor<!tf_type.resource> loc(unknown), %arg209: tensor<!tf_type.resource> loc(unknown), %arg210: tensor<!tf_type.resource> loc(unknown), %arg211: tensor<!tf_type.resource> loc(unknown), %arg212: tensor<!tf_type.resource> loc(unknown), %arg213: tensor<!tf_type.resource> loc(unknown), %arg214: tensor<!tf_type.resource> loc(unknown), %arg215: tensor<!tf_type.resource> loc(unknown), %arg216: tensor<!tf_type.resource> loc(unknown), %arg217: tensor<!tf_type.resource> loc(unknown), %arg218: tensor<!tf_type.resource> loc(unknown), %arg219: tensor<!tf_type.resource> loc(unknown), %arg220: tensor<!tf_type.resource> loc(unknown), %arg221: tensor<!tf_type.resource> loc(unknown), %arg222: tensor<!tf_type.resource> loc(unknown), %arg223: tensor<!tf_type.resource> loc(unknown), %arg224: tensor<!tf_type.resource> loc(unknown), %arg225: tensor<!tf_type.resource> loc(unknown), %arg226: tensor<!tf_type.resource> loc(unknown), %arg227: tensor<!tf_type.resource> loc(unknown), %arg228: tensor<!tf_type.resource> loc(unknown), %arg229: tensor<!tf_type.resource> loc(unknown), %arg230: tensor<!tf_type.resource> loc(unknown), %arg231: tensor<!tf_type.resource> loc(unknown), %arg232: tensor<!tf_type.resource> loc(unknown), %arg233: tensor<!tf_type.resource> loc(unknown), %arg234: tensor<!tf_type.resource> loc(unknown), %arg235: tensor<!tf_type.resource> loc(unknown), %arg236: tensor<!tf_type.resource> loc(unknown), %arg237: tensor<!tf_type.resource> loc(unknown), %arg238: tensor<!tf_type.resource> loc(unknown), %arg239: tensor<!tf_type.resource> loc(unknown), %arg240: tensor<!tf_type.resource> loc(unknown), %arg241: tensor<!tf_type.resource> loc(unknown), %arg242: tensor<!tf_type.resource> loc(unknown), %arg243: tensor<!tf_type.resource> loc(unknown), %arg244: tensor<!tf_type.resource> loc(unknown), %arg245: tensor<!tf_type.resource> loc(unknown), %arg246: tensor<!tf_type.resource> loc(unknown), %arg247: tensor<!tf_type.resource> loc(unknown), %arg248: tensor<!tf_type.resource> loc(unknown), %arg249: tensor<!tf_type.resource> loc(unknown), %arg250: tensor<!tf_type.resource> loc(unknown), %arg251: tensor<!tf_type.resource> loc(unknown), %arg252: tensor<!tf_type.resource> loc(unknown), %arg253: tensor<!tf_type.resource> loc(unknown), %arg254: tensor<!tf_type.resource> loc(unknown), %arg255: tensor<!tf_type.resource> loc(unknown), %arg256: tensor<!tf_type.resource> loc(unknown), %arg257: tensor<!tf_type.resource> loc(unknown), %arg258: tensor<!tf_type.resource> loc(unknown), %arg259: tensor<!tf_type.resource> loc(unknown), %arg260: tensor<!tf_type.resource> loc(unknown), %arg261: tensor<!tf_type.resource> loc(unknown), %arg262: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x224x224x3>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11, %arg12, %arg13, %arg14, %arg15, %arg16, %arg17, %arg18, %arg19, %arg20, %arg21, %arg22, %arg23, %arg24, %arg25, %arg26, %arg27, %arg28, %arg29, %arg30, %arg31, %arg32, %arg33, %arg34, %arg35, %arg36, %arg37, %arg38, %arg39, %arg40, %arg41, %arg42, %arg43, %arg44, %arg45, %arg46, %arg47, %arg48, %arg49, %arg50, %arg51, %arg52, %arg53, %arg54, %arg55, %arg56, %arg57, %arg58, %arg59, %arg60, %arg61, %arg62, %arg63, %arg64, %arg65, %arg66, %arg67, %arg68, %arg69, %arg70, %arg71, %arg72, %arg73, %arg74, %arg75, %arg76, %arg77, %arg78, %arg79, %arg80, %arg81, %arg82, %arg83, %arg84, %arg85, %arg86, %arg87, %arg88, %arg89, %arg90, %arg91, %arg92, %arg93, %arg94, %arg95, %arg96, %arg97, %arg98, %arg99, %arg100, %arg101, %arg102, %arg103, %arg104, %arg105, %arg106, %arg107, %arg108, %arg109, %arg110, %arg111, %arg112, %arg113, %arg114, %arg115, %arg116, %arg117, %arg118, %arg119, %arg120, %arg121, %arg122, %arg123, %arg124, %arg125, %arg126, %arg127, %arg128, %arg129, %arg130, %arg131, %arg132, %arg133, %arg134, %arg135, %arg136, %arg137, %arg138, %arg139, %arg140, %arg141, %arg142, %arg143, %arg144, %arg145, %arg146, %arg147, %arg148, %arg149, %arg150, %arg151, %arg152, %arg153, %arg154, %arg155, %arg156, %arg157, %arg158, %arg159, %arg160, %arg161, %arg162, %arg163, %arg164, %arg165, %arg166, %arg167, %arg168, %arg169, %arg170, %arg171, %arg172, %arg173, %arg174, %arg175, %arg176, %arg177, %arg178, %arg179, %arg180, %arg181, %arg182, %arg183, %arg184, %arg185, %arg186, %arg187, %arg188, %arg189, %arg190, %arg191, %arg192, %arg193, %arg194, %arg195, %arg196, %arg197, %arg198, %arg199, %arg200, %arg201, %arg202, %arg203, %arg204, %arg205, %arg206, %arg207, %arg208, %arg209, %arg210, %arg211, %arg212, %arg213, %arg214, %arg215, %arg216, %arg217, %arg218, %arg219, %arg220, %arg221, %arg222, %arg223, %arg224, %arg225, %arg226, %arg227, %arg228, %arg229, %arg230, %arg231, %arg232, %arg233, %arg234, %arg235, %arg236, %arg237, %arg238, %arg239, %arg240, %arg241, %arg242, %arg243, %arg244, %arg245, %arg246, %arg247, %arg248, %arg249, %arg250, %arg251, %arg252, %arg253, %arg254, %arg255, %arg256, %arg257, %arg258, %arg259, %arg260, %arg261, %arg262) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23, 26, 27, 28, 31, 32, 33, 36, 37, 38, 41, 42, 43, 46, 47, 48, 51, 52, 53, 56, 57, 58, 61, 62, 63, 66, 67, 68, 71, 72, 73, 76, 77, 78, 81, 82, 83, 86, 87, 88, 91, 92, 93, 96, 97, 98, 101, 102, 103, 106, 107, 108, 111, 112, 113, 116, 117, 118, 121, 122, 123, 126, 127, 128, 131, 132, 133, 136, 137, 138, 141, 142, 143, 146, 147, 148, 151, 152, 153, 156, 157, 158, 161, 162, 163, 166, 167, 168, 171, 172, 173, 176, 177, 178, 181, 182, 183, 186, 187, 188, 191, 192, 193, 196, 197, 198, 201, 202, 203, 206, 207, 208, 211, 212, 213, 216, 217, 218, 221, 222, 223, 226, 227, 228, 231, 232, 233, 236, 237, 238, 241, 242, 243, 246, 247, 248, 251, 252, 253, 256, 257, 258, 261, 262], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_128640} : (tensor<?x224x224x3xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?xf32> loc(#loc5502)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc5503)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?xf32>) -> tensor<?x?xf32> loc(#loc5504)
      tf_executor.fetch %outputs_1, %control : tensor<?x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_out_relu_layer_call_and_return_conditional_losses_103960(%arg0: tensor<?x7x7x1280xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x1280xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x1280>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc5505)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc5506)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x1280xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x1280xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_out_relu_layer_call_and_return_conditional_losses_228120(%arg0: tensor<?x7x7x1280xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x1280xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x1280>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.Relu6"(%arg0) {device = ""} : (tensor<?x7x7x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc5507)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc5508)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x1280xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x1280xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_out_relu_layer_call_fn_228070(%arg0: tensor<?x7x7x1280xf32> {tf._user_specified_name = "inputs"} loc(unknown)) -> tensor<?x7x7x1280xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x7x7x1280>]} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.PartitionedCall"(%arg0) {_collective_manager_ids = [], _read_only_resource_inputs = [], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_out_relu_layer_call_and_return_conditional_losses_103960} : (tensor<?x7x7x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc5509)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x7x7x1280xf32>) -> tensor<?x7x7x1280xf32> loc(#loc5510)
      tf_executor.fetch %outputs_0 : tensor<?x7x7x1280xf32> loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x7x7x1280xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_predictions_layer_call_and_return_conditional_losses_104100(%arg0: tensor<?x1280xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x1000xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x1280>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1000xf32> loc(#loc5511)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280x1000xf32> loc(#loc5512)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.MatMul"(%arg0, %outputs_0) {device = "", transpose_a = false, transpose_b = false} : (tensor<?x1280xf32>, tensor<1280x1000xf32>) -> tensor<?x1000xf32> loc(#loc5513)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.BiasAdd"(%outputs_2, %outputs) {data_format = "NHWC", device = ""} : (tensor<?x1000xf32>, tensor<1000xf32>) -> tensor<?x1000xf32> loc(#loc5514)
      %outputs_6, %control_7 = tf_executor.island wraps "tf.Softmax"(%outputs_4) {device = ""} : (tensor<?x1000xf32>) -> tensor<?x1000xf32> loc(#loc5515)
      %control_8 = tf_executor.island(%control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc5516)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6) {device = ""} : (tensor<?x1000xf32>) -> tensor<?x1000xf32> loc(#loc5517)
      tf_executor.fetch %outputs_9, %control_1, %control : tensor<?x1000xf32>, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x1000xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_predictions_layer_call_and_return_conditional_losses_228430(%arg0: tensor<?x1280xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x1000xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x1280>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.ReadVariableOp"(%arg2) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1000xf32> loc(#loc5518)
      %outputs_0, %control_1 = tf_executor.island wraps "tf.ReadVariableOp"(%arg1) {device = ""} : (tensor<!tf_type.resource>) -> tensor<1280x1000xf32> loc(#loc5519)
      %outputs_2, %control_3 = tf_executor.island wraps "tf.MatMul"(%arg0, %outputs_0) {device = "", transpose_a = false, transpose_b = false} : (tensor<?x1280xf32>, tensor<1280x1000xf32>) -> tensor<?x1000xf32> loc(#loc5520)
      %outputs_4, %control_5 = tf_executor.island wraps "tf.BiasAdd"(%outputs_2, %outputs) {data_format = "NHWC", device = ""} : (tensor<?x1000xf32>, tensor<1000xf32>) -> tensor<?x1000xf32> loc(#loc5521)
      %outputs_6, %control_7 = tf_executor.island wraps "tf.Softmax"(%outputs_4) {device = ""} : (tensor<?x1000xf32>) -> tensor<?x1000xf32> loc(#loc5522)
      %control_8 = tf_executor.island(%control_1, %control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc5523)
      %outputs_9, %control_10 = tf_executor.island(%control_8) wraps "tf.Identity"(%outputs_6) {device = ""} : (tensor<?x1000xf32>) -> tensor<?x1000xf32> loc(#loc5524)
      tf_executor.fetch %outputs_9, %control_1, %control : tensor<?x1000xf32>, !tf_executor.control, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x1000xf32> loc(#loc0)
  } loc(#loc0)
  func private @__inference_predictions_layer_call_fn_228320(%arg0: tensor<?x1280xf32> {tf._user_specified_name = "inputs"} loc(unknown), %arg1: tensor<!tf_type.resource> loc(unknown), %arg2: tensor<!tf_type.resource> loc(unknown)) -> tensor<?x?xf32> attributes {tf._construction_context = "kEagerRuntime", tf._input_shapes = [#tf_type.shape<?x1280>, #tf_type.shape<>, #tf_type.shape<>], tf.signature.is_stateful} {
    %0 = tf_executor.graph {
      %outputs, %control = tf_executor.island wraps "tf.StatefulPartitionedCall"(%arg0, %arg1, %arg2) {_collective_manager_ids = [], _read_only_resource_inputs = [1, 2], config = "", config_proto = "\0A\07\0A\03CPU\10\01\0A\07\0A\03GPU\10\012\05*\010J\008\01\82\01\00", device = "", executor_type = "", f = @__inference_predictions_layer_call_and_return_conditional_losses_104100} : (tensor<?x1280xf32>, tensor<!tf_type.resource>, tensor<!tf_type.resource>) -> tensor<?x?xf32> loc(#loc5525)
      %control_0 = tf_executor.island(%control) wraps "tf.NoOp"() {_acd_function_control_output = true, device = ""} : () -> () loc(#loc5526)
      %outputs_1, %control_2 = tf_executor.island(%control_0) wraps "tf.Identity"(%outputs) {device = ""} : (tensor<?x?xf32>) -> tensor<?x?xf32> loc(#loc5527)
      tf_executor.fetch %outputs_1, %control : tensor<?x?xf32>, !tf_executor.control loc(#loc0)
    } loc(#loc0)
    return %0 : tensor<?x?xf32> loc(#loc0)
  } loc(#loc0)
} loc(#loc0)
#loc1 = loc(fused["Const:", "block_10_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc2 = loc(fused["Const:", "block_10_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc3 = loc(fused["ReadVariableOp:", "block_10_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc4 = loc(fused["ReadVariableOp:", "block_10_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc5 = loc(fused["ReadVariableOp:", "block_10_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc6 = loc(fused["ReadVariableOp:", "block_10_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc7 = loc(fused["ReadVariableOp:", "block_10_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc8 = loc(fused["ReadVariableOp:", "block_10_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc9 = loc(fused["ReadVariableOp:", "block_10_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc10 = loc(fused["ReadVariableOp:", "block_10_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc11 = loc(fused["ReadVariableOp:", "block_10_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc12 = loc(fused["ReadVariableOp:", "block_10_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc13 = loc(fused["ReadVariableOp:", "block_10_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc14 = loc(fused["ReadVariableOp:", "block_10_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc15 = loc(fused["ReadVariableOp:", "block_10_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc16 = loc(fused["ReadVariableOp:", "block_10_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc17 = loc(fused["ReadVariableOp:", "block_10_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc18 = loc(fused["Const:", "block_11_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc19 = loc(fused["Const:", "block_11_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc20 = loc(fused["ReadVariableOp:", "block_11_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc21 = loc(fused["ReadVariableOp:", "block_11_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc22 = loc(fused["ReadVariableOp:", "block_11_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc23 = loc(fused["ReadVariableOp:", "block_11_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc24 = loc(fused["ReadVariableOp:", "block_11_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc25 = loc(fused["ReadVariableOp:", "block_11_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc26 = loc(fused["ReadVariableOp:", "block_11_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc27 = loc(fused["ReadVariableOp:", "block_11_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc28 = loc(fused["ReadVariableOp:", "block_11_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc29 = loc(fused["ReadVariableOp:", "block_11_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc30 = loc(fused["ReadVariableOp:", "block_11_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc31 = loc(fused["ReadVariableOp:", "block_11_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc32 = loc(fused["ReadVariableOp:", "block_11_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc33 = loc(fused["ReadVariableOp:", "block_11_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc34 = loc(fused["ReadVariableOp:", "block_11_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc35 = loc(fused["Const:", "block_12_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc36 = loc(fused["Const:", "block_12_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc37 = loc(fused["ReadVariableOp:", "block_12_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc38 = loc(fused["ReadVariableOp:", "block_12_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc39 = loc(fused["ReadVariableOp:", "block_12_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc40 = loc(fused["ReadVariableOp:", "block_12_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc41 = loc(fused["ReadVariableOp:", "block_12_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc42 = loc(fused["ReadVariableOp:", "block_12_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc43 = loc(fused["ReadVariableOp:", "block_12_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc44 = loc(fused["ReadVariableOp:", "block_12_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc45 = loc(fused["ReadVariableOp:", "block_12_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc46 = loc(fused["ReadVariableOp:", "block_12_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc47 = loc(fused["ReadVariableOp:", "block_12_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc48 = loc(fused["ReadVariableOp:", "block_12_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc49 = loc(fused["ReadVariableOp:", "block_12_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc50 = loc(fused["ReadVariableOp:", "block_12_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc51 = loc(fused["ReadVariableOp:", "block_12_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc52 = loc(fused["Const:", "block_13_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc53 = loc(fused["Const:", "block_13_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc54 = loc(fused["ReadVariableOp:", "block_13_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc55 = loc(fused["ReadVariableOp:", "block_13_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc56 = loc(fused["ReadVariableOp:", "block_13_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc57 = loc(fused["ReadVariableOp:", "block_13_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc58 = loc(fused["ReadVariableOp:", "block_13_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc59 = loc(fused["ReadVariableOp:", "block_13_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc60 = loc(fused["ReadVariableOp:", "block_13_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc61 = loc(fused["ReadVariableOp:", "block_13_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc62 = loc(fused["ReadVariableOp:", "block_13_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc63 = loc(fused["ReadVariableOp:", "block_13_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc64 = loc(fused["Const:", "block_13_pad/Pad/paddings@__inference_predict_4079"])
#loc65 = loc(fused["ReadVariableOp:", "block_13_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc66 = loc(fused["ReadVariableOp:", "block_13_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc67 = loc(fused["ReadVariableOp:", "block_13_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc68 = loc(fused["ReadVariableOp:", "block_13_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc69 = loc(fused["ReadVariableOp:", "block_13_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc70 = loc(fused["Const:", "block_14_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc71 = loc(fused["Const:", "block_14_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc72 = loc(fused["ReadVariableOp:", "block_14_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc73 = loc(fused["ReadVariableOp:", "block_14_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc74 = loc(fused["ReadVariableOp:", "block_14_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc75 = loc(fused["ReadVariableOp:", "block_14_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc76 = loc(fused["ReadVariableOp:", "block_14_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc77 = loc(fused["ReadVariableOp:", "block_14_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc78 = loc(fused["ReadVariableOp:", "block_14_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc79 = loc(fused["ReadVariableOp:", "block_14_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc80 = loc(fused["ReadVariableOp:", "block_14_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc81 = loc(fused["ReadVariableOp:", "block_14_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc82 = loc(fused["ReadVariableOp:", "block_14_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc83 = loc(fused["ReadVariableOp:", "block_14_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc84 = loc(fused["ReadVariableOp:", "block_14_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc85 = loc(fused["ReadVariableOp:", "block_14_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc86 = loc(fused["ReadVariableOp:", "block_14_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc87 = loc(fused["Const:", "block_15_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc88 = loc(fused["Const:", "block_15_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc89 = loc(fused["ReadVariableOp:", "block_15_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc90 = loc(fused["ReadVariableOp:", "block_15_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc91 = loc(fused["ReadVariableOp:", "block_15_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc92 = loc(fused["ReadVariableOp:", "block_15_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc93 = loc(fused["ReadVariableOp:", "block_15_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc94 = loc(fused["ReadVariableOp:", "block_15_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc95 = loc(fused["ReadVariableOp:", "block_15_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc96 = loc(fused["ReadVariableOp:", "block_15_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc97 = loc(fused["ReadVariableOp:", "block_15_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc98 = loc(fused["ReadVariableOp:", "block_15_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc99 = loc(fused["ReadVariableOp:", "block_15_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc100 = loc(fused["ReadVariableOp:", "block_15_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc101 = loc(fused["ReadVariableOp:", "block_15_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc102 = loc(fused["ReadVariableOp:", "block_15_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc103 = loc(fused["ReadVariableOp:", "block_15_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc104 = loc(fused["Const:", "block_16_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc105 = loc(fused["Const:", "block_16_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc106 = loc(fused["ReadVariableOp:", "block_16_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc107 = loc(fused["ReadVariableOp:", "block_16_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc108 = loc(fused["ReadVariableOp:", "block_16_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc109 = loc(fused["ReadVariableOp:", "block_16_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc110 = loc(fused["ReadVariableOp:", "block_16_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc111 = loc(fused["ReadVariableOp:", "block_16_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc112 = loc(fused["ReadVariableOp:", "block_16_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc113 = loc(fused["ReadVariableOp:", "block_16_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc114 = loc(fused["ReadVariableOp:", "block_16_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc115 = loc(fused["ReadVariableOp:", "block_16_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc116 = loc(fused["ReadVariableOp:", "block_16_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc117 = loc(fused["ReadVariableOp:", "block_16_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc118 = loc(fused["ReadVariableOp:", "block_16_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc119 = loc(fused["ReadVariableOp:", "block_16_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc120 = loc(fused["ReadVariableOp:", "block_16_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc121 = loc(fused["Const:", "block_1_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc122 = loc(fused["Const:", "block_1_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc123 = loc(fused["ReadVariableOp:", "block_1_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc124 = loc(fused["ReadVariableOp:", "block_1_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc125 = loc(fused["ReadVariableOp:", "block_1_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc126 = loc(fused["ReadVariableOp:", "block_1_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc127 = loc(fused["ReadVariableOp:", "block_1_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc128 = loc(fused["ReadVariableOp:", "block_1_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc129 = loc(fused["ReadVariableOp:", "block_1_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc130 = loc(fused["ReadVariableOp:", "block_1_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc131 = loc(fused["ReadVariableOp:", "block_1_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc132 = loc(fused["ReadVariableOp:", "block_1_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc133 = loc(fused["Const:", "block_1_pad/Pad/paddings@__inference_predict_4079"])
#loc134 = loc(fused["ReadVariableOp:", "block_1_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc135 = loc(fused["ReadVariableOp:", "block_1_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc136 = loc(fused["ReadVariableOp:", "block_1_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc137 = loc(fused["ReadVariableOp:", "block_1_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc138 = loc(fused["ReadVariableOp:", "block_1_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc139 = loc(fused["Const:", "block_2_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc140 = loc(fused["Const:", "block_2_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc141 = loc(fused["ReadVariableOp:", "block_2_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc142 = loc(fused["ReadVariableOp:", "block_2_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc143 = loc(fused["ReadVariableOp:", "block_2_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc144 = loc(fused["ReadVariableOp:", "block_2_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc145 = loc(fused["ReadVariableOp:", "block_2_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc146 = loc(fused["ReadVariableOp:", "block_2_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc147 = loc(fused["ReadVariableOp:", "block_2_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc148 = loc(fused["ReadVariableOp:", "block_2_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc149 = loc(fused["ReadVariableOp:", "block_2_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc150 = loc(fused["ReadVariableOp:", "block_2_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc151 = loc(fused["ReadVariableOp:", "block_2_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc152 = loc(fused["ReadVariableOp:", "block_2_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc153 = loc(fused["ReadVariableOp:", "block_2_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc154 = loc(fused["ReadVariableOp:", "block_2_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc155 = loc(fused["ReadVariableOp:", "block_2_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc156 = loc(fused["Const:", "block_3_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc157 = loc(fused["Const:", "block_3_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc158 = loc(fused["ReadVariableOp:", "block_3_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc159 = loc(fused["ReadVariableOp:", "block_3_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc160 = loc(fused["ReadVariableOp:", "block_3_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc161 = loc(fused["ReadVariableOp:", "block_3_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc162 = loc(fused["ReadVariableOp:", "block_3_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc163 = loc(fused["ReadVariableOp:", "block_3_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc164 = loc(fused["ReadVariableOp:", "block_3_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc165 = loc(fused["ReadVariableOp:", "block_3_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc166 = loc(fused["ReadVariableOp:", "block_3_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc167 = loc(fused["ReadVariableOp:", "block_3_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc168 = loc(fused["Const:", "block_3_pad/Pad/paddings@__inference_predict_4079"])
#loc169 = loc(fused["ReadVariableOp:", "block_3_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc170 = loc(fused["ReadVariableOp:", "block_3_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc171 = loc(fused["ReadVariableOp:", "block_3_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc172 = loc(fused["ReadVariableOp:", "block_3_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc173 = loc(fused["ReadVariableOp:", "block_3_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc174 = loc(fused["Const:", "block_4_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc175 = loc(fused["Const:", "block_4_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc176 = loc(fused["ReadVariableOp:", "block_4_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc177 = loc(fused["ReadVariableOp:", "block_4_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc178 = loc(fused["ReadVariableOp:", "block_4_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc179 = loc(fused["ReadVariableOp:", "block_4_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc180 = loc(fused["ReadVariableOp:", "block_4_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc181 = loc(fused["ReadVariableOp:", "block_4_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc182 = loc(fused["ReadVariableOp:", "block_4_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc183 = loc(fused["ReadVariableOp:", "block_4_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc184 = loc(fused["ReadVariableOp:", "block_4_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc185 = loc(fused["ReadVariableOp:", "block_4_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc186 = loc(fused["ReadVariableOp:", "block_4_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc187 = loc(fused["ReadVariableOp:", "block_4_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc188 = loc(fused["ReadVariableOp:", "block_4_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc189 = loc(fused["ReadVariableOp:", "block_4_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc190 = loc(fused["ReadVariableOp:", "block_4_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc191 = loc(fused["Const:", "block_5_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc192 = loc(fused["Const:", "block_5_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc193 = loc(fused["ReadVariableOp:", "block_5_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc194 = loc(fused["ReadVariableOp:", "block_5_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc195 = loc(fused["ReadVariableOp:", "block_5_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc196 = loc(fused["ReadVariableOp:", "block_5_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc197 = loc(fused["ReadVariableOp:", "block_5_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc198 = loc(fused["ReadVariableOp:", "block_5_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc199 = loc(fused["ReadVariableOp:", "block_5_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc200 = loc(fused["ReadVariableOp:", "block_5_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc201 = loc(fused["ReadVariableOp:", "block_5_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc202 = loc(fused["ReadVariableOp:", "block_5_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc203 = loc(fused["ReadVariableOp:", "block_5_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc204 = loc(fused["ReadVariableOp:", "block_5_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc205 = loc(fused["ReadVariableOp:", "block_5_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc206 = loc(fused["ReadVariableOp:", "block_5_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc207 = loc(fused["ReadVariableOp:", "block_5_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc208 = loc(fused["Const:", "block_6_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc209 = loc(fused["Const:", "block_6_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc210 = loc(fused["ReadVariableOp:", "block_6_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc211 = loc(fused["ReadVariableOp:", "block_6_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc212 = loc(fused["ReadVariableOp:", "block_6_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc213 = loc(fused["ReadVariableOp:", "block_6_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc214 = loc(fused["ReadVariableOp:", "block_6_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc215 = loc(fused["ReadVariableOp:", "block_6_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc216 = loc(fused["ReadVariableOp:", "block_6_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc217 = loc(fused["ReadVariableOp:", "block_6_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc218 = loc(fused["ReadVariableOp:", "block_6_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc219 = loc(fused["ReadVariableOp:", "block_6_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc220 = loc(fused["Const:", "block_6_pad/Pad/paddings@__inference_predict_4079"])
#loc221 = loc(fused["ReadVariableOp:", "block_6_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc222 = loc(fused["ReadVariableOp:", "block_6_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc223 = loc(fused["ReadVariableOp:", "block_6_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc224 = loc(fused["ReadVariableOp:", "block_6_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc225 = loc(fused["ReadVariableOp:", "block_6_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc226 = loc(fused["Const:", "block_7_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc227 = loc(fused["Const:", "block_7_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc228 = loc(fused["ReadVariableOp:", "block_7_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc229 = loc(fused["ReadVariableOp:", "block_7_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc230 = loc(fused["ReadVariableOp:", "block_7_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc231 = loc(fused["ReadVariableOp:", "block_7_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc232 = loc(fused["ReadVariableOp:", "block_7_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc233 = loc(fused["ReadVariableOp:", "block_7_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc234 = loc(fused["ReadVariableOp:", "block_7_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc235 = loc(fused["ReadVariableOp:", "block_7_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc236 = loc(fused["ReadVariableOp:", "block_7_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc237 = loc(fused["ReadVariableOp:", "block_7_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc238 = loc(fused["ReadVariableOp:", "block_7_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc239 = loc(fused["ReadVariableOp:", "block_7_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc240 = loc(fused["ReadVariableOp:", "block_7_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc241 = loc(fused["ReadVariableOp:", "block_7_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc242 = loc(fused["ReadVariableOp:", "block_7_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc243 = loc(fused["Const:", "block_8_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc244 = loc(fused["Const:", "block_8_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc245 = loc(fused["ReadVariableOp:", "block_8_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc246 = loc(fused["ReadVariableOp:", "block_8_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc247 = loc(fused["ReadVariableOp:", "block_8_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc248 = loc(fused["ReadVariableOp:", "block_8_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc249 = loc(fused["ReadVariableOp:", "block_8_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc250 = loc(fused["ReadVariableOp:", "block_8_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc251 = loc(fused["ReadVariableOp:", "block_8_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc252 = loc(fused["ReadVariableOp:", "block_8_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc253 = loc(fused["ReadVariableOp:", "block_8_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc254 = loc(fused["ReadVariableOp:", "block_8_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc255 = loc(fused["ReadVariableOp:", "block_8_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc256 = loc(fused["ReadVariableOp:", "block_8_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc257 = loc(fused["ReadVariableOp:", "block_8_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc258 = loc(fused["ReadVariableOp:", "block_8_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc259 = loc(fused["ReadVariableOp:", "block_8_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc260 = loc(fused["Const:", "block_9_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc261 = loc(fused["Const:", "block_9_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc262 = loc(fused["ReadVariableOp:", "block_9_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc263 = loc(fused["ReadVariableOp:", "block_9_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc264 = loc(fused["ReadVariableOp:", "block_9_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc265 = loc(fused["ReadVariableOp:", "block_9_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc266 = loc(fused["ReadVariableOp:", "block_9_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc267 = loc(fused["ReadVariableOp:", "block_9_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc268 = loc(fused["ReadVariableOp:", "block_9_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc269 = loc(fused["ReadVariableOp:", "block_9_expand_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc270 = loc(fused["ReadVariableOp:", "block_9_expand_BN/ReadVariableOp@__inference_predict_4079"])
#loc271 = loc(fused["ReadVariableOp:", "block_9_expand/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc272 = loc(fused["ReadVariableOp:", "block_9_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc273 = loc(fused["ReadVariableOp:", "block_9_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc274 = loc(fused["ReadVariableOp:", "block_9_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc275 = loc(fused["ReadVariableOp:", "block_9_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc276 = loc(fused["ReadVariableOp:", "block_9_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc277 = loc(fused["ReadVariableOp:", "bn_Conv1/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc278 = loc(fused["ReadVariableOp:", "bn_Conv1/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc279 = loc(fused["ReadVariableOp:", "bn_Conv1/ReadVariableOp_1@__inference_predict_4079"])
#loc280 = loc(fused["ReadVariableOp:", "bn_Conv1/ReadVariableOp@__inference_predict_4079"])
#loc281 = loc(fused["ReadVariableOp:", "Conv1/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc282 = loc(fused["Conv2D:", "Conv1/Conv2D@__inference_predict_4079"])
#loc283 = loc(fused["FusedBatchNormV3:", "bn_Conv1/FusedBatchNormV3@__inference_predict_4079"])
#loc284 = loc(fused["Relu6:", "Conv1_relu/Relu6@__inference_predict_4079"])
#loc285 = loc(fused["ReadVariableOp:", "Conv_1_bn/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc286 = loc(fused["ReadVariableOp:", "Conv_1_bn/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc287 = loc(fused["ReadVariableOp:", "Conv_1_bn/ReadVariableOp_1@__inference_predict_4079"])
#loc288 = loc(fused["ReadVariableOp:", "Conv_1_bn/ReadVariableOp@__inference_predict_4079"])
#loc289 = loc(fused["ReadVariableOp:", "Conv_1/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc290 = loc(fused["Const:", "expanded_conv_depthwise/depthwise/Shape@__inference_predict_4079"])
#loc291 = loc(fused["Const:", "expanded_conv_depthwise/depthwise/dilation_rate@__inference_predict_4079"])
#loc292 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc293 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc294 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc295 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise_BN/ReadVariableOp@__inference_predict_4079"])
#loc296 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise/depthwise/ReadVariableOp@__inference_predict_4079"])
#loc297 = loc(fused["DepthwiseConv2dNative:", "expanded_conv_depthwise/depthwise@__inference_predict_4079"])
#loc298 = loc(fused["FusedBatchNormV3:", "expanded_conv_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc299 = loc(fused["Relu6:", "expanded_conv_depthwise_relu/Relu6@__inference_predict_4079"])
#loc300 = loc(fused["ReadVariableOp:", "expanded_conv_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_predict_4079"])
#loc301 = loc(fused["ReadVariableOp:", "expanded_conv_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_predict_4079"])
#loc302 = loc(fused["ReadVariableOp:", "expanded_conv_project_BN/ReadVariableOp_1@__inference_predict_4079"])
#loc303 = loc(fused["ReadVariableOp:", "expanded_conv_project_BN/ReadVariableOp@__inference_predict_4079"])
#loc304 = loc(fused["ReadVariableOp:", "expanded_conv_project/Conv2D/ReadVariableOp@__inference_predict_4079"])
#loc305 = loc(fused["Conv2D:", "expanded_conv_project/Conv2D@__inference_predict_4079"])
#loc306 = loc(fused["FusedBatchNormV3:", "expanded_conv_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc307 = loc(fused["Conv2D:", "block_1_expand/Conv2D@__inference_predict_4079"])
#loc308 = loc(fused["FusedBatchNormV3:", "block_1_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc309 = loc(fused["Relu6:", "block_1_expand_relu/Relu6@__inference_predict_4079"])
#loc310 = loc(fused["Pad:", "block_1_pad/Pad@__inference_predict_4079"])
#loc311 = loc(fused["DepthwiseConv2dNative:", "block_1_depthwise/depthwise@__inference_predict_4079"])
#loc312 = loc(fused["FusedBatchNormV3:", "block_1_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc313 = loc(fused["Relu6:", "block_1_depthwise_relu/Relu6@__inference_predict_4079"])
#loc314 = loc(fused["Conv2D:", "block_1_project/Conv2D@__inference_predict_4079"])
#loc315 = loc(fused["FusedBatchNormV3:", "block_1_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc316 = loc(fused["Conv2D:", "block_2_expand/Conv2D@__inference_predict_4079"])
#loc317 = loc(fused["FusedBatchNormV3:", "block_2_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc318 = loc(fused["Relu6:", "block_2_expand_relu/Relu6@__inference_predict_4079"])
#loc319 = loc(fused["DepthwiseConv2dNative:", "block_2_depthwise/depthwise@__inference_predict_4079"])
#loc320 = loc(fused["FusedBatchNormV3:", "block_2_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc321 = loc(fused["Relu6:", "block_2_depthwise_relu/Relu6@__inference_predict_4079"])
#loc322 = loc(fused["Conv2D:", "block_2_project/Conv2D@__inference_predict_4079"])
#loc323 = loc(fused["FusedBatchNormV3:", "block_2_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc324 = loc(fused["AddV2:", "block_2_add/add@__inference_predict_4079"])
#loc325 = loc(fused["Conv2D:", "block_3_expand/Conv2D@__inference_predict_4079"])
#loc326 = loc(fused["FusedBatchNormV3:", "block_3_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc327 = loc(fused["Relu6:", "block_3_expand_relu/Relu6@__inference_predict_4079"])
#loc328 = loc(fused["Pad:", "block_3_pad/Pad@__inference_predict_4079"])
#loc329 = loc(fused["DepthwiseConv2dNative:", "block_3_depthwise/depthwise@__inference_predict_4079"])
#loc330 = loc(fused["FusedBatchNormV3:", "block_3_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc331 = loc(fused["Relu6:", "block_3_depthwise_relu/Relu6@__inference_predict_4079"])
#loc332 = loc(fused["Conv2D:", "block_3_project/Conv2D@__inference_predict_4079"])
#loc333 = loc(fused["FusedBatchNormV3:", "block_3_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc334 = loc(fused["Conv2D:", "block_4_expand/Conv2D@__inference_predict_4079"])
#loc335 = loc(fused["FusedBatchNormV3:", "block_4_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc336 = loc(fused["Relu6:", "block_4_expand_relu/Relu6@__inference_predict_4079"])
#loc337 = loc(fused["DepthwiseConv2dNative:", "block_4_depthwise/depthwise@__inference_predict_4079"])
#loc338 = loc(fused["FusedBatchNormV3:", "block_4_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc339 = loc(fused["Relu6:", "block_4_depthwise_relu/Relu6@__inference_predict_4079"])
#loc340 = loc(fused["Conv2D:", "block_4_project/Conv2D@__inference_predict_4079"])
#loc341 = loc(fused["FusedBatchNormV3:", "block_4_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc342 = loc(fused["AddV2:", "block_4_add/add@__inference_predict_4079"])
#loc343 = loc(fused["Conv2D:", "block_5_expand/Conv2D@__inference_predict_4079"])
#loc344 = loc(fused["FusedBatchNormV3:", "block_5_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc345 = loc(fused["Relu6:", "block_5_expand_relu/Relu6@__inference_predict_4079"])
#loc346 = loc(fused["DepthwiseConv2dNative:", "block_5_depthwise/depthwise@__inference_predict_4079"])
#loc347 = loc(fused["FusedBatchNormV3:", "block_5_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc348 = loc(fused["Relu6:", "block_5_depthwise_relu/Relu6@__inference_predict_4079"])
#loc349 = loc(fused["Conv2D:", "block_5_project/Conv2D@__inference_predict_4079"])
#loc350 = loc(fused["FusedBatchNormV3:", "block_5_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc351 = loc(fused["AddV2:", "block_5_add/add@__inference_predict_4079"])
#loc352 = loc(fused["Conv2D:", "block_6_expand/Conv2D@__inference_predict_4079"])
#loc353 = loc(fused["FusedBatchNormV3:", "block_6_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc354 = loc(fused["Relu6:", "block_6_expand_relu/Relu6@__inference_predict_4079"])
#loc355 = loc(fused["Pad:", "block_6_pad/Pad@__inference_predict_4079"])
#loc356 = loc(fused["DepthwiseConv2dNative:", "block_6_depthwise/depthwise@__inference_predict_4079"])
#loc357 = loc(fused["FusedBatchNormV3:", "block_6_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc358 = loc(fused["Relu6:", "block_6_depthwise_relu/Relu6@__inference_predict_4079"])
#loc359 = loc(fused["Conv2D:", "block_6_project/Conv2D@__inference_predict_4079"])
#loc360 = loc(fused["FusedBatchNormV3:", "block_6_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc361 = loc(fused["Conv2D:", "block_7_expand/Conv2D@__inference_predict_4079"])
#loc362 = loc(fused["FusedBatchNormV3:", "block_7_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc363 = loc(fused["Relu6:", "block_7_expand_relu/Relu6@__inference_predict_4079"])
#loc364 = loc(fused["DepthwiseConv2dNative:", "block_7_depthwise/depthwise@__inference_predict_4079"])
#loc365 = loc(fused["FusedBatchNormV3:", "block_7_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc366 = loc(fused["Relu6:", "block_7_depthwise_relu/Relu6@__inference_predict_4079"])
#loc367 = loc(fused["Conv2D:", "block_7_project/Conv2D@__inference_predict_4079"])
#loc368 = loc(fused["FusedBatchNormV3:", "block_7_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc369 = loc(fused["AddV2:", "block_7_add/add@__inference_predict_4079"])
#loc370 = loc(fused["Conv2D:", "block_8_expand/Conv2D@__inference_predict_4079"])
#loc371 = loc(fused["FusedBatchNormV3:", "block_8_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc372 = loc(fused["Relu6:", "block_8_expand_relu/Relu6@__inference_predict_4079"])
#loc373 = loc(fused["DepthwiseConv2dNative:", "block_8_depthwise/depthwise@__inference_predict_4079"])
#loc374 = loc(fused["FusedBatchNormV3:", "block_8_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc375 = loc(fused["Relu6:", "block_8_depthwise_relu/Relu6@__inference_predict_4079"])
#loc376 = loc(fused["Conv2D:", "block_8_project/Conv2D@__inference_predict_4079"])
#loc377 = loc(fused["FusedBatchNormV3:", "block_8_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc378 = loc(fused["AddV2:", "block_8_add/add@__inference_predict_4079"])
#loc379 = loc(fused["Conv2D:", "block_9_expand/Conv2D@__inference_predict_4079"])
#loc380 = loc(fused["FusedBatchNormV3:", "block_9_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc381 = loc(fused["Relu6:", "block_9_expand_relu/Relu6@__inference_predict_4079"])
#loc382 = loc(fused["DepthwiseConv2dNative:", "block_9_depthwise/depthwise@__inference_predict_4079"])
#loc383 = loc(fused["FusedBatchNormV3:", "block_9_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc384 = loc(fused["Relu6:", "block_9_depthwise_relu/Relu6@__inference_predict_4079"])
#loc385 = loc(fused["Conv2D:", "block_9_project/Conv2D@__inference_predict_4079"])
#loc386 = loc(fused["FusedBatchNormV3:", "block_9_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc387 = loc(fused["AddV2:", "block_9_add/add@__inference_predict_4079"])
#loc388 = loc(fused["Conv2D:", "block_10_expand/Conv2D@__inference_predict_4079"])
#loc389 = loc(fused["FusedBatchNormV3:", "block_10_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc390 = loc(fused["Relu6:", "block_10_expand_relu/Relu6@__inference_predict_4079"])
#loc391 = loc(fused["DepthwiseConv2dNative:", "block_10_depthwise/depthwise@__inference_predict_4079"])
#loc392 = loc(fused["FusedBatchNormV3:", "block_10_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc393 = loc(fused["Relu6:", "block_10_depthwise_relu/Relu6@__inference_predict_4079"])
#loc394 = loc(fused["Conv2D:", "block_10_project/Conv2D@__inference_predict_4079"])
#loc395 = loc(fused["FusedBatchNormV3:", "block_10_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc396 = loc(fused["Conv2D:", "block_11_expand/Conv2D@__inference_predict_4079"])
#loc397 = loc(fused["FusedBatchNormV3:", "block_11_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc398 = loc(fused["Relu6:", "block_11_expand_relu/Relu6@__inference_predict_4079"])
#loc399 = loc(fused["DepthwiseConv2dNative:", "block_11_depthwise/depthwise@__inference_predict_4079"])
#loc400 = loc(fused["FusedBatchNormV3:", "block_11_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc401 = loc(fused["Relu6:", "block_11_depthwise_relu/Relu6@__inference_predict_4079"])
#loc402 = loc(fused["Conv2D:", "block_11_project/Conv2D@__inference_predict_4079"])
#loc403 = loc(fused["FusedBatchNormV3:", "block_11_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc404 = loc(fused["AddV2:", "block_11_add/add@__inference_predict_4079"])
#loc405 = loc(fused["Conv2D:", "block_12_expand/Conv2D@__inference_predict_4079"])
#loc406 = loc(fused["FusedBatchNormV3:", "block_12_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc407 = loc(fused["Relu6:", "block_12_expand_relu/Relu6@__inference_predict_4079"])
#loc408 = loc(fused["DepthwiseConv2dNative:", "block_12_depthwise/depthwise@__inference_predict_4079"])
#loc409 = loc(fused["FusedBatchNormV3:", "block_12_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc410 = loc(fused["Relu6:", "block_12_depthwise_relu/Relu6@__inference_predict_4079"])
#loc411 = loc(fused["Conv2D:", "block_12_project/Conv2D@__inference_predict_4079"])
#loc412 = loc(fused["FusedBatchNormV3:", "block_12_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc413 = loc(fused["AddV2:", "block_12_add/add@__inference_predict_4079"])
#loc414 = loc(fused["Conv2D:", "block_13_expand/Conv2D@__inference_predict_4079"])
#loc415 = loc(fused["FusedBatchNormV3:", "block_13_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc416 = loc(fused["Relu6:", "block_13_expand_relu/Relu6@__inference_predict_4079"])
#loc417 = loc(fused["Pad:", "block_13_pad/Pad@__inference_predict_4079"])
#loc418 = loc(fused["DepthwiseConv2dNative:", "block_13_depthwise/depthwise@__inference_predict_4079"])
#loc419 = loc(fused["FusedBatchNormV3:", "block_13_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc420 = loc(fused["Relu6:", "block_13_depthwise_relu/Relu6@__inference_predict_4079"])
#loc421 = loc(fused["Conv2D:", "block_13_project/Conv2D@__inference_predict_4079"])
#loc422 = loc(fused["FusedBatchNormV3:", "block_13_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc423 = loc(fused["Conv2D:", "block_14_expand/Conv2D@__inference_predict_4079"])
#loc424 = loc(fused["FusedBatchNormV3:", "block_14_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc425 = loc(fused["Relu6:", "block_14_expand_relu/Relu6@__inference_predict_4079"])
#loc426 = loc(fused["DepthwiseConv2dNative:", "block_14_depthwise/depthwise@__inference_predict_4079"])
#loc427 = loc(fused["FusedBatchNormV3:", "block_14_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc428 = loc(fused["Relu6:", "block_14_depthwise_relu/Relu6@__inference_predict_4079"])
#loc429 = loc(fused["Conv2D:", "block_14_project/Conv2D@__inference_predict_4079"])
#loc430 = loc(fused["FusedBatchNormV3:", "block_14_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc431 = loc(fused["AddV2:", "block_14_add/add@__inference_predict_4079"])
#loc432 = loc(fused["Conv2D:", "block_15_expand/Conv2D@__inference_predict_4079"])
#loc433 = loc(fused["FusedBatchNormV3:", "block_15_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc434 = loc(fused["Relu6:", "block_15_expand_relu/Relu6@__inference_predict_4079"])
#loc435 = loc(fused["DepthwiseConv2dNative:", "block_15_depthwise/depthwise@__inference_predict_4079"])
#loc436 = loc(fused["FusedBatchNormV3:", "block_15_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc437 = loc(fused["Relu6:", "block_15_depthwise_relu/Relu6@__inference_predict_4079"])
#loc438 = loc(fused["Conv2D:", "block_15_project/Conv2D@__inference_predict_4079"])
#loc439 = loc(fused["FusedBatchNormV3:", "block_15_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc440 = loc(fused["AddV2:", "block_15_add/add@__inference_predict_4079"])
#loc441 = loc(fused["Conv2D:", "block_16_expand/Conv2D@__inference_predict_4079"])
#loc442 = loc(fused["FusedBatchNormV3:", "block_16_expand_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc443 = loc(fused["Relu6:", "block_16_expand_relu/Relu6@__inference_predict_4079"])
#loc444 = loc(fused["DepthwiseConv2dNative:", "block_16_depthwise/depthwise@__inference_predict_4079"])
#loc445 = loc(fused["FusedBatchNormV3:", "block_16_depthwise_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc446 = loc(fused["Relu6:", "block_16_depthwise_relu/Relu6@__inference_predict_4079"])
#loc447 = loc(fused["Conv2D:", "block_16_project/Conv2D@__inference_predict_4079"])
#loc448 = loc(fused["FusedBatchNormV3:", "block_16_project_BN/FusedBatchNormV3@__inference_predict_4079"])
#loc449 = loc(fused["Conv2D:", "Conv_1/Conv2D@__inference_predict_4079"])
#loc450 = loc(fused["FusedBatchNormV3:", "Conv_1_bn/FusedBatchNormV3@__inference_predict_4079"])
#loc451 = loc(fused["Relu6:", "out_relu/Relu6@__inference_predict_4079"])
#loc452 = loc(fused["Const:", "global_average_pooling2d/Mean/reduction_indices@__inference_predict_4079"])
#loc453 = loc(fused["Mean:", "global_average_pooling2d/Mean@__inference_predict_4079"])
#loc454 = loc(fused["ReadVariableOp:", "predictions/BiasAdd/ReadVariableOp@__inference_predict_4079"])
#loc455 = loc(fused["ReadVariableOp:", "predictions/MatMul/ReadVariableOp@__inference_predict_4079"])
#loc456 = loc(fused["NoOp:", "NoOp@__inference_predict_4079"])
#loc457 = loc(fused["MatMul:", "predictions/MatMul@__inference_predict_4079"])
#loc458 = loc(fused["BiasAdd:", "predictions/BiasAdd@__inference_predict_4079"])
#loc459 = loc(fused["Softmax:", "predictions/Softmax@__inference_predict_4079"])
#loc460 = loc(fused["Identity:", "Identity@__inference_predict_4079"])
#loc461 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_Conv1_layer_call_and_return_conditional_losses_18326"])
#loc462 = loc(fused["NoOp:", "NoOp@__inference_Conv1_layer_call_and_return_conditional_losses_18326"])
#loc463 = loc(fused["Conv2D:", "Conv2D@__inference_Conv1_layer_call_and_return_conditional_losses_18326"])
#loc464 = loc(fused["Identity:", "Identity@__inference_Conv1_layer_call_and_return_conditional_losses_18326"])
#loc465 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_Conv1_layer_call_and_return_conditional_losses_9002"])
#loc466 = loc(fused["NoOp:", "NoOp@__inference_Conv1_layer_call_and_return_conditional_losses_9002"])
#loc467 = loc(fused["Conv2D:", "Conv2D@__inference_Conv1_layer_call_and_return_conditional_losses_9002"])
#loc468 = loc(fused["Identity:", "Identity@__inference_Conv1_layer_call_and_return_conditional_losses_9002"])
#loc469 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_Conv1_layer_call_fn_18319"])
#loc470 = loc(fused["NoOp:", "NoOp@__inference_Conv1_layer_call_fn_18319"])
#loc471 = loc(fused["Identity:", "Identity@__inference_Conv1_layer_call_fn_18319"])
#loc472 = loc(fused["Relu6:", "Relu6@__inference_Conv1_relu_layer_call_and_return_conditional_losses_18398"])
#loc473 = loc(fused["Identity:", "Identity@__inference_Conv1_relu_layer_call_and_return_conditional_losses_18398"])
#loc474 = loc(fused["Relu6:", "Relu6@__inference_Conv1_relu_layer_call_and_return_conditional_losses_9020"])
#loc475 = loc(fused["Identity:", "Identity@__inference_Conv1_relu_layer_call_and_return_conditional_losses_9020"])
#loc476 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_Conv1_relu_layer_call_fn_18393"])
#loc477 = loc(fused["Identity:", "Identity@__inference_Conv1_relu_layer_call_fn_18393"])
#loc478 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22784"])
#loc479 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22784"])
#loc480 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22784"])
#loc481 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22784"])
#loc482 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22784"])
#loc483 = loc(fused["NoOp:", "NoOp@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22784"])
#loc484 = loc(fused["Identity:", "Identity@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22784"])
#loc485 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22802"])
#loc486 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22802"])
#loc487 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22802"])
#loc488 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22802"])
#loc489 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22802"])
#loc490 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22802"])
#loc491 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22802"])
#loc492 = loc(fused["NoOp:", "NoOp@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22802"])
#loc493 = loc(fused["Identity:", "Identity@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_22802"])
#loc494 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8933"])
#loc495 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8933"])
#loc496 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8933"])
#loc497 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8933"])
#loc498 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8933"])
#loc499 = loc(fused["NoOp:", "NoOp@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8933"])
#loc500 = loc(fused["Identity:", "Identity@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8933"])
#loc501 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8964"])
#loc502 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8964"])
#loc503 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8964"])
#loc504 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8964"])
#loc505 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8964"])
#loc506 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8964"])
#loc507 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8964"])
#loc508 = loc(fused["NoOp:", "NoOp@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8964"])
#loc509 = loc(fused["Identity:", "Identity@__inference_Conv_1_bn_layer_call_and_return_conditional_losses_8964"])
#loc510 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_Conv_1_bn_layer_call_fn_22753"])
#loc511 = loc(fused["NoOp:", "NoOp@__inference_Conv_1_bn_layer_call_fn_22753"])
#loc512 = loc(fused["Identity:", "Identity@__inference_Conv_1_bn_layer_call_fn_22753"])
#loc513 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_Conv_1_bn_layer_call_fn_22766"])
#loc514 = loc(fused["NoOp:", "NoOp@__inference_Conv_1_bn_layer_call_fn_22766"])
#loc515 = loc(fused["Identity:", "Identity@__inference_Conv_1_bn_layer_call_fn_22766"])
#loc516 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_Conv_1_layer_call_and_return_conditional_losses_10378"])
#loc517 = loc(fused["NoOp:", "NoOp@__inference_Conv_1_layer_call_and_return_conditional_losses_10378"])
#loc518 = loc(fused["Conv2D:", "Conv2D@__inference_Conv_1_layer_call_and_return_conditional_losses_10378"])
#loc519 = loc(fused["Identity:", "Identity@__inference_Conv_1_layer_call_and_return_conditional_losses_10378"])
#loc520 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_Conv_1_layer_call_and_return_conditional_losses_22740"])
#loc521 = loc(fused["NoOp:", "NoOp@__inference_Conv_1_layer_call_and_return_conditional_losses_22740"])
#loc522 = loc(fused["Conv2D:", "Conv2D@__inference_Conv_1_layer_call_and_return_conditional_losses_22740"])
#loc523 = loc(fused["Identity:", "Identity@__inference_Conv_1_layer_call_and_return_conditional_losses_22740"])
#loc524 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_Conv_1_layer_call_fn_22733"])
#loc525 = loc(fused["NoOp:", "NoOp@__inference_Conv_1_layer_call_fn_22733"])
#loc526 = loc(fused["Identity:", "Identity@__inference_Conv_1_layer_call_fn_22733"])
#loc527 = loc(fused["Const:", "mobilenetv2_1.00_224/block_10_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc528 = loc(fused["Const:", "mobilenetv2_1.00_224/block_10_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc529 = loc(fused["Const:", "mobilenetv2_1.00_224/block_11_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc530 = loc(fused["Const:", "mobilenetv2_1.00_224/block_11_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc531 = loc(fused["Const:", "mobilenetv2_1.00_224/block_12_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc532 = loc(fused["Const:", "mobilenetv2_1.00_224/block_12_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc533 = loc(fused["Const:", "mobilenetv2_1.00_224/block_13_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc534 = loc(fused["Const:", "mobilenetv2_1.00_224/block_13_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc535 = loc(fused["Const:", "mobilenetv2_1.00_224/block_13_pad/Pad/paddings@__inference__wrapped_model_5595"])
#loc536 = loc(fused["Const:", "mobilenetv2_1.00_224/block_14_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc537 = loc(fused["Const:", "mobilenetv2_1.00_224/block_14_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc538 = loc(fused["Const:", "mobilenetv2_1.00_224/block_15_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc539 = loc(fused["Const:", "mobilenetv2_1.00_224/block_15_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc540 = loc(fused["Const:", "mobilenetv2_1.00_224/block_16_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc541 = loc(fused["Const:", "mobilenetv2_1.00_224/block_16_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc542 = loc(fused["Const:", "mobilenetv2_1.00_224/block_1_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc543 = loc(fused["Const:", "mobilenetv2_1.00_224/block_1_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc544 = loc(fused["Const:", "mobilenetv2_1.00_224/block_1_pad/Pad/paddings@__inference__wrapped_model_5595"])
#loc545 = loc(fused["Const:", "mobilenetv2_1.00_224/block_2_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc546 = loc(fused["Const:", "mobilenetv2_1.00_224/block_2_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc547 = loc(fused["Const:", "mobilenetv2_1.00_224/block_3_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc548 = loc(fused["Const:", "mobilenetv2_1.00_224/block_3_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc549 = loc(fused["Const:", "mobilenetv2_1.00_224/block_3_pad/Pad/paddings@__inference__wrapped_model_5595"])
#loc550 = loc(fused["Const:", "mobilenetv2_1.00_224/block_4_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc551 = loc(fused["Const:", "mobilenetv2_1.00_224/block_4_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc552 = loc(fused["Const:", "mobilenetv2_1.00_224/block_5_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc553 = loc(fused["Const:", "mobilenetv2_1.00_224/block_5_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc554 = loc(fused["Const:", "mobilenetv2_1.00_224/block_6_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc555 = loc(fused["Const:", "mobilenetv2_1.00_224/block_6_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc556 = loc(fused["Const:", "mobilenetv2_1.00_224/block_6_pad/Pad/paddings@__inference__wrapped_model_5595"])
#loc557 = loc(fused["Const:", "mobilenetv2_1.00_224/block_7_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc558 = loc(fused["Const:", "mobilenetv2_1.00_224/block_7_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc559 = loc(fused["Const:", "mobilenetv2_1.00_224/block_8_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc560 = loc(fused["Const:", "mobilenetv2_1.00_224/block_8_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc561 = loc(fused["Const:", "mobilenetv2_1.00_224/block_9_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc562 = loc(fused["Const:", "mobilenetv2_1.00_224/block_9_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc563 = loc(fused["Const:", "mobilenetv2_1.00_224/expanded_conv_depthwise/depthwise/Shape@__inference__wrapped_model_5595"])
#loc564 = loc(fused["Const:", "mobilenetv2_1.00_224/expanded_conv_depthwise/depthwise/dilation_rate@__inference__wrapped_model_5595"])
#loc565 = loc(fused["Const:", "mobilenetv2_1.00_224/global_average_pooling2d/Mean/reduction_indices@__inference__wrapped_model_5595"])
#loc566 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc567 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc568 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc569 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc570 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc571 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc572 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc573 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc574 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc575 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc576 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc577 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc578 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc579 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc580 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_10_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc581 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc582 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc583 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc584 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc585 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc586 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc587 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc588 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc589 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc590 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc591 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc592 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc593 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc594 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc595 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_11_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc596 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc597 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc598 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc599 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc600 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc601 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc602 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc603 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc604 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc605 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc606 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc607 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc608 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc609 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc610 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_12_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc611 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc612 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc613 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc614 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc615 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc616 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc617 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc618 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc619 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc620 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc621 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc622 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc623 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc624 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc625 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_13_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc626 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc627 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc628 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc629 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc630 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc631 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc632 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc633 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc634 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc635 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc636 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc637 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc638 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc639 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc640 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_14_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc641 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc642 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc643 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc644 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc645 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc646 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc647 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc648 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc649 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc650 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc651 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc652 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc653 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc654 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc655 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_15_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc656 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc657 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc658 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc659 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc660 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc661 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc662 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc663 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc664 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc665 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc666 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc667 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc668 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc669 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc670 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_16_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc671 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc672 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc673 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc674 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc675 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc676 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc677 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc678 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc679 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc680 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc681 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc682 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc683 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc684 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc685 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_1_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc686 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc687 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc688 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc689 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc690 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc691 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc692 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc693 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc694 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc695 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc696 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc697 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc698 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc699 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc700 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_2_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc701 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc702 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc703 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc704 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc705 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc706 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc707 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc708 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc709 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc710 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc711 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc712 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc713 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc714 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc715 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_3_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc716 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc717 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc718 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc719 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc720 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc721 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc722 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc723 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc724 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc725 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc726 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc727 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc728 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc729 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc730 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_4_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc731 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc732 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc733 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc734 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc735 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc736 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc737 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc738 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc739 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc740 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc741 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc742 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc743 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc744 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc745 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_5_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc746 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc747 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc748 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc749 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc750 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc751 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc752 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc753 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc754 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc755 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc756 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc757 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc758 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc759 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc760 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_6_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc761 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc762 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc763 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc764 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc765 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc766 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc767 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc768 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc769 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc770 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc771 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc772 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc773 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc774 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc775 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_7_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc776 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc777 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc778 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc779 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc780 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc781 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc782 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc783 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc784 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc785 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc786 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc787 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc788 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc789 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc790 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_8_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc791 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc792 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc793 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc794 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc795 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc796 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc797 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc798 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_expand_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc799 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_expand_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc800 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_expand/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc801 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc802 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc803 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc804 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc805 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/block_9_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc806 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/bn_Conv1/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc807 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/bn_Conv1/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc808 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/bn_Conv1/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc809 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/bn_Conv1/ReadVariableOp@__inference__wrapped_model_5595"])
#loc810 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/Conv1/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc811 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/Conv1/Conv2D@__inference__wrapped_model_5595"])
#loc812 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/bn_Conv1/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc813 = loc(fused["Relu6:", "mobilenetv2_1.00_224/Conv1_relu/Relu6@__inference__wrapped_model_5595"])
#loc814 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/Conv_1_bn/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc815 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/Conv_1_bn/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc816 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/Conv_1_bn/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc817 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/Conv_1_bn/ReadVariableOp@__inference__wrapped_model_5595"])
#loc818 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/Conv_1/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc819 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/expanded_conv_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc820 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/expanded_conv_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc821 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/expanded_conv_depthwise_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc822 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/expanded_conv_depthwise_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc823 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/expanded_conv_depthwise/depthwise/ReadVariableOp@__inference__wrapped_model_5595"])
#loc824 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/expanded_conv_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc825 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/expanded_conv_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc826 = loc(fused["Relu6:", "mobilenetv2_1.00_224/expanded_conv_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc827 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/expanded_conv_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc828 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/expanded_conv_project_BN/FusedBatchNormV3/ReadVariableOp@__inference__wrapped_model_5595"])
#loc829 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/expanded_conv_project_BN/ReadVariableOp_1@__inference__wrapped_model_5595"])
#loc830 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/expanded_conv_project_BN/ReadVariableOp@__inference__wrapped_model_5595"])
#loc831 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/expanded_conv_project/Conv2D/ReadVariableOp@__inference__wrapped_model_5595"])
#loc832 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/expanded_conv_project/Conv2D@__inference__wrapped_model_5595"])
#loc833 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/expanded_conv_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc834 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_1_expand/Conv2D@__inference__wrapped_model_5595"])
#loc835 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_1_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc836 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_1_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc837 = loc(fused["Pad:", "mobilenetv2_1.00_224/block_1_pad/Pad@__inference__wrapped_model_5595"])
#loc838 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_1_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc839 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_1_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc840 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_1_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc841 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_1_project/Conv2D@__inference__wrapped_model_5595"])
#loc842 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_1_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc843 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_2_expand/Conv2D@__inference__wrapped_model_5595"])
#loc844 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_2_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc845 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_2_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc846 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_2_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc847 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_2_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc848 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_2_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc849 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_2_project/Conv2D@__inference__wrapped_model_5595"])
#loc850 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_2_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc851 = loc(fused["AddV2:", "mobilenetv2_1.00_224/block_2_add/add@__inference__wrapped_model_5595"])
#loc852 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_3_expand/Conv2D@__inference__wrapped_model_5595"])
#loc853 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_3_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc854 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_3_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc855 = loc(fused["Pad:", "mobilenetv2_1.00_224/block_3_pad/Pad@__inference__wrapped_model_5595"])
#loc856 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_3_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc857 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_3_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc858 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_3_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc859 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_3_project/Conv2D@__inference__wrapped_model_5595"])
#loc860 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_3_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc861 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_4_expand/Conv2D@__inference__wrapped_model_5595"])
#loc862 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_4_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc863 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_4_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc864 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_4_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc865 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_4_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc866 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_4_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc867 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_4_project/Conv2D@__inference__wrapped_model_5595"])
#loc868 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_4_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc869 = loc(fused["AddV2:", "mobilenetv2_1.00_224/block_4_add/add@__inference__wrapped_model_5595"])
#loc870 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_5_expand/Conv2D@__inference__wrapped_model_5595"])
#loc871 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_5_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc872 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_5_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc873 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_5_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc874 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_5_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc875 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_5_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc876 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_5_project/Conv2D@__inference__wrapped_model_5595"])
#loc877 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_5_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc878 = loc(fused["AddV2:", "mobilenetv2_1.00_224/block_5_add/add@__inference__wrapped_model_5595"])
#loc879 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_6_expand/Conv2D@__inference__wrapped_model_5595"])
#loc880 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_6_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc881 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_6_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc882 = loc(fused["Pad:", "mobilenetv2_1.00_224/block_6_pad/Pad@__inference__wrapped_model_5595"])
#loc883 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_6_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc884 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_6_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc885 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_6_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc886 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_6_project/Conv2D@__inference__wrapped_model_5595"])
#loc887 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_6_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc888 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_7_expand/Conv2D@__inference__wrapped_model_5595"])
#loc889 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_7_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc890 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_7_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc891 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_7_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc892 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_7_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc893 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_7_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc894 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_7_project/Conv2D@__inference__wrapped_model_5595"])
#loc895 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_7_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc896 = loc(fused["AddV2:", "mobilenetv2_1.00_224/block_7_add/add@__inference__wrapped_model_5595"])
#loc897 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_8_expand/Conv2D@__inference__wrapped_model_5595"])
#loc898 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_8_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc899 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_8_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc900 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_8_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc901 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_8_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc902 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_8_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc903 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_8_project/Conv2D@__inference__wrapped_model_5595"])
#loc904 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_8_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc905 = loc(fused["AddV2:", "mobilenetv2_1.00_224/block_8_add/add@__inference__wrapped_model_5595"])
#loc906 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_9_expand/Conv2D@__inference__wrapped_model_5595"])
#loc907 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_9_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc908 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_9_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc909 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_9_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc910 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_9_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc911 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_9_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc912 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_9_project/Conv2D@__inference__wrapped_model_5595"])
#loc913 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_9_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc914 = loc(fused["AddV2:", "mobilenetv2_1.00_224/block_9_add/add@__inference__wrapped_model_5595"])
#loc915 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_10_expand/Conv2D@__inference__wrapped_model_5595"])
#loc916 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_10_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc917 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_10_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc918 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_10_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc919 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_10_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc920 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_10_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc921 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_10_project/Conv2D@__inference__wrapped_model_5595"])
#loc922 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_10_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc923 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_11_expand/Conv2D@__inference__wrapped_model_5595"])
#loc924 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_11_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc925 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_11_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc926 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_11_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc927 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_11_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc928 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_11_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc929 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_11_project/Conv2D@__inference__wrapped_model_5595"])
#loc930 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_11_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc931 = loc(fused["AddV2:", "mobilenetv2_1.00_224/block_11_add/add@__inference__wrapped_model_5595"])
#loc932 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_12_expand/Conv2D@__inference__wrapped_model_5595"])
#loc933 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_12_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc934 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_12_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc935 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_12_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc936 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_12_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc937 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_12_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc938 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_12_project/Conv2D@__inference__wrapped_model_5595"])
#loc939 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_12_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc940 = loc(fused["AddV2:", "mobilenetv2_1.00_224/block_12_add/add@__inference__wrapped_model_5595"])
#loc941 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_13_expand/Conv2D@__inference__wrapped_model_5595"])
#loc942 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_13_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc943 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_13_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc944 = loc(fused["Pad:", "mobilenetv2_1.00_224/block_13_pad/Pad@__inference__wrapped_model_5595"])
#loc945 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_13_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc946 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_13_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc947 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_13_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc948 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_13_project/Conv2D@__inference__wrapped_model_5595"])
#loc949 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_13_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc950 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_14_expand/Conv2D@__inference__wrapped_model_5595"])
#loc951 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_14_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc952 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_14_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc953 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_14_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc954 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_14_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc955 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_14_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc956 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_14_project/Conv2D@__inference__wrapped_model_5595"])
#loc957 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_14_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc958 = loc(fused["AddV2:", "mobilenetv2_1.00_224/block_14_add/add@__inference__wrapped_model_5595"])
#loc959 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_15_expand/Conv2D@__inference__wrapped_model_5595"])
#loc960 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_15_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc961 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_15_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc962 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_15_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc963 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_15_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc964 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_15_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc965 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_15_project/Conv2D@__inference__wrapped_model_5595"])
#loc966 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_15_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc967 = loc(fused["AddV2:", "mobilenetv2_1.00_224/block_15_add/add@__inference__wrapped_model_5595"])
#loc968 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_16_expand/Conv2D@__inference__wrapped_model_5595"])
#loc969 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_16_expand_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc970 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_16_expand_relu/Relu6@__inference__wrapped_model_5595"])
#loc971 = loc(fused["DepthwiseConv2dNative:", "mobilenetv2_1.00_224/block_16_depthwise/depthwise@__inference__wrapped_model_5595"])
#loc972 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_16_depthwise_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc973 = loc(fused["Relu6:", "mobilenetv2_1.00_224/block_16_depthwise_relu/Relu6@__inference__wrapped_model_5595"])
#loc974 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/block_16_project/Conv2D@__inference__wrapped_model_5595"])
#loc975 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/block_16_project_BN/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc976 = loc(fused["Conv2D:", "mobilenetv2_1.00_224/Conv_1/Conv2D@__inference__wrapped_model_5595"])
#loc977 = loc(fused["FusedBatchNormV3:", "mobilenetv2_1.00_224/Conv_1_bn/FusedBatchNormV3@__inference__wrapped_model_5595"])
#loc978 = loc(fused["Relu6:", "mobilenetv2_1.00_224/out_relu/Relu6@__inference__wrapped_model_5595"])
#loc979 = loc(fused["Mean:", "mobilenetv2_1.00_224/global_average_pooling2d/Mean@__inference__wrapped_model_5595"])
#loc980 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/predictions/BiasAdd/ReadVariableOp@__inference__wrapped_model_5595"])
#loc981 = loc(fused["ReadVariableOp:", "mobilenetv2_1.00_224/predictions/MatMul/ReadVariableOp@__inference__wrapped_model_5595"])
#loc982 = loc(fused["NoOp:", "NoOp@__inference__wrapped_model_5595"])
#loc983 = loc(fused["MatMul:", "mobilenetv2_1.00_224/predictions/MatMul@__inference__wrapped_model_5595"])
#loc984 = loc(fused["BiasAdd:", "mobilenetv2_1.00_224/predictions/BiasAdd@__inference__wrapped_model_5595"])
#loc985 = loc(fused["Softmax:", "mobilenetv2_1.00_224/predictions/Softmax@__inference__wrapped_model_5595"])
#loc986 = loc(fused["Identity:", "Identity@__inference__wrapped_model_5595"])
#loc987 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21063"])
#loc988 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21063"])
#loc989 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21063"])
#loc990 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21063"])
#loc991 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21063"])
#loc992 = loc(fused["NoOp:", "NoOp@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21063"])
#loc993 = loc(fused["Identity:", "Identity@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21063"])
#loc994 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21081"])
#loc995 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21081"])
#loc996 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21081"])
#loc997 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21081"])
#loc998 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21081"])
#loc999 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21081"])
#loc1000 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21081"])
#loc1001 = loc(fused["NoOp:", "NoOp@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21081"])
#loc1002 = loc(fused["Identity:", "Identity@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_21081"])
#loc1003 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7640"])
#loc1004 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7640"])
#loc1005 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7640"])
#loc1006 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7640"])
#loc1007 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7640"])
#loc1008 = loc(fused["NoOp:", "NoOp@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7640"])
#loc1009 = loc(fused["Identity:", "Identity@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7640"])
#loc1010 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7671"])
#loc1011 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7671"])
#loc1012 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7671"])
#loc1013 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7671"])
#loc1014 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7671"])
#loc1015 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7671"])
#loc1016 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7671"])
#loc1017 = loc(fused["NoOp:", "NoOp@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7671"])
#loc1018 = loc(fused["Identity:", "Identity@__inference_block_10_depthwise_BN_layer_call_and_return_conditional_losses_7671"])
#loc1019 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_10_depthwise_BN_layer_call_fn_21032"])
#loc1020 = loc(fused["NoOp:", "NoOp@__inference_block_10_depthwise_BN_layer_call_fn_21032"])
#loc1021 = loc(fused["Identity:", "Identity@__inference_block_10_depthwise_BN_layer_call_fn_21032"])
#loc1022 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_10_depthwise_BN_layer_call_fn_21045"])
#loc1023 = loc(fused["NoOp:", "NoOp@__inference_block_10_depthwise_BN_layer_call_fn_21045"])
#loc1024 = loc(fused["Identity:", "Identity@__inference_block_10_depthwise_BN_layer_call_fn_21045"])
#loc1025 = loc(fused["Const:", "depthwise/Shape@__inference_block_10_depthwise_layer_call_and_return_conditional_losses_21019"])
#loc1026 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_10_depthwise_layer_call_and_return_conditional_losses_21019"])
#loc1027 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_10_depthwise_layer_call_and_return_conditional_losses_21019"])
#loc1028 = loc(fused["NoOp:", "NoOp@__inference_block_10_depthwise_layer_call_and_return_conditional_losses_21019"])
#loc1029 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_10_depthwise_layer_call_and_return_conditional_losses_21019"])
#loc1030 = loc(fused["Identity:", "Identity@__inference_block_10_depthwise_layer_call_and_return_conditional_losses_21019"])
#loc1031 = loc(fused["Const:", "depthwise/Shape@__inference_block_10_depthwise_layer_call_and_return_conditional_losses_9842"])
#loc1032 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_10_depthwise_layer_call_and_return_conditional_losses_9842"])
#loc1033 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_10_depthwise_layer_call_and_return_conditional_losses_9842"])
#loc1034 = loc(fused["NoOp:", "NoOp@__inference_block_10_depthwise_layer_call_and_return_conditional_losses_9842"])
#loc1035 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_10_depthwise_layer_call_and_return_conditional_losses_9842"])
#loc1036 = loc(fused["Identity:", "Identity@__inference_block_10_depthwise_layer_call_and_return_conditional_losses_9842"])
#loc1037 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_10_depthwise_layer_call_fn_21010"])
#loc1038 = loc(fused["NoOp:", "NoOp@__inference_block_10_depthwise_layer_call_fn_21010"])
#loc1039 = loc(fused["Identity:", "Identity@__inference_block_10_depthwise_layer_call_fn_21010"])
#loc1040 = loc(fused["Relu6:", "Relu6@__inference_block_10_depthwise_relu_layer_call_and_return_conditional_losses_21091"])
#loc1041 = loc(fused["Identity:", "Identity@__inference_block_10_depthwise_relu_layer_call_and_return_conditional_losses_21091"])
#loc1042 = loc(fused["Relu6:", "Relu6@__inference_block_10_depthwise_relu_layer_call_and_return_conditional_losses_9860"])
#loc1043 = loc(fused["Identity:", "Identity@__inference_block_10_depthwise_relu_layer_call_and_return_conditional_losses_9860"])
#loc1044 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_10_depthwise_relu_layer_call_fn_21086"])
#loc1045 = loc(fused["Identity:", "Identity@__inference_block_10_depthwise_relu_layer_call_fn_21086"])
#loc1046 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20975"])
#loc1047 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20975"])
#loc1048 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20975"])
#loc1049 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20975"])
#loc1050 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20975"])
#loc1051 = loc(fused["NoOp:", "NoOp@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20975"])
#loc1052 = loc(fused["Identity:", "Identity@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20975"])
#loc1053 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20993"])
#loc1054 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20993"])
#loc1055 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20993"])
#loc1056 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20993"])
#loc1057 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20993"])
#loc1058 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20993"])
#loc1059 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20993"])
#loc1060 = loc(fused["NoOp:", "NoOp@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20993"])
#loc1061 = loc(fused["Identity:", "Identity@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_20993"])
#loc1062 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7576"])
#loc1063 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7576"])
#loc1064 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7576"])
#loc1065 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7576"])
#loc1066 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7576"])
#loc1067 = loc(fused["NoOp:", "NoOp@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7576"])
#loc1068 = loc(fused["Identity:", "Identity@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7576"])
#loc1069 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7607"])
#loc1070 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7607"])
#loc1071 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7607"])
#loc1072 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7607"])
#loc1073 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7607"])
#loc1074 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7607"])
#loc1075 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7607"])
#loc1076 = loc(fused["NoOp:", "NoOp@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7607"])
#loc1077 = loc(fused["Identity:", "Identity@__inference_block_10_expand_BN_layer_call_and_return_conditional_losses_7607"])
#loc1078 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_10_expand_BN_layer_call_fn_20944"])
#loc1079 = loc(fused["NoOp:", "NoOp@__inference_block_10_expand_BN_layer_call_fn_20944"])
#loc1080 = loc(fused["Identity:", "Identity@__inference_block_10_expand_BN_layer_call_fn_20944"])
#loc1081 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_10_expand_BN_layer_call_fn_20957"])
#loc1082 = loc(fused["NoOp:", "NoOp@__inference_block_10_expand_BN_layer_call_fn_20957"])
#loc1083 = loc(fused["Identity:", "Identity@__inference_block_10_expand_BN_layer_call_fn_20957"])
#loc1084 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_10_expand_layer_call_and_return_conditional_losses_20931"])
#loc1085 = loc(fused["NoOp:", "NoOp@__inference_block_10_expand_layer_call_and_return_conditional_losses_20931"])
#loc1086 = loc(fused["Conv2D:", "Conv2D@__inference_block_10_expand_layer_call_and_return_conditional_losses_20931"])
#loc1087 = loc(fused["Identity:", "Identity@__inference_block_10_expand_layer_call_and_return_conditional_losses_20931"])
#loc1088 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_10_expand_layer_call_and_return_conditional_losses_9813"])
#loc1089 = loc(fused["NoOp:", "NoOp@__inference_block_10_expand_layer_call_and_return_conditional_losses_9813"])
#loc1090 = loc(fused["Conv2D:", "Conv2D@__inference_block_10_expand_layer_call_and_return_conditional_losses_9813"])
#loc1091 = loc(fused["Identity:", "Identity@__inference_block_10_expand_layer_call_and_return_conditional_losses_9813"])
#loc1092 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_10_expand_layer_call_fn_20924"])
#loc1093 = loc(fused["NoOp:", "NoOp@__inference_block_10_expand_layer_call_fn_20924"])
#loc1094 = loc(fused["Identity:", "Identity@__inference_block_10_expand_layer_call_fn_20924"])
#loc1095 = loc(fused["Relu6:", "Relu6@__inference_block_10_expand_relu_layer_call_and_return_conditional_losses_21003"])
#loc1096 = loc(fused["Identity:", "Identity@__inference_block_10_expand_relu_layer_call_and_return_conditional_losses_21003"])
#loc1097 = loc(fused["Relu6:", "Relu6@__inference_block_10_expand_relu_layer_call_and_return_conditional_losses_9831"])
#loc1098 = loc(fused["Identity:", "Identity@__inference_block_10_expand_relu_layer_call_and_return_conditional_losses_9831"])
#loc1099 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_10_expand_relu_layer_call_fn_20998"])
#loc1100 = loc(fused["Identity:", "Identity@__inference_block_10_expand_relu_layer_call_fn_20998"])
#loc1101 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21149"])
#loc1102 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21149"])
#loc1103 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21149"])
#loc1104 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21149"])
#loc1105 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21149"])
#loc1106 = loc(fused["NoOp:", "NoOp@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21149"])
#loc1107 = loc(fused["Identity:", "Identity@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21149"])
#loc1108 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21167"])
#loc1109 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21167"])
#loc1110 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21167"])
#loc1111 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21167"])
#loc1112 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21167"])
#loc1113 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21167"])
#loc1114 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21167"])
#loc1115 = loc(fused["NoOp:", "NoOp@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21167"])
#loc1116 = loc(fused["Identity:", "Identity@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_21167"])
#loc1117 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7704"])
#loc1118 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7704"])
#loc1119 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7704"])
#loc1120 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7704"])
#loc1121 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7704"])
#loc1122 = loc(fused["NoOp:", "NoOp@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7704"])
#loc1123 = loc(fused["Identity:", "Identity@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7704"])
#loc1124 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7735"])
#loc1125 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7735"])
#loc1126 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7735"])
#loc1127 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7735"])
#loc1128 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7735"])
#loc1129 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7735"])
#loc1130 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7735"])
#loc1131 = loc(fused["NoOp:", "NoOp@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7735"])
#loc1132 = loc(fused["Identity:", "Identity@__inference_block_10_project_BN_layer_call_and_return_conditional_losses_7735"])
#loc1133 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_10_project_BN_layer_call_fn_21118"])
#loc1134 = loc(fused["NoOp:", "NoOp@__inference_block_10_project_BN_layer_call_fn_21118"])
#loc1135 = loc(fused["Identity:", "Identity@__inference_block_10_project_BN_layer_call_fn_21118"])
#loc1136 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_10_project_BN_layer_call_fn_21131"])
#loc1137 = loc(fused["NoOp:", "NoOp@__inference_block_10_project_BN_layer_call_fn_21131"])
#loc1138 = loc(fused["Identity:", "Identity@__inference_block_10_project_BN_layer_call_fn_21131"])
#loc1139 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_10_project_layer_call_and_return_conditional_losses_21105"])
#loc1140 = loc(fused["NoOp:", "NoOp@__inference_block_10_project_layer_call_and_return_conditional_losses_21105"])
#loc1141 = loc(fused["Conv2D:", "Conv2D@__inference_block_10_project_layer_call_and_return_conditional_losses_21105"])
#loc1142 = loc(fused["Identity:", "Identity@__inference_block_10_project_layer_call_and_return_conditional_losses_21105"])
#loc1143 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_10_project_layer_call_and_return_conditional_losses_9869"])
#loc1144 = loc(fused["NoOp:", "NoOp@__inference_block_10_project_layer_call_and_return_conditional_losses_9869"])
#loc1145 = loc(fused["Conv2D:", "Conv2D@__inference_block_10_project_layer_call_and_return_conditional_losses_9869"])
#loc1146 = loc(fused["Identity:", "Identity@__inference_block_10_project_layer_call_and_return_conditional_losses_9869"])
#loc1147 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_10_project_layer_call_fn_21098"])
#loc1148 = loc(fused["NoOp:", "NoOp@__inference_block_10_project_layer_call_fn_21098"])
#loc1149 = loc(fused["Identity:", "Identity@__inference_block_10_project_layer_call_fn_21098"])
#loc1150 = loc(fused["AddV2:", "add@__inference_block_11_add_layer_call_and_return_conditional_losses_21429"])
#loc1151 = loc(fused["Identity:", "Identity@__inference_block_11_add_layer_call_and_return_conditional_losses_21429"])
#loc1152 = loc(fused["AddV2:", "add@__inference_block_11_add_layer_call_and_return_conditional_losses_9964"])
#loc1153 = loc(fused["Identity:", "Identity@__inference_block_11_add_layer_call_and_return_conditional_losses_9964"])
#loc1154 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_11_add_layer_call_fn_21423"])
#loc1155 = loc(fused["Identity:", "Identity@__inference_block_11_add_layer_call_fn_21423"])
#loc1156 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21313"])
#loc1157 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21313"])
#loc1158 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21313"])
#loc1159 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21313"])
#loc1160 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21313"])
#loc1161 = loc(fused["NoOp:", "NoOp@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21313"])
#loc1162 = loc(fused["Identity:", "Identity@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21313"])
#loc1163 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21331"])
#loc1164 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21331"])
#loc1165 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21331"])
#loc1166 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21331"])
#loc1167 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21331"])
#loc1168 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21331"])
#loc1169 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21331"])
#loc1170 = loc(fused["NoOp:", "NoOp@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21331"])
#loc1171 = loc(fused["Identity:", "Identity@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_21331"])
#loc1172 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7832"])
#loc1173 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7832"])
#loc1174 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7832"])
#loc1175 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7832"])
#loc1176 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7832"])
#loc1177 = loc(fused["NoOp:", "NoOp@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7832"])
#loc1178 = loc(fused["Identity:", "Identity@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7832"])
#loc1179 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7863"])
#loc1180 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7863"])
#loc1181 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7863"])
#loc1182 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7863"])
#loc1183 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7863"])
#loc1184 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7863"])
#loc1185 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7863"])
#loc1186 = loc(fused["NoOp:", "NoOp@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7863"])
#loc1187 = loc(fused["Identity:", "Identity@__inference_block_11_depthwise_BN_layer_call_and_return_conditional_losses_7863"])
#loc1188 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_11_depthwise_BN_layer_call_fn_21282"])
#loc1189 = loc(fused["NoOp:", "NoOp@__inference_block_11_depthwise_BN_layer_call_fn_21282"])
#loc1190 = loc(fused["Identity:", "Identity@__inference_block_11_depthwise_BN_layer_call_fn_21282"])
#loc1191 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_11_depthwise_BN_layer_call_fn_21295"])
#loc1192 = loc(fused["NoOp:", "NoOp@__inference_block_11_depthwise_BN_layer_call_fn_21295"])
#loc1193 = loc(fused["Identity:", "Identity@__inference_block_11_depthwise_BN_layer_call_fn_21295"])
#loc1194 = loc(fused["Const:", "depthwise/Shape@__inference_block_11_depthwise_layer_call_and_return_conditional_losses_21269"])
#loc1195 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_11_depthwise_layer_call_and_return_conditional_losses_21269"])
#loc1196 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_11_depthwise_layer_call_and_return_conditional_losses_21269"])
#loc1197 = loc(fused["NoOp:", "NoOp@__inference_block_11_depthwise_layer_call_and_return_conditional_losses_21269"])
#loc1198 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_11_depthwise_layer_call_and_return_conditional_losses_21269"])
#loc1199 = loc(fused["Identity:", "Identity@__inference_block_11_depthwise_layer_call_and_return_conditional_losses_21269"])
#loc1200 = loc(fused["Const:", "depthwise/Shape@__inference_block_11_depthwise_layer_call_and_return_conditional_losses_9918"])
#loc1201 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_11_depthwise_layer_call_and_return_conditional_losses_9918"])
#loc1202 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_11_depthwise_layer_call_and_return_conditional_losses_9918"])
#loc1203 = loc(fused["NoOp:", "NoOp@__inference_block_11_depthwise_layer_call_and_return_conditional_losses_9918"])
#loc1204 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_11_depthwise_layer_call_and_return_conditional_losses_9918"])
#loc1205 = loc(fused["Identity:", "Identity@__inference_block_11_depthwise_layer_call_and_return_conditional_losses_9918"])
#loc1206 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_11_depthwise_layer_call_fn_21260"])
#loc1207 = loc(fused["NoOp:", "NoOp@__inference_block_11_depthwise_layer_call_fn_21260"])
#loc1208 = loc(fused["Identity:", "Identity@__inference_block_11_depthwise_layer_call_fn_21260"])
#loc1209 = loc(fused["Relu6:", "Relu6@__inference_block_11_depthwise_relu_layer_call_and_return_conditional_losses_21341"])
#loc1210 = loc(fused["Identity:", "Identity@__inference_block_11_depthwise_relu_layer_call_and_return_conditional_losses_21341"])
#loc1211 = loc(fused["Relu6:", "Relu6@__inference_block_11_depthwise_relu_layer_call_and_return_conditional_losses_9936"])
#loc1212 = loc(fused["Identity:", "Identity@__inference_block_11_depthwise_relu_layer_call_and_return_conditional_losses_9936"])
#loc1213 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_11_depthwise_relu_layer_call_fn_21336"])
#loc1214 = loc(fused["Identity:", "Identity@__inference_block_11_depthwise_relu_layer_call_fn_21336"])
#loc1215 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21225"])
#loc1216 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21225"])
#loc1217 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21225"])
#loc1218 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21225"])
#loc1219 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21225"])
#loc1220 = loc(fused["NoOp:", "NoOp@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21225"])
#loc1221 = loc(fused["Identity:", "Identity@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21225"])
#loc1222 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21243"])
#loc1223 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21243"])
#loc1224 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21243"])
#loc1225 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21243"])
#loc1226 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21243"])
#loc1227 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21243"])
#loc1228 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21243"])
#loc1229 = loc(fused["NoOp:", "NoOp@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21243"])
#loc1230 = loc(fused["Identity:", "Identity@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_21243"])
#loc1231 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7768"])
#loc1232 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7768"])
#loc1233 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7768"])
#loc1234 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7768"])
#loc1235 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7768"])
#loc1236 = loc(fused["NoOp:", "NoOp@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7768"])
#loc1237 = loc(fused["Identity:", "Identity@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7768"])
#loc1238 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7799"])
#loc1239 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7799"])
#loc1240 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7799"])
#loc1241 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7799"])
#loc1242 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7799"])
#loc1243 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7799"])
#loc1244 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7799"])
#loc1245 = loc(fused["NoOp:", "NoOp@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7799"])
#loc1246 = loc(fused["Identity:", "Identity@__inference_block_11_expand_BN_layer_call_and_return_conditional_losses_7799"])
#loc1247 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_11_expand_BN_layer_call_fn_21194"])
#loc1248 = loc(fused["NoOp:", "NoOp@__inference_block_11_expand_BN_layer_call_fn_21194"])
#loc1249 = loc(fused["Identity:", "Identity@__inference_block_11_expand_BN_layer_call_fn_21194"])
#loc1250 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_11_expand_BN_layer_call_fn_21207"])
#loc1251 = loc(fused["NoOp:", "NoOp@__inference_block_11_expand_BN_layer_call_fn_21207"])
#loc1252 = loc(fused["Identity:", "Identity@__inference_block_11_expand_BN_layer_call_fn_21207"])
#loc1253 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_11_expand_layer_call_and_return_conditional_losses_21181"])
#loc1254 = loc(fused["NoOp:", "NoOp@__inference_block_11_expand_layer_call_and_return_conditional_losses_21181"])
#loc1255 = loc(fused["Conv2D:", "Conv2D@__inference_block_11_expand_layer_call_and_return_conditional_losses_21181"])
#loc1256 = loc(fused["Identity:", "Identity@__inference_block_11_expand_layer_call_and_return_conditional_losses_21181"])
#loc1257 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_11_expand_layer_call_and_return_conditional_losses_9889"])
#loc1258 = loc(fused["NoOp:", "NoOp@__inference_block_11_expand_layer_call_and_return_conditional_losses_9889"])
#loc1259 = loc(fused["Conv2D:", "Conv2D@__inference_block_11_expand_layer_call_and_return_conditional_losses_9889"])
#loc1260 = loc(fused["Identity:", "Identity@__inference_block_11_expand_layer_call_and_return_conditional_losses_9889"])
#loc1261 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_11_expand_layer_call_fn_21174"])
#loc1262 = loc(fused["NoOp:", "NoOp@__inference_block_11_expand_layer_call_fn_21174"])
#loc1263 = loc(fused["Identity:", "Identity@__inference_block_11_expand_layer_call_fn_21174"])
#loc1264 = loc(fused["Relu6:", "Relu6@__inference_block_11_expand_relu_layer_call_and_return_conditional_losses_21253"])
#loc1265 = loc(fused["Identity:", "Identity@__inference_block_11_expand_relu_layer_call_and_return_conditional_losses_21253"])
#loc1266 = loc(fused["Relu6:", "Relu6@__inference_block_11_expand_relu_layer_call_and_return_conditional_losses_9907"])
#loc1267 = loc(fused["Identity:", "Identity@__inference_block_11_expand_relu_layer_call_and_return_conditional_losses_9907"])
#loc1268 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_11_expand_relu_layer_call_fn_21248"])
#loc1269 = loc(fused["Identity:", "Identity@__inference_block_11_expand_relu_layer_call_fn_21248"])
#loc1270 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21399"])
#loc1271 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21399"])
#loc1272 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21399"])
#loc1273 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21399"])
#loc1274 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21399"])
#loc1275 = loc(fused["NoOp:", "NoOp@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21399"])
#loc1276 = loc(fused["Identity:", "Identity@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21399"])
#loc1277 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21417"])
#loc1278 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21417"])
#loc1279 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21417"])
#loc1280 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21417"])
#loc1281 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21417"])
#loc1282 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21417"])
#loc1283 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21417"])
#loc1284 = loc(fused["NoOp:", "NoOp@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21417"])
#loc1285 = loc(fused["Identity:", "Identity@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_21417"])
#loc1286 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7896"])
#loc1287 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7896"])
#loc1288 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7896"])
#loc1289 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7896"])
#loc1290 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7896"])
#loc1291 = loc(fused["NoOp:", "NoOp@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7896"])
#loc1292 = loc(fused["Identity:", "Identity@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7896"])
#loc1293 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7927"])
#loc1294 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7927"])
#loc1295 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7927"])
#loc1296 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7927"])
#loc1297 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7927"])
#loc1298 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7927"])
#loc1299 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7927"])
#loc1300 = loc(fused["NoOp:", "NoOp@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7927"])
#loc1301 = loc(fused["Identity:", "Identity@__inference_block_11_project_BN_layer_call_and_return_conditional_losses_7927"])
#loc1302 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_11_project_BN_layer_call_fn_21368"])
#loc1303 = loc(fused["NoOp:", "NoOp@__inference_block_11_project_BN_layer_call_fn_21368"])
#loc1304 = loc(fused["Identity:", "Identity@__inference_block_11_project_BN_layer_call_fn_21368"])
#loc1305 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_11_project_BN_layer_call_fn_21381"])
#loc1306 = loc(fused["NoOp:", "NoOp@__inference_block_11_project_BN_layer_call_fn_21381"])
#loc1307 = loc(fused["Identity:", "Identity@__inference_block_11_project_BN_layer_call_fn_21381"])
#loc1308 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_11_project_layer_call_and_return_conditional_losses_21355"])
#loc1309 = loc(fused["NoOp:", "NoOp@__inference_block_11_project_layer_call_and_return_conditional_losses_21355"])
#loc1310 = loc(fused["Conv2D:", "Conv2D@__inference_block_11_project_layer_call_and_return_conditional_losses_21355"])
#loc1311 = loc(fused["Identity:", "Identity@__inference_block_11_project_layer_call_and_return_conditional_losses_21355"])
#loc1312 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_11_project_layer_call_and_return_conditional_losses_9945"])
#loc1313 = loc(fused["NoOp:", "NoOp@__inference_block_11_project_layer_call_and_return_conditional_losses_9945"])
#loc1314 = loc(fused["Conv2D:", "Conv2D@__inference_block_11_project_layer_call_and_return_conditional_losses_9945"])
#loc1315 = loc(fused["Identity:", "Identity@__inference_block_11_project_layer_call_and_return_conditional_losses_9945"])
#loc1316 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_11_project_layer_call_fn_21348"])
#loc1317 = loc(fused["NoOp:", "NoOp@__inference_block_11_project_layer_call_fn_21348"])
#loc1318 = loc(fused["Identity:", "Identity@__inference_block_11_project_layer_call_fn_21348"])
#loc1319 = loc(fused["AddV2:", "add@__inference_block_12_add_layer_call_and_return_conditional_losses_10048"])
#loc1320 = loc(fused["Identity:", "Identity@__inference_block_12_add_layer_call_and_return_conditional_losses_10048"])
#loc1321 = loc(fused["AddV2:", "add@__inference_block_12_add_layer_call_and_return_conditional_losses_21691"])
#loc1322 = loc(fused["Identity:", "Identity@__inference_block_12_add_layer_call_and_return_conditional_losses_21691"])
#loc1323 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_12_add_layer_call_fn_21685"])
#loc1324 = loc(fused["Identity:", "Identity@__inference_block_12_add_layer_call_fn_21685"])
#loc1325 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21575"])
#loc1326 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21575"])
#loc1327 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21575"])
#loc1328 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21575"])
#loc1329 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21575"])
#loc1330 = loc(fused["NoOp:", "NoOp@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21575"])
#loc1331 = loc(fused["Identity:", "Identity@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21575"])
#loc1332 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21593"])
#loc1333 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21593"])
#loc1334 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21593"])
#loc1335 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21593"])
#loc1336 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21593"])
#loc1337 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21593"])
#loc1338 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21593"])
#loc1339 = loc(fused["NoOp:", "NoOp@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21593"])
#loc1340 = loc(fused["Identity:", "Identity@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_21593"])
#loc1341 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8024"])
#loc1342 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8024"])
#loc1343 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8024"])
#loc1344 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8024"])
#loc1345 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8024"])
#loc1346 = loc(fused["NoOp:", "NoOp@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8024"])
#loc1347 = loc(fused["Identity:", "Identity@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8024"])
#loc1348 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8055"])
#loc1349 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8055"])
#loc1350 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8055"])
#loc1351 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8055"])
#loc1352 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8055"])
#loc1353 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8055"])
#loc1354 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8055"])
#loc1355 = loc(fused["NoOp:", "NoOp@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8055"])
#loc1356 = loc(fused["Identity:", "Identity@__inference_block_12_depthwise_BN_layer_call_and_return_conditional_losses_8055"])
#loc1357 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_12_depthwise_BN_layer_call_fn_21544"])
#loc1358 = loc(fused["NoOp:", "NoOp@__inference_block_12_depthwise_BN_layer_call_fn_21544"])
#loc1359 = loc(fused["Identity:", "Identity@__inference_block_12_depthwise_BN_layer_call_fn_21544"])
#loc1360 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_12_depthwise_BN_layer_call_fn_21557"])
#loc1361 = loc(fused["NoOp:", "NoOp@__inference_block_12_depthwise_BN_layer_call_fn_21557"])
#loc1362 = loc(fused["Identity:", "Identity@__inference_block_12_depthwise_BN_layer_call_fn_21557"])
#loc1363 = loc(fused["Const:", "depthwise/Shape@__inference_block_12_depthwise_layer_call_and_return_conditional_losses_10002"])
#loc1364 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_12_depthwise_layer_call_and_return_conditional_losses_10002"])
#loc1365 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_12_depthwise_layer_call_and_return_conditional_losses_10002"])
#loc1366 = loc(fused["NoOp:", "NoOp@__inference_block_12_depthwise_layer_call_and_return_conditional_losses_10002"])
#loc1367 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_12_depthwise_layer_call_and_return_conditional_losses_10002"])
#loc1368 = loc(fused["Identity:", "Identity@__inference_block_12_depthwise_layer_call_and_return_conditional_losses_10002"])
#loc1369 = loc(fused["Const:", "depthwise/Shape@__inference_block_12_depthwise_layer_call_and_return_conditional_losses_21531"])
#loc1370 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_12_depthwise_layer_call_and_return_conditional_losses_21531"])
#loc1371 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_12_depthwise_layer_call_and_return_conditional_losses_21531"])
#loc1372 = loc(fused["NoOp:", "NoOp@__inference_block_12_depthwise_layer_call_and_return_conditional_losses_21531"])
#loc1373 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_12_depthwise_layer_call_and_return_conditional_losses_21531"])
#loc1374 = loc(fused["Identity:", "Identity@__inference_block_12_depthwise_layer_call_and_return_conditional_losses_21531"])
#loc1375 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_12_depthwise_layer_call_fn_21522"])
#loc1376 = loc(fused["NoOp:", "NoOp@__inference_block_12_depthwise_layer_call_fn_21522"])
#loc1377 = loc(fused["Identity:", "Identity@__inference_block_12_depthwise_layer_call_fn_21522"])
#loc1378 = loc(fused["Relu6:", "Relu6@__inference_block_12_depthwise_relu_layer_call_and_return_conditional_losses_10020"])
#loc1379 = loc(fused["Identity:", "Identity@__inference_block_12_depthwise_relu_layer_call_and_return_conditional_losses_10020"])
#loc1380 = loc(fused["Relu6:", "Relu6@__inference_block_12_depthwise_relu_layer_call_and_return_conditional_losses_21603"])
#loc1381 = loc(fused["Identity:", "Identity@__inference_block_12_depthwise_relu_layer_call_and_return_conditional_losses_21603"])
#loc1382 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_12_depthwise_relu_layer_call_fn_21598"])
#loc1383 = loc(fused["Identity:", "Identity@__inference_block_12_depthwise_relu_layer_call_fn_21598"])
#loc1384 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21487"])
#loc1385 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21487"])
#loc1386 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21487"])
#loc1387 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21487"])
#loc1388 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21487"])
#loc1389 = loc(fused["NoOp:", "NoOp@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21487"])
#loc1390 = loc(fused["Identity:", "Identity@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21487"])
#loc1391 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21505"])
#loc1392 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21505"])
#loc1393 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21505"])
#loc1394 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21505"])
#loc1395 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21505"])
#loc1396 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21505"])
#loc1397 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21505"])
#loc1398 = loc(fused["NoOp:", "NoOp@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21505"])
#loc1399 = loc(fused["Identity:", "Identity@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_21505"])
#loc1400 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7960"])
#loc1401 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7960"])
#loc1402 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7960"])
#loc1403 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7960"])
#loc1404 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7960"])
#loc1405 = loc(fused["NoOp:", "NoOp@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7960"])
#loc1406 = loc(fused["Identity:", "Identity@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7960"])
#loc1407 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7991"])
#loc1408 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7991"])
#loc1409 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7991"])
#loc1410 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7991"])
#loc1411 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7991"])
#loc1412 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7991"])
#loc1413 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7991"])
#loc1414 = loc(fused["NoOp:", "NoOp@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7991"])
#loc1415 = loc(fused["Identity:", "Identity@__inference_block_12_expand_BN_layer_call_and_return_conditional_losses_7991"])
#loc1416 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_12_expand_BN_layer_call_fn_21456"])
#loc1417 = loc(fused["NoOp:", "NoOp@__inference_block_12_expand_BN_layer_call_fn_21456"])
#loc1418 = loc(fused["Identity:", "Identity@__inference_block_12_expand_BN_layer_call_fn_21456"])
#loc1419 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_12_expand_BN_layer_call_fn_21469"])
#loc1420 = loc(fused["NoOp:", "NoOp@__inference_block_12_expand_BN_layer_call_fn_21469"])
#loc1421 = loc(fused["Identity:", "Identity@__inference_block_12_expand_BN_layer_call_fn_21469"])
#loc1422 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_12_expand_layer_call_and_return_conditional_losses_21443"])
#loc1423 = loc(fused["NoOp:", "NoOp@__inference_block_12_expand_layer_call_and_return_conditional_losses_21443"])
#loc1424 = loc(fused["Conv2D:", "Conv2D@__inference_block_12_expand_layer_call_and_return_conditional_losses_21443"])
#loc1425 = loc(fused["Identity:", "Identity@__inference_block_12_expand_layer_call_and_return_conditional_losses_21443"])
#loc1426 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_12_expand_layer_call_and_return_conditional_losses_9973"])
#loc1427 = loc(fused["NoOp:", "NoOp@__inference_block_12_expand_layer_call_and_return_conditional_losses_9973"])
#loc1428 = loc(fused["Conv2D:", "Conv2D@__inference_block_12_expand_layer_call_and_return_conditional_losses_9973"])
#loc1429 = loc(fused["Identity:", "Identity@__inference_block_12_expand_layer_call_and_return_conditional_losses_9973"])
#loc1430 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_12_expand_layer_call_fn_21436"])
#loc1431 = loc(fused["NoOp:", "NoOp@__inference_block_12_expand_layer_call_fn_21436"])
#loc1432 = loc(fused["Identity:", "Identity@__inference_block_12_expand_layer_call_fn_21436"])
#loc1433 = loc(fused["Relu6:", "Relu6@__inference_block_12_expand_relu_layer_call_and_return_conditional_losses_21515"])
#loc1434 = loc(fused["Identity:", "Identity@__inference_block_12_expand_relu_layer_call_and_return_conditional_losses_21515"])
#loc1435 = loc(fused["Relu6:", "Relu6@__inference_block_12_expand_relu_layer_call_and_return_conditional_losses_9991"])
#loc1436 = loc(fused["Identity:", "Identity@__inference_block_12_expand_relu_layer_call_and_return_conditional_losses_9991"])
#loc1437 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_12_expand_relu_layer_call_fn_21510"])
#loc1438 = loc(fused["Identity:", "Identity@__inference_block_12_expand_relu_layer_call_fn_21510"])
#loc1439 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21661"])
#loc1440 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21661"])
#loc1441 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21661"])
#loc1442 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21661"])
#loc1443 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21661"])
#loc1444 = loc(fused["NoOp:", "NoOp@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21661"])
#loc1445 = loc(fused["Identity:", "Identity@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21661"])
#loc1446 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21679"])
#loc1447 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21679"])
#loc1448 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21679"])
#loc1449 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21679"])
#loc1450 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21679"])
#loc1451 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21679"])
#loc1452 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21679"])
#loc1453 = loc(fused["NoOp:", "NoOp@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21679"])
#loc1454 = loc(fused["Identity:", "Identity@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_21679"])
#loc1455 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8088"])
#loc1456 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8088"])
#loc1457 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8088"])
#loc1458 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8088"])
#loc1459 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8088"])
#loc1460 = loc(fused["NoOp:", "NoOp@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8088"])
#loc1461 = loc(fused["Identity:", "Identity@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8088"])
#loc1462 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8119"])
#loc1463 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8119"])
#loc1464 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8119"])
#loc1465 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8119"])
#loc1466 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8119"])
#loc1467 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8119"])
#loc1468 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8119"])
#loc1469 = loc(fused["NoOp:", "NoOp@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8119"])
#loc1470 = loc(fused["Identity:", "Identity@__inference_block_12_project_BN_layer_call_and_return_conditional_losses_8119"])
#loc1471 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_12_project_BN_layer_call_fn_21630"])
#loc1472 = loc(fused["NoOp:", "NoOp@__inference_block_12_project_BN_layer_call_fn_21630"])
#loc1473 = loc(fused["Identity:", "Identity@__inference_block_12_project_BN_layer_call_fn_21630"])
#loc1474 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_12_project_BN_layer_call_fn_21643"])
#loc1475 = loc(fused["NoOp:", "NoOp@__inference_block_12_project_BN_layer_call_fn_21643"])
#loc1476 = loc(fused["Identity:", "Identity@__inference_block_12_project_BN_layer_call_fn_21643"])
#loc1477 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_12_project_layer_call_and_return_conditional_losses_10029"])
#loc1478 = loc(fused["NoOp:", "NoOp@__inference_block_12_project_layer_call_and_return_conditional_losses_10029"])
#loc1479 = loc(fused["Conv2D:", "Conv2D@__inference_block_12_project_layer_call_and_return_conditional_losses_10029"])
#loc1480 = loc(fused["Identity:", "Identity@__inference_block_12_project_layer_call_and_return_conditional_losses_10029"])
#loc1481 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_12_project_layer_call_and_return_conditional_losses_21617"])
#loc1482 = loc(fused["NoOp:", "NoOp@__inference_block_12_project_layer_call_and_return_conditional_losses_21617"])
#loc1483 = loc(fused["Conv2D:", "Conv2D@__inference_block_12_project_layer_call_and_return_conditional_losses_21617"])
#loc1484 = loc(fused["Identity:", "Identity@__inference_block_12_project_layer_call_and_return_conditional_losses_21617"])
#loc1485 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_12_project_layer_call_fn_21610"])
#loc1486 = loc(fused["NoOp:", "NoOp@__inference_block_12_project_layer_call_fn_21610"])
#loc1487 = loc(fused["Identity:", "Identity@__inference_block_12_project_layer_call_fn_21610"])
#loc1488 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21848"])
#loc1489 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21848"])
#loc1490 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21848"])
#loc1491 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21848"])
#loc1492 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21848"])
#loc1493 = loc(fused["NoOp:", "NoOp@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21848"])
#loc1494 = loc(fused["Identity:", "Identity@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21848"])
#loc1495 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21866"])
#loc1496 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21866"])
#loc1497 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21866"])
#loc1498 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21866"])
#loc1499 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21866"])
#loc1500 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21866"])
#loc1501 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21866"])
#loc1502 = loc(fused["NoOp:", "NoOp@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21866"])
#loc1503 = loc(fused["Identity:", "Identity@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_21866"])
#loc1504 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8229"])
#loc1505 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8229"])
#loc1506 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8229"])
#loc1507 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8229"])
#loc1508 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8229"])
#loc1509 = loc(fused["NoOp:", "NoOp@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8229"])
#loc1510 = loc(fused["Identity:", "Identity@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8229"])
#loc1511 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8260"])
#loc1512 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8260"])
#loc1513 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8260"])
#loc1514 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8260"])
#loc1515 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8260"])
#loc1516 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8260"])
#loc1517 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8260"])
#loc1518 = loc(fused["NoOp:", "NoOp@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8260"])
#loc1519 = loc(fused["Identity:", "Identity@__inference_block_13_depthwise_BN_layer_call_and_return_conditional_losses_8260"])
#loc1520 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_13_depthwise_BN_layer_call_fn_21817"])
#loc1521 = loc(fused["NoOp:", "NoOp@__inference_block_13_depthwise_BN_layer_call_fn_21817"])
#loc1522 = loc(fused["Identity:", "Identity@__inference_block_13_depthwise_BN_layer_call_fn_21817"])
#loc1523 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_13_depthwise_BN_layer_call_fn_21830"])
#loc1524 = loc(fused["NoOp:", "NoOp@__inference_block_13_depthwise_BN_layer_call_fn_21830"])
#loc1525 = loc(fused["Identity:", "Identity@__inference_block_13_depthwise_BN_layer_call_fn_21830"])
#loc1526 = loc(fused["Const:", "depthwise/Shape@__inference_block_13_depthwise_layer_call_and_return_conditional_losses_10087"])
#loc1527 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_13_depthwise_layer_call_and_return_conditional_losses_10087"])
#loc1528 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_13_depthwise_layer_call_and_return_conditional_losses_10087"])
#loc1529 = loc(fused["NoOp:", "NoOp@__inference_block_13_depthwise_layer_call_and_return_conditional_losses_10087"])
#loc1530 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_13_depthwise_layer_call_and_return_conditional_losses_10087"])
#loc1531 = loc(fused["Identity:", "Identity@__inference_block_13_depthwise_layer_call_and_return_conditional_losses_10087"])
#loc1532 = loc(fused["Const:", "depthwise/Shape@__inference_block_13_depthwise_layer_call_and_return_conditional_losses_21804"])
#loc1533 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_13_depthwise_layer_call_and_return_conditional_losses_21804"])
#loc1534 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_13_depthwise_layer_call_and_return_conditional_losses_21804"])
#loc1535 = loc(fused["NoOp:", "NoOp@__inference_block_13_depthwise_layer_call_and_return_conditional_losses_21804"])
#loc1536 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_13_depthwise_layer_call_and_return_conditional_losses_21804"])
#loc1537 = loc(fused["Identity:", "Identity@__inference_block_13_depthwise_layer_call_and_return_conditional_losses_21804"])
#loc1538 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_13_depthwise_layer_call_fn_21795"])
#loc1539 = loc(fused["NoOp:", "NoOp@__inference_block_13_depthwise_layer_call_fn_21795"])
#loc1540 = loc(fused["Identity:", "Identity@__inference_block_13_depthwise_layer_call_fn_21795"])
#loc1541 = loc(fused["Relu6:", "Relu6@__inference_block_13_depthwise_relu_layer_call_and_return_conditional_losses_10105"])
#loc1542 = loc(fused["Identity:", "Identity@__inference_block_13_depthwise_relu_layer_call_and_return_conditional_losses_10105"])
#loc1543 = loc(fused["Relu6:", "Relu6@__inference_block_13_depthwise_relu_layer_call_and_return_conditional_losses_21876"])
#loc1544 = loc(fused["Identity:", "Identity@__inference_block_13_depthwise_relu_layer_call_and_return_conditional_losses_21876"])
#loc1545 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_13_depthwise_relu_layer_call_fn_21871"])
#loc1546 = loc(fused["Identity:", "Identity@__inference_block_13_depthwise_relu_layer_call_fn_21871"])
#loc1547 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21749"])
#loc1548 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21749"])
#loc1549 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21749"])
#loc1550 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21749"])
#loc1551 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21749"])
#loc1552 = loc(fused["NoOp:", "NoOp@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21749"])
#loc1553 = loc(fused["Identity:", "Identity@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21749"])
#loc1554 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21767"])
#loc1555 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21767"])
#loc1556 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21767"])
#loc1557 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21767"])
#loc1558 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21767"])
#loc1559 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21767"])
#loc1560 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21767"])
#loc1561 = loc(fused["NoOp:", "NoOp@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21767"])
#loc1562 = loc(fused["Identity:", "Identity@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_21767"])
#loc1563 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8152"])
#loc1564 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8152"])
#loc1565 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8152"])
#loc1566 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8152"])
#loc1567 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8152"])
#loc1568 = loc(fused["NoOp:", "NoOp@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8152"])
#loc1569 = loc(fused["Identity:", "Identity@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8152"])
#loc1570 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8183"])
#loc1571 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8183"])
#loc1572 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8183"])
#loc1573 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8183"])
#loc1574 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8183"])
#loc1575 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8183"])
#loc1576 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8183"])
#loc1577 = loc(fused["NoOp:", "NoOp@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8183"])
#loc1578 = loc(fused["Identity:", "Identity@__inference_block_13_expand_BN_layer_call_and_return_conditional_losses_8183"])
#loc1579 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_13_expand_BN_layer_call_fn_21718"])
#loc1580 = loc(fused["NoOp:", "NoOp@__inference_block_13_expand_BN_layer_call_fn_21718"])
#loc1581 = loc(fused["Identity:", "Identity@__inference_block_13_expand_BN_layer_call_fn_21718"])
#loc1582 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_13_expand_BN_layer_call_fn_21731"])
#loc1583 = loc(fused["NoOp:", "NoOp@__inference_block_13_expand_BN_layer_call_fn_21731"])
#loc1584 = loc(fused["Identity:", "Identity@__inference_block_13_expand_BN_layer_call_fn_21731"])
#loc1585 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_13_expand_layer_call_and_return_conditional_losses_10057"])
#loc1586 = loc(fused["NoOp:", "NoOp@__inference_block_13_expand_layer_call_and_return_conditional_losses_10057"])
#loc1587 = loc(fused["Conv2D:", "Conv2D@__inference_block_13_expand_layer_call_and_return_conditional_losses_10057"])
#loc1588 = loc(fused["Identity:", "Identity@__inference_block_13_expand_layer_call_and_return_conditional_losses_10057"])
#loc1589 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_13_expand_layer_call_and_return_conditional_losses_21705"])
#loc1590 = loc(fused["NoOp:", "NoOp@__inference_block_13_expand_layer_call_and_return_conditional_losses_21705"])
#loc1591 = loc(fused["Conv2D:", "Conv2D@__inference_block_13_expand_layer_call_and_return_conditional_losses_21705"])
#loc1592 = loc(fused["Identity:", "Identity@__inference_block_13_expand_layer_call_and_return_conditional_losses_21705"])
#loc1593 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_13_expand_layer_call_fn_21698"])
#loc1594 = loc(fused["NoOp:", "NoOp@__inference_block_13_expand_layer_call_fn_21698"])
#loc1595 = loc(fused["Identity:", "Identity@__inference_block_13_expand_layer_call_fn_21698"])
#loc1596 = loc(fused["Relu6:", "Relu6@__inference_block_13_expand_relu_layer_call_and_return_conditional_losses_10075"])
#loc1597 = loc(fused["Identity:", "Identity@__inference_block_13_expand_relu_layer_call_and_return_conditional_losses_10075"])
#loc1598 = loc(fused["Relu6:", "Relu6@__inference_block_13_expand_relu_layer_call_and_return_conditional_losses_21777"])
#loc1599 = loc(fused["Identity:", "Identity@__inference_block_13_expand_relu_layer_call_and_return_conditional_losses_21777"])
#loc1600 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_13_expand_relu_layer_call_fn_21772"])
#loc1601 = loc(fused["Identity:", "Identity@__inference_block_13_expand_relu_layer_call_fn_21772"])
#loc1602 = loc(fused["Const:", "Pad/paddings@__inference_block_13_pad_layer_call_and_return_conditional_losses_21788"])
#loc1603 = loc(fused["Pad:", "Pad@__inference_block_13_pad_layer_call_and_return_conditional_losses_21788"])
#loc1604 = loc(fused["Identity:", "Identity@__inference_block_13_pad_layer_call_and_return_conditional_losses_21788"])
#loc1605 = loc(fused["Const:", "Pad/paddings@__inference_block_13_pad_layer_call_and_return_conditional_losses_8204"])
#loc1606 = loc(fused["Pad:", "Pad@__inference_block_13_pad_layer_call_and_return_conditional_losses_8204"])
#loc1607 = loc(fused["Identity:", "Identity@__inference_block_13_pad_layer_call_and_return_conditional_losses_8204"])
#loc1608 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_13_pad_layer_call_fn_21782"])
#loc1609 = loc(fused["Identity:", "Identity@__inference_block_13_pad_layer_call_fn_21782"])
#loc1610 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21934"])
#loc1611 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21934"])
#loc1612 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21934"])
#loc1613 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21934"])
#loc1614 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21934"])
#loc1615 = loc(fused["NoOp:", "NoOp@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21934"])
#loc1616 = loc(fused["Identity:", "Identity@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21934"])
#loc1617 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21952"])
#loc1618 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21952"])
#loc1619 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21952"])
#loc1620 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21952"])
#loc1621 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21952"])
#loc1622 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21952"])
#loc1623 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21952"])
#loc1624 = loc(fused["NoOp:", "NoOp@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21952"])
#loc1625 = loc(fused["Identity:", "Identity@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_21952"])
#loc1626 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8293"])
#loc1627 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8293"])
#loc1628 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8293"])
#loc1629 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8293"])
#loc1630 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8293"])
#loc1631 = loc(fused["NoOp:", "NoOp@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8293"])
#loc1632 = loc(fused["Identity:", "Identity@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8293"])
#loc1633 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8324"])
#loc1634 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8324"])
#loc1635 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8324"])
#loc1636 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8324"])
#loc1637 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8324"])
#loc1638 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8324"])
#loc1639 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8324"])
#loc1640 = loc(fused["NoOp:", "NoOp@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8324"])
#loc1641 = loc(fused["Identity:", "Identity@__inference_block_13_project_BN_layer_call_and_return_conditional_losses_8324"])
#loc1642 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_13_project_BN_layer_call_fn_21903"])
#loc1643 = loc(fused["NoOp:", "NoOp@__inference_block_13_project_BN_layer_call_fn_21903"])
#loc1644 = loc(fused["Identity:", "Identity@__inference_block_13_project_BN_layer_call_fn_21903"])
#loc1645 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_13_project_BN_layer_call_fn_21916"])
#loc1646 = loc(fused["NoOp:", "NoOp@__inference_block_13_project_BN_layer_call_fn_21916"])
#loc1647 = loc(fused["Identity:", "Identity@__inference_block_13_project_BN_layer_call_fn_21916"])
#loc1648 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_13_project_layer_call_and_return_conditional_losses_10114"])
#loc1649 = loc(fused["NoOp:", "NoOp@__inference_block_13_project_layer_call_and_return_conditional_losses_10114"])
#loc1650 = loc(fused["Conv2D:", "Conv2D@__inference_block_13_project_layer_call_and_return_conditional_losses_10114"])
#loc1651 = loc(fused["Identity:", "Identity@__inference_block_13_project_layer_call_and_return_conditional_losses_10114"])
#loc1652 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_13_project_layer_call_and_return_conditional_losses_21890"])
#loc1653 = loc(fused["NoOp:", "NoOp@__inference_block_13_project_layer_call_and_return_conditional_losses_21890"])
#loc1654 = loc(fused["Conv2D:", "Conv2D@__inference_block_13_project_layer_call_and_return_conditional_losses_21890"])
#loc1655 = loc(fused["Identity:", "Identity@__inference_block_13_project_layer_call_and_return_conditional_losses_21890"])
#loc1656 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_13_project_layer_call_fn_21883"])
#loc1657 = loc(fused["NoOp:", "NoOp@__inference_block_13_project_layer_call_fn_21883"])
#loc1658 = loc(fused["Identity:", "Identity@__inference_block_13_project_layer_call_fn_21883"])
#loc1659 = loc(fused["AddV2:", "add@__inference_block_14_add_layer_call_and_return_conditional_losses_10209"])
#loc1660 = loc(fused["Identity:", "Identity@__inference_block_14_add_layer_call_and_return_conditional_losses_10209"])
#loc1661 = loc(fused["AddV2:", "add@__inference_block_14_add_layer_call_and_return_conditional_losses_22214"])
#loc1662 = loc(fused["Identity:", "Identity@__inference_block_14_add_layer_call_and_return_conditional_losses_22214"])
#loc1663 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_14_add_layer_call_fn_22208"])
#loc1664 = loc(fused["Identity:", "Identity@__inference_block_14_add_layer_call_fn_22208"])
#loc1665 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22098"])
#loc1666 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22098"])
#loc1667 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22098"])
#loc1668 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22098"])
#loc1669 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22098"])
#loc1670 = loc(fused["NoOp:", "NoOp@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22098"])
#loc1671 = loc(fused["Identity:", "Identity@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22098"])
#loc1672 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22116"])
#loc1673 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22116"])
#loc1674 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22116"])
#loc1675 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22116"])
#loc1676 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22116"])
#loc1677 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22116"])
#loc1678 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22116"])
#loc1679 = loc(fused["NoOp:", "NoOp@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22116"])
#loc1680 = loc(fused["Identity:", "Identity@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_22116"])
#loc1681 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8421"])
#loc1682 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8421"])
#loc1683 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8421"])
#loc1684 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8421"])
#loc1685 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8421"])
#loc1686 = loc(fused["NoOp:", "NoOp@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8421"])
#loc1687 = loc(fused["Identity:", "Identity@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8421"])
#loc1688 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8452"])
#loc1689 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8452"])
#loc1690 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8452"])
#loc1691 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8452"])
#loc1692 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8452"])
#loc1693 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8452"])
#loc1694 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8452"])
#loc1695 = loc(fused["NoOp:", "NoOp@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8452"])
#loc1696 = loc(fused["Identity:", "Identity@__inference_block_14_depthwise_BN_layer_call_and_return_conditional_losses_8452"])
#loc1697 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_14_depthwise_BN_layer_call_fn_22067"])
#loc1698 = loc(fused["NoOp:", "NoOp@__inference_block_14_depthwise_BN_layer_call_fn_22067"])
#loc1699 = loc(fused["Identity:", "Identity@__inference_block_14_depthwise_BN_layer_call_fn_22067"])
#loc1700 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_14_depthwise_BN_layer_call_fn_22080"])
#loc1701 = loc(fused["NoOp:", "NoOp@__inference_block_14_depthwise_BN_layer_call_fn_22080"])
#loc1702 = loc(fused["Identity:", "Identity@__inference_block_14_depthwise_BN_layer_call_fn_22080"])
#loc1703 = loc(fused["Const:", "depthwise/Shape@__inference_block_14_depthwise_layer_call_and_return_conditional_losses_10163"])
#loc1704 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_14_depthwise_layer_call_and_return_conditional_losses_10163"])
#loc1705 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_14_depthwise_layer_call_and_return_conditional_losses_10163"])
#loc1706 = loc(fused["NoOp:", "NoOp@__inference_block_14_depthwise_layer_call_and_return_conditional_losses_10163"])
#loc1707 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_14_depthwise_layer_call_and_return_conditional_losses_10163"])
#loc1708 = loc(fused["Identity:", "Identity@__inference_block_14_depthwise_layer_call_and_return_conditional_losses_10163"])
#loc1709 = loc(fused["Const:", "depthwise/Shape@__inference_block_14_depthwise_layer_call_and_return_conditional_losses_22054"])
#loc1710 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_14_depthwise_layer_call_and_return_conditional_losses_22054"])
#loc1711 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_14_depthwise_layer_call_and_return_conditional_losses_22054"])
#loc1712 = loc(fused["NoOp:", "NoOp@__inference_block_14_depthwise_layer_call_and_return_conditional_losses_22054"])
#loc1713 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_14_depthwise_layer_call_and_return_conditional_losses_22054"])
#loc1714 = loc(fused["Identity:", "Identity@__inference_block_14_depthwise_layer_call_and_return_conditional_losses_22054"])
#loc1715 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_14_depthwise_layer_call_fn_22045"])
#loc1716 = loc(fused["NoOp:", "NoOp@__inference_block_14_depthwise_layer_call_fn_22045"])
#loc1717 = loc(fused["Identity:", "Identity@__inference_block_14_depthwise_layer_call_fn_22045"])
#loc1718 = loc(fused["Relu6:", "Relu6@__inference_block_14_depthwise_relu_layer_call_and_return_conditional_losses_10181"])
#loc1719 = loc(fused["Identity:", "Identity@__inference_block_14_depthwise_relu_layer_call_and_return_conditional_losses_10181"])
#loc1720 = loc(fused["Relu6:", "Relu6@__inference_block_14_depthwise_relu_layer_call_and_return_conditional_losses_22126"])
#loc1721 = loc(fused["Identity:", "Identity@__inference_block_14_depthwise_relu_layer_call_and_return_conditional_losses_22126"])
#loc1722 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_14_depthwise_relu_layer_call_fn_22121"])
#loc1723 = loc(fused["Identity:", "Identity@__inference_block_14_depthwise_relu_layer_call_fn_22121"])
#loc1724 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22010"])
#loc1725 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22010"])
#loc1726 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22010"])
#loc1727 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22010"])
#loc1728 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22010"])
#loc1729 = loc(fused["NoOp:", "NoOp@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22010"])
#loc1730 = loc(fused["Identity:", "Identity@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22010"])
#loc1731 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22028"])
#loc1732 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22028"])
#loc1733 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22028"])
#loc1734 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22028"])
#loc1735 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22028"])
#loc1736 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22028"])
#loc1737 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22028"])
#loc1738 = loc(fused["NoOp:", "NoOp@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22028"])
#loc1739 = loc(fused["Identity:", "Identity@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_22028"])
#loc1740 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8357"])
#loc1741 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8357"])
#loc1742 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8357"])
#loc1743 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8357"])
#loc1744 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8357"])
#loc1745 = loc(fused["NoOp:", "NoOp@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8357"])
#loc1746 = loc(fused["Identity:", "Identity@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8357"])
#loc1747 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8388"])
#loc1748 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8388"])
#loc1749 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8388"])
#loc1750 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8388"])
#loc1751 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8388"])
#loc1752 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8388"])
#loc1753 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8388"])
#loc1754 = loc(fused["NoOp:", "NoOp@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8388"])
#loc1755 = loc(fused["Identity:", "Identity@__inference_block_14_expand_BN_layer_call_and_return_conditional_losses_8388"])
#loc1756 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_14_expand_BN_layer_call_fn_21979"])
#loc1757 = loc(fused["NoOp:", "NoOp@__inference_block_14_expand_BN_layer_call_fn_21979"])
#loc1758 = loc(fused["Identity:", "Identity@__inference_block_14_expand_BN_layer_call_fn_21979"])
#loc1759 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_14_expand_BN_layer_call_fn_21992"])
#loc1760 = loc(fused["NoOp:", "NoOp@__inference_block_14_expand_BN_layer_call_fn_21992"])
#loc1761 = loc(fused["Identity:", "Identity@__inference_block_14_expand_BN_layer_call_fn_21992"])
#loc1762 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_14_expand_layer_call_and_return_conditional_losses_10134"])
#loc1763 = loc(fused["NoOp:", "NoOp@__inference_block_14_expand_layer_call_and_return_conditional_losses_10134"])
#loc1764 = loc(fused["Conv2D:", "Conv2D@__inference_block_14_expand_layer_call_and_return_conditional_losses_10134"])
#loc1765 = loc(fused["Identity:", "Identity@__inference_block_14_expand_layer_call_and_return_conditional_losses_10134"])
#loc1766 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_14_expand_layer_call_and_return_conditional_losses_21966"])
#loc1767 = loc(fused["NoOp:", "NoOp@__inference_block_14_expand_layer_call_and_return_conditional_losses_21966"])
#loc1768 = loc(fused["Conv2D:", "Conv2D@__inference_block_14_expand_layer_call_and_return_conditional_losses_21966"])
#loc1769 = loc(fused["Identity:", "Identity@__inference_block_14_expand_layer_call_and_return_conditional_losses_21966"])
#loc1770 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_14_expand_layer_call_fn_21959"])
#loc1771 = loc(fused["NoOp:", "NoOp@__inference_block_14_expand_layer_call_fn_21959"])
#loc1772 = loc(fused["Identity:", "Identity@__inference_block_14_expand_layer_call_fn_21959"])
#loc1773 = loc(fused["Relu6:", "Relu6@__inference_block_14_expand_relu_layer_call_and_return_conditional_losses_10152"])
#loc1774 = loc(fused["Identity:", "Identity@__inference_block_14_expand_relu_layer_call_and_return_conditional_losses_10152"])
#loc1775 = loc(fused["Relu6:", "Relu6@__inference_block_14_expand_relu_layer_call_and_return_conditional_losses_22038"])
#loc1776 = loc(fused["Identity:", "Identity@__inference_block_14_expand_relu_layer_call_and_return_conditional_losses_22038"])
#loc1777 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_14_expand_relu_layer_call_fn_22033"])
#loc1778 = loc(fused["Identity:", "Identity@__inference_block_14_expand_relu_layer_call_fn_22033"])
#loc1779 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22184"])
#loc1780 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22184"])
#loc1781 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22184"])
#loc1782 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22184"])
#loc1783 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22184"])
#loc1784 = loc(fused["NoOp:", "NoOp@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22184"])
#loc1785 = loc(fused["Identity:", "Identity@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22184"])
#loc1786 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22202"])
#loc1787 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22202"])
#loc1788 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22202"])
#loc1789 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22202"])
#loc1790 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22202"])
#loc1791 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22202"])
#loc1792 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22202"])
#loc1793 = loc(fused["NoOp:", "NoOp@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22202"])
#loc1794 = loc(fused["Identity:", "Identity@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_22202"])
#loc1795 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8485"])
#loc1796 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8485"])
#loc1797 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8485"])
#loc1798 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8485"])
#loc1799 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8485"])
#loc1800 = loc(fused["NoOp:", "NoOp@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8485"])
#loc1801 = loc(fused["Identity:", "Identity@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8485"])
#loc1802 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8516"])
#loc1803 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8516"])
#loc1804 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8516"])
#loc1805 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8516"])
#loc1806 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8516"])
#loc1807 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8516"])
#loc1808 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8516"])
#loc1809 = loc(fused["NoOp:", "NoOp@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8516"])
#loc1810 = loc(fused["Identity:", "Identity@__inference_block_14_project_BN_layer_call_and_return_conditional_losses_8516"])
#loc1811 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_14_project_BN_layer_call_fn_22153"])
#loc1812 = loc(fused["NoOp:", "NoOp@__inference_block_14_project_BN_layer_call_fn_22153"])
#loc1813 = loc(fused["Identity:", "Identity@__inference_block_14_project_BN_layer_call_fn_22153"])
#loc1814 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_14_project_BN_layer_call_fn_22166"])
#loc1815 = loc(fused["NoOp:", "NoOp@__inference_block_14_project_BN_layer_call_fn_22166"])
#loc1816 = loc(fused["Identity:", "Identity@__inference_block_14_project_BN_layer_call_fn_22166"])
#loc1817 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_14_project_layer_call_and_return_conditional_losses_10190"])
#loc1818 = loc(fused["NoOp:", "NoOp@__inference_block_14_project_layer_call_and_return_conditional_losses_10190"])
#loc1819 = loc(fused["Conv2D:", "Conv2D@__inference_block_14_project_layer_call_and_return_conditional_losses_10190"])
#loc1820 = loc(fused["Identity:", "Identity@__inference_block_14_project_layer_call_and_return_conditional_losses_10190"])
#loc1821 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_14_project_layer_call_and_return_conditional_losses_22140"])
#loc1822 = loc(fused["NoOp:", "NoOp@__inference_block_14_project_layer_call_and_return_conditional_losses_22140"])
#loc1823 = loc(fused["Conv2D:", "Conv2D@__inference_block_14_project_layer_call_and_return_conditional_losses_22140"])
#loc1824 = loc(fused["Identity:", "Identity@__inference_block_14_project_layer_call_and_return_conditional_losses_22140"])
#loc1825 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_14_project_layer_call_fn_22133"])
#loc1826 = loc(fused["NoOp:", "NoOp@__inference_block_14_project_layer_call_fn_22133"])
#loc1827 = loc(fused["Identity:", "Identity@__inference_block_14_project_layer_call_fn_22133"])
#loc1828 = loc(fused["AddV2:", "add@__inference_block_15_add_layer_call_and_return_conditional_losses_10293"])
#loc1829 = loc(fused["Identity:", "Identity@__inference_block_15_add_layer_call_and_return_conditional_losses_10293"])
#loc1830 = loc(fused["AddV2:", "add@__inference_block_15_add_layer_call_and_return_conditional_losses_22476"])
#loc1831 = loc(fused["Identity:", "Identity@__inference_block_15_add_layer_call_and_return_conditional_losses_22476"])
#loc1832 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_15_add_layer_call_fn_22470"])
#loc1833 = loc(fused["Identity:", "Identity@__inference_block_15_add_layer_call_fn_22470"])
#loc1834 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22360"])
#loc1835 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22360"])
#loc1836 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22360"])
#loc1837 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22360"])
#loc1838 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22360"])
#loc1839 = loc(fused["NoOp:", "NoOp@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22360"])
#loc1840 = loc(fused["Identity:", "Identity@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22360"])
#loc1841 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22378"])
#loc1842 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22378"])
#loc1843 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22378"])
#loc1844 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22378"])
#loc1845 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22378"])
#loc1846 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22378"])
#loc1847 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22378"])
#loc1848 = loc(fused["NoOp:", "NoOp@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22378"])
#loc1849 = loc(fused["Identity:", "Identity@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_22378"])
#loc1850 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8613"])
#loc1851 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8613"])
#loc1852 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8613"])
#loc1853 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8613"])
#loc1854 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8613"])
#loc1855 = loc(fused["NoOp:", "NoOp@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8613"])
#loc1856 = loc(fused["Identity:", "Identity@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8613"])
#loc1857 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8644"])
#loc1858 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8644"])
#loc1859 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8644"])
#loc1860 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8644"])
#loc1861 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8644"])
#loc1862 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8644"])
#loc1863 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8644"])
#loc1864 = loc(fused["NoOp:", "NoOp@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8644"])
#loc1865 = loc(fused["Identity:", "Identity@__inference_block_15_depthwise_BN_layer_call_and_return_conditional_losses_8644"])
#loc1866 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_15_depthwise_BN_layer_call_fn_22329"])
#loc1867 = loc(fused["NoOp:", "NoOp@__inference_block_15_depthwise_BN_layer_call_fn_22329"])
#loc1868 = loc(fused["Identity:", "Identity@__inference_block_15_depthwise_BN_layer_call_fn_22329"])
#loc1869 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_15_depthwise_BN_layer_call_fn_22342"])
#loc1870 = loc(fused["NoOp:", "NoOp@__inference_block_15_depthwise_BN_layer_call_fn_22342"])
#loc1871 = loc(fused["Identity:", "Identity@__inference_block_15_depthwise_BN_layer_call_fn_22342"])
#loc1872 = loc(fused["Const:", "depthwise/Shape@__inference_block_15_depthwise_layer_call_and_return_conditional_losses_10247"])
#loc1873 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_15_depthwise_layer_call_and_return_conditional_losses_10247"])
#loc1874 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_15_depthwise_layer_call_and_return_conditional_losses_10247"])
#loc1875 = loc(fused["NoOp:", "NoOp@__inference_block_15_depthwise_layer_call_and_return_conditional_losses_10247"])
#loc1876 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_15_depthwise_layer_call_and_return_conditional_losses_10247"])
#loc1877 = loc(fused["Identity:", "Identity@__inference_block_15_depthwise_layer_call_and_return_conditional_losses_10247"])
#loc1878 = loc(fused["Const:", "depthwise/Shape@__inference_block_15_depthwise_layer_call_and_return_conditional_losses_22316"])
#loc1879 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_15_depthwise_layer_call_and_return_conditional_losses_22316"])
#loc1880 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_15_depthwise_layer_call_and_return_conditional_losses_22316"])
#loc1881 = loc(fused["NoOp:", "NoOp@__inference_block_15_depthwise_layer_call_and_return_conditional_losses_22316"])
#loc1882 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_15_depthwise_layer_call_and_return_conditional_losses_22316"])
#loc1883 = loc(fused["Identity:", "Identity@__inference_block_15_depthwise_layer_call_and_return_conditional_losses_22316"])
#loc1884 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_15_depthwise_layer_call_fn_22307"])
#loc1885 = loc(fused["NoOp:", "NoOp@__inference_block_15_depthwise_layer_call_fn_22307"])
#loc1886 = loc(fused["Identity:", "Identity@__inference_block_15_depthwise_layer_call_fn_22307"])
#loc1887 = loc(fused["Relu6:", "Relu6@__inference_block_15_depthwise_relu_layer_call_and_return_conditional_losses_10265"])
#loc1888 = loc(fused["Identity:", "Identity@__inference_block_15_depthwise_relu_layer_call_and_return_conditional_losses_10265"])
#loc1889 = loc(fused["Relu6:", "Relu6@__inference_block_15_depthwise_relu_layer_call_and_return_conditional_losses_22388"])
#loc1890 = loc(fused["Identity:", "Identity@__inference_block_15_depthwise_relu_layer_call_and_return_conditional_losses_22388"])
#loc1891 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_15_depthwise_relu_layer_call_fn_22383"])
#loc1892 = loc(fused["Identity:", "Identity@__inference_block_15_depthwise_relu_layer_call_fn_22383"])
#loc1893 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22272"])
#loc1894 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22272"])
#loc1895 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22272"])
#loc1896 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22272"])
#loc1897 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22272"])
#loc1898 = loc(fused["NoOp:", "NoOp@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22272"])
#loc1899 = loc(fused["Identity:", "Identity@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22272"])
#loc1900 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22290"])
#loc1901 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22290"])
#loc1902 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22290"])
#loc1903 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22290"])
#loc1904 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22290"])
#loc1905 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22290"])
#loc1906 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22290"])
#loc1907 = loc(fused["NoOp:", "NoOp@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22290"])
#loc1908 = loc(fused["Identity:", "Identity@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_22290"])
#loc1909 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8549"])
#loc1910 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8549"])
#loc1911 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8549"])
#loc1912 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8549"])
#loc1913 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8549"])
#loc1914 = loc(fused["NoOp:", "NoOp@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8549"])
#loc1915 = loc(fused["Identity:", "Identity@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8549"])
#loc1916 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8580"])
#loc1917 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8580"])
#loc1918 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8580"])
#loc1919 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8580"])
#loc1920 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8580"])
#loc1921 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8580"])
#loc1922 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8580"])
#loc1923 = loc(fused["NoOp:", "NoOp@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8580"])
#loc1924 = loc(fused["Identity:", "Identity@__inference_block_15_expand_BN_layer_call_and_return_conditional_losses_8580"])
#loc1925 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_15_expand_BN_layer_call_fn_22241"])
#loc1926 = loc(fused["NoOp:", "NoOp@__inference_block_15_expand_BN_layer_call_fn_22241"])
#loc1927 = loc(fused["Identity:", "Identity@__inference_block_15_expand_BN_layer_call_fn_22241"])
#loc1928 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_15_expand_BN_layer_call_fn_22254"])
#loc1929 = loc(fused["NoOp:", "NoOp@__inference_block_15_expand_BN_layer_call_fn_22254"])
#loc1930 = loc(fused["Identity:", "Identity@__inference_block_15_expand_BN_layer_call_fn_22254"])
#loc1931 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_15_expand_layer_call_and_return_conditional_losses_10218"])
#loc1932 = loc(fused["NoOp:", "NoOp@__inference_block_15_expand_layer_call_and_return_conditional_losses_10218"])
#loc1933 = loc(fused["Conv2D:", "Conv2D@__inference_block_15_expand_layer_call_and_return_conditional_losses_10218"])
#loc1934 = loc(fused["Identity:", "Identity@__inference_block_15_expand_layer_call_and_return_conditional_losses_10218"])
#loc1935 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_15_expand_layer_call_and_return_conditional_losses_22228"])
#loc1936 = loc(fused["NoOp:", "NoOp@__inference_block_15_expand_layer_call_and_return_conditional_losses_22228"])
#loc1937 = loc(fused["Conv2D:", "Conv2D@__inference_block_15_expand_layer_call_and_return_conditional_losses_22228"])
#loc1938 = loc(fused["Identity:", "Identity@__inference_block_15_expand_layer_call_and_return_conditional_losses_22228"])
#loc1939 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_15_expand_layer_call_fn_22221"])
#loc1940 = loc(fused["NoOp:", "NoOp@__inference_block_15_expand_layer_call_fn_22221"])
#loc1941 = loc(fused["Identity:", "Identity@__inference_block_15_expand_layer_call_fn_22221"])
#loc1942 = loc(fused["Relu6:", "Relu6@__inference_block_15_expand_relu_layer_call_and_return_conditional_losses_10236"])
#loc1943 = loc(fused["Identity:", "Identity@__inference_block_15_expand_relu_layer_call_and_return_conditional_losses_10236"])
#loc1944 = loc(fused["Relu6:", "Relu6@__inference_block_15_expand_relu_layer_call_and_return_conditional_losses_22300"])
#loc1945 = loc(fused["Identity:", "Identity@__inference_block_15_expand_relu_layer_call_and_return_conditional_losses_22300"])
#loc1946 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_15_expand_relu_layer_call_fn_22295"])
#loc1947 = loc(fused["Identity:", "Identity@__inference_block_15_expand_relu_layer_call_fn_22295"])
#loc1948 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22446"])
#loc1949 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22446"])
#loc1950 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22446"])
#loc1951 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22446"])
#loc1952 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22446"])
#loc1953 = loc(fused["NoOp:", "NoOp@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22446"])
#loc1954 = loc(fused["Identity:", "Identity@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22446"])
#loc1955 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22464"])
#loc1956 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22464"])
#loc1957 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22464"])
#loc1958 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22464"])
#loc1959 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22464"])
#loc1960 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22464"])
#loc1961 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22464"])
#loc1962 = loc(fused["NoOp:", "NoOp@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22464"])
#loc1963 = loc(fused["Identity:", "Identity@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_22464"])
#loc1964 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8677"])
#loc1965 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8677"])
#loc1966 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8677"])
#loc1967 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8677"])
#loc1968 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8677"])
#loc1969 = loc(fused["NoOp:", "NoOp@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8677"])
#loc1970 = loc(fused["Identity:", "Identity@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8677"])
#loc1971 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8708"])
#loc1972 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8708"])
#loc1973 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8708"])
#loc1974 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8708"])
#loc1975 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8708"])
#loc1976 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8708"])
#loc1977 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8708"])
#loc1978 = loc(fused["NoOp:", "NoOp@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8708"])
#loc1979 = loc(fused["Identity:", "Identity@__inference_block_15_project_BN_layer_call_and_return_conditional_losses_8708"])
#loc1980 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_15_project_BN_layer_call_fn_22415"])
#loc1981 = loc(fused["NoOp:", "NoOp@__inference_block_15_project_BN_layer_call_fn_22415"])
#loc1982 = loc(fused["Identity:", "Identity@__inference_block_15_project_BN_layer_call_fn_22415"])
#loc1983 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_15_project_BN_layer_call_fn_22428"])
#loc1984 = loc(fused["NoOp:", "NoOp@__inference_block_15_project_BN_layer_call_fn_22428"])
#loc1985 = loc(fused["Identity:", "Identity@__inference_block_15_project_BN_layer_call_fn_22428"])
#loc1986 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_15_project_layer_call_and_return_conditional_losses_10274"])
#loc1987 = loc(fused["NoOp:", "NoOp@__inference_block_15_project_layer_call_and_return_conditional_losses_10274"])
#loc1988 = loc(fused["Conv2D:", "Conv2D@__inference_block_15_project_layer_call_and_return_conditional_losses_10274"])
#loc1989 = loc(fused["Identity:", "Identity@__inference_block_15_project_layer_call_and_return_conditional_losses_10274"])
#loc1990 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_15_project_layer_call_and_return_conditional_losses_22402"])
#loc1991 = loc(fused["NoOp:", "NoOp@__inference_block_15_project_layer_call_and_return_conditional_losses_22402"])
#loc1992 = loc(fused["Conv2D:", "Conv2D@__inference_block_15_project_layer_call_and_return_conditional_losses_22402"])
#loc1993 = loc(fused["Identity:", "Identity@__inference_block_15_project_layer_call_and_return_conditional_losses_22402"])
#loc1994 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_15_project_layer_call_fn_22395"])
#loc1995 = loc(fused["NoOp:", "NoOp@__inference_block_15_project_layer_call_fn_22395"])
#loc1996 = loc(fused["Identity:", "Identity@__inference_block_15_project_layer_call_fn_22395"])
#loc1997 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22622"])
#loc1998 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22622"])
#loc1999 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22622"])
#loc2000 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22622"])
#loc2001 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22622"])
#loc2002 = loc(fused["NoOp:", "NoOp@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22622"])
#loc2003 = loc(fused["Identity:", "Identity@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22622"])
#loc2004 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22640"])
#loc2005 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22640"])
#loc2006 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22640"])
#loc2007 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22640"])
#loc2008 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22640"])
#loc2009 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22640"])
#loc2010 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22640"])
#loc2011 = loc(fused["NoOp:", "NoOp@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22640"])
#loc2012 = loc(fused["Identity:", "Identity@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_22640"])
#loc2013 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8805"])
#loc2014 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8805"])
#loc2015 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8805"])
#loc2016 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8805"])
#loc2017 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8805"])
#loc2018 = loc(fused["NoOp:", "NoOp@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8805"])
#loc2019 = loc(fused["Identity:", "Identity@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8805"])
#loc2020 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8836"])
#loc2021 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8836"])
#loc2022 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8836"])
#loc2023 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8836"])
#loc2024 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8836"])
#loc2025 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8836"])
#loc2026 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8836"])
#loc2027 = loc(fused["NoOp:", "NoOp@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8836"])
#loc2028 = loc(fused["Identity:", "Identity@__inference_block_16_depthwise_BN_layer_call_and_return_conditional_losses_8836"])
#loc2029 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_16_depthwise_BN_layer_call_fn_22591"])
#loc2030 = loc(fused["NoOp:", "NoOp@__inference_block_16_depthwise_BN_layer_call_fn_22591"])
#loc2031 = loc(fused["Identity:", "Identity@__inference_block_16_depthwise_BN_layer_call_fn_22591"])
#loc2032 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_16_depthwise_BN_layer_call_fn_22604"])
#loc2033 = loc(fused["NoOp:", "NoOp@__inference_block_16_depthwise_BN_layer_call_fn_22604"])
#loc2034 = loc(fused["Identity:", "Identity@__inference_block_16_depthwise_BN_layer_call_fn_22604"])
#loc2035 = loc(fused["Const:", "depthwise/Shape@__inference_block_16_depthwise_layer_call_and_return_conditional_losses_10331"])
#loc2036 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_16_depthwise_layer_call_and_return_conditional_losses_10331"])
#loc2037 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_16_depthwise_layer_call_and_return_conditional_losses_10331"])
#loc2038 = loc(fused["NoOp:", "NoOp@__inference_block_16_depthwise_layer_call_and_return_conditional_losses_10331"])
#loc2039 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_16_depthwise_layer_call_and_return_conditional_losses_10331"])
#loc2040 = loc(fused["Identity:", "Identity@__inference_block_16_depthwise_layer_call_and_return_conditional_losses_10331"])
#loc2041 = loc(fused["Const:", "depthwise/Shape@__inference_block_16_depthwise_layer_call_and_return_conditional_losses_22578"])
#loc2042 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_16_depthwise_layer_call_and_return_conditional_losses_22578"])
#loc2043 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_16_depthwise_layer_call_and_return_conditional_losses_22578"])
#loc2044 = loc(fused["NoOp:", "NoOp@__inference_block_16_depthwise_layer_call_and_return_conditional_losses_22578"])
#loc2045 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_16_depthwise_layer_call_and_return_conditional_losses_22578"])
#loc2046 = loc(fused["Identity:", "Identity@__inference_block_16_depthwise_layer_call_and_return_conditional_losses_22578"])
#loc2047 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_16_depthwise_layer_call_fn_22569"])
#loc2048 = loc(fused["NoOp:", "NoOp@__inference_block_16_depthwise_layer_call_fn_22569"])
#loc2049 = loc(fused["Identity:", "Identity@__inference_block_16_depthwise_layer_call_fn_22569"])
#loc2050 = loc(fused["Relu6:", "Relu6@__inference_block_16_depthwise_relu_layer_call_and_return_conditional_losses_10349"])
#loc2051 = loc(fused["Identity:", "Identity@__inference_block_16_depthwise_relu_layer_call_and_return_conditional_losses_10349"])
#loc2052 = loc(fused["Relu6:", "Relu6@__inference_block_16_depthwise_relu_layer_call_and_return_conditional_losses_22650"])
#loc2053 = loc(fused["Identity:", "Identity@__inference_block_16_depthwise_relu_layer_call_and_return_conditional_losses_22650"])
#loc2054 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_16_depthwise_relu_layer_call_fn_22645"])
#loc2055 = loc(fused["Identity:", "Identity@__inference_block_16_depthwise_relu_layer_call_fn_22645"])
#loc2056 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22534"])
#loc2057 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22534"])
#loc2058 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22534"])
#loc2059 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22534"])
#loc2060 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22534"])
#loc2061 = loc(fused["NoOp:", "NoOp@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22534"])
#loc2062 = loc(fused["Identity:", "Identity@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22534"])
#loc2063 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22552"])
#loc2064 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22552"])
#loc2065 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22552"])
#loc2066 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22552"])
#loc2067 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22552"])
#loc2068 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22552"])
#loc2069 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22552"])
#loc2070 = loc(fused["NoOp:", "NoOp@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22552"])
#loc2071 = loc(fused["Identity:", "Identity@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_22552"])
#loc2072 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8741"])
#loc2073 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8741"])
#loc2074 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8741"])
#loc2075 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8741"])
#loc2076 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8741"])
#loc2077 = loc(fused["NoOp:", "NoOp@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8741"])
#loc2078 = loc(fused["Identity:", "Identity@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8741"])
#loc2079 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8772"])
#loc2080 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8772"])
#loc2081 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8772"])
#loc2082 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8772"])
#loc2083 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8772"])
#loc2084 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8772"])
#loc2085 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8772"])
#loc2086 = loc(fused["NoOp:", "NoOp@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8772"])
#loc2087 = loc(fused["Identity:", "Identity@__inference_block_16_expand_BN_layer_call_and_return_conditional_losses_8772"])
#loc2088 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_16_expand_BN_layer_call_fn_22503"])
#loc2089 = loc(fused["NoOp:", "NoOp@__inference_block_16_expand_BN_layer_call_fn_22503"])
#loc2090 = loc(fused["Identity:", "Identity@__inference_block_16_expand_BN_layer_call_fn_22503"])
#loc2091 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_16_expand_BN_layer_call_fn_22516"])
#loc2092 = loc(fused["NoOp:", "NoOp@__inference_block_16_expand_BN_layer_call_fn_22516"])
#loc2093 = loc(fused["Identity:", "Identity@__inference_block_16_expand_BN_layer_call_fn_22516"])
#loc2094 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_16_expand_layer_call_and_return_conditional_losses_10302"])
#loc2095 = loc(fused["NoOp:", "NoOp@__inference_block_16_expand_layer_call_and_return_conditional_losses_10302"])
#loc2096 = loc(fused["Conv2D:", "Conv2D@__inference_block_16_expand_layer_call_and_return_conditional_losses_10302"])
#loc2097 = loc(fused["Identity:", "Identity@__inference_block_16_expand_layer_call_and_return_conditional_losses_10302"])
#loc2098 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_16_expand_layer_call_and_return_conditional_losses_22490"])
#loc2099 = loc(fused["NoOp:", "NoOp@__inference_block_16_expand_layer_call_and_return_conditional_losses_22490"])
#loc2100 = loc(fused["Conv2D:", "Conv2D@__inference_block_16_expand_layer_call_and_return_conditional_losses_22490"])
#loc2101 = loc(fused["Identity:", "Identity@__inference_block_16_expand_layer_call_and_return_conditional_losses_22490"])
#loc2102 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_16_expand_layer_call_fn_22483"])
#loc2103 = loc(fused["NoOp:", "NoOp@__inference_block_16_expand_layer_call_fn_22483"])
#loc2104 = loc(fused["Identity:", "Identity@__inference_block_16_expand_layer_call_fn_22483"])
#loc2105 = loc(fused["Relu6:", "Relu6@__inference_block_16_expand_relu_layer_call_and_return_conditional_losses_10320"])
#loc2106 = loc(fused["Identity:", "Identity@__inference_block_16_expand_relu_layer_call_and_return_conditional_losses_10320"])
#loc2107 = loc(fused["Relu6:", "Relu6@__inference_block_16_expand_relu_layer_call_and_return_conditional_losses_22562"])
#loc2108 = loc(fused["Identity:", "Identity@__inference_block_16_expand_relu_layer_call_and_return_conditional_losses_22562"])
#loc2109 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_16_expand_relu_layer_call_fn_22557"])
#loc2110 = loc(fused["Identity:", "Identity@__inference_block_16_expand_relu_layer_call_fn_22557"])
#loc2111 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22708"])
#loc2112 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22708"])
#loc2113 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22708"])
#loc2114 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22708"])
#loc2115 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22708"])
#loc2116 = loc(fused["NoOp:", "NoOp@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22708"])
#loc2117 = loc(fused["Identity:", "Identity@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22708"])
#loc2118 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22726"])
#loc2119 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22726"])
#loc2120 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22726"])
#loc2121 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22726"])
#loc2122 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22726"])
#loc2123 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22726"])
#loc2124 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22726"])
#loc2125 = loc(fused["NoOp:", "NoOp@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22726"])
#loc2126 = loc(fused["Identity:", "Identity@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_22726"])
#loc2127 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8869"])
#loc2128 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8869"])
#loc2129 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8869"])
#loc2130 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8869"])
#loc2131 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8869"])
#loc2132 = loc(fused["NoOp:", "NoOp@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8869"])
#loc2133 = loc(fused["Identity:", "Identity@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8869"])
#loc2134 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8900"])
#loc2135 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8900"])
#loc2136 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8900"])
#loc2137 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8900"])
#loc2138 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8900"])
#loc2139 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8900"])
#loc2140 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8900"])
#loc2141 = loc(fused["NoOp:", "NoOp@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8900"])
#loc2142 = loc(fused["Identity:", "Identity@__inference_block_16_project_BN_layer_call_and_return_conditional_losses_8900"])
#loc2143 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_16_project_BN_layer_call_fn_22677"])
#loc2144 = loc(fused["NoOp:", "NoOp@__inference_block_16_project_BN_layer_call_fn_22677"])
#loc2145 = loc(fused["Identity:", "Identity@__inference_block_16_project_BN_layer_call_fn_22677"])
#loc2146 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_16_project_BN_layer_call_fn_22690"])
#loc2147 = loc(fused["NoOp:", "NoOp@__inference_block_16_project_BN_layer_call_fn_22690"])
#loc2148 = loc(fused["Identity:", "Identity@__inference_block_16_project_BN_layer_call_fn_22690"])
#loc2149 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_16_project_layer_call_and_return_conditional_losses_10358"])
#loc2150 = loc(fused["NoOp:", "NoOp@__inference_block_16_project_layer_call_and_return_conditional_losses_10358"])
#loc2151 = loc(fused["Conv2D:", "Conv2D@__inference_block_16_project_layer_call_and_return_conditional_losses_10358"])
#loc2152 = loc(fused["Identity:", "Identity@__inference_block_16_project_layer_call_and_return_conditional_losses_10358"])
#loc2153 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_16_project_layer_call_and_return_conditional_losses_22664"])
#loc2154 = loc(fused["NoOp:", "NoOp@__inference_block_16_project_layer_call_and_return_conditional_losses_22664"])
#loc2155 = loc(fused["Conv2D:", "Conv2D@__inference_block_16_project_layer_call_and_return_conditional_losses_22664"])
#loc2156 = loc(fused["Identity:", "Identity@__inference_block_16_project_layer_call_and_return_conditional_losses_22664"])
#loc2157 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_16_project_layer_call_fn_22657"])
#loc2158 = loc(fused["NoOp:", "NoOp@__inference_block_16_project_layer_call_fn_22657"])
#loc2159 = loc(fused["Identity:", "Identity@__inference_block_16_project_layer_call_fn_22657"])
#loc2160 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18719"])
#loc2161 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18719"])
#loc2162 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18719"])
#loc2163 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18719"])
#loc2164 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18719"])
#loc2165 = loc(fused["NoOp:", "NoOp@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18719"])
#loc2166 = loc(fused["Identity:", "Identity@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18719"])
#loc2167 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18737"])
#loc2168 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18737"])
#loc2169 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18737"])
#loc2170 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18737"])
#loc2171 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18737"])
#loc2172 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18737"])
#loc2173 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18737"])
#loc2174 = loc(fused["NoOp:", "NoOp@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18737"])
#loc2175 = loc(fused["Identity:", "Identity@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_18737"])
#loc2176 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5886"])
#loc2177 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5886"])
#loc2178 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5886"])
#loc2179 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5886"])
#loc2180 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5886"])
#loc2181 = loc(fused["NoOp:", "NoOp@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5886"])
#loc2182 = loc(fused["Identity:", "Identity@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5886"])
#loc2183 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5917"])
#loc2184 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5917"])
#loc2185 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5917"])
#loc2186 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5917"])
#loc2187 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5917"])
#loc2188 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5917"])
#loc2189 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5917"])
#loc2190 = loc(fused["NoOp:", "NoOp@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5917"])
#loc2191 = loc(fused["Identity:", "Identity@__inference_block_1_depthwise_BN_layer_call_and_return_conditional_losses_5917"])
#loc2192 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_1_depthwise_BN_layer_call_fn_18688"])
#loc2193 = loc(fused["NoOp:", "NoOp@__inference_block_1_depthwise_BN_layer_call_fn_18688"])
#loc2194 = loc(fused["Identity:", "Identity@__inference_block_1_depthwise_BN_layer_call_fn_18688"])
#loc2195 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_1_depthwise_BN_layer_call_fn_18701"])
#loc2196 = loc(fused["NoOp:", "NoOp@__inference_block_1_depthwise_BN_layer_call_fn_18701"])
#loc2197 = loc(fused["Identity:", "Identity@__inference_block_1_depthwise_BN_layer_call_fn_18701"])
#loc2198 = loc(fused["Const:", "depthwise/Shape@__inference_block_1_depthwise_layer_call_and_return_conditional_losses_18675"])
#loc2199 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_1_depthwise_layer_call_and_return_conditional_losses_18675"])
#loc2200 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_1_depthwise_layer_call_and_return_conditional_losses_18675"])
#loc2201 = loc(fused["NoOp:", "NoOp@__inference_block_1_depthwise_layer_call_and_return_conditional_losses_18675"])
#loc2202 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_1_depthwise_layer_call_and_return_conditional_losses_18675"])
#loc2203 = loc(fused["Identity:", "Identity@__inference_block_1_depthwise_layer_call_and_return_conditional_losses_18675"])
#loc2204 = loc(fused["Const:", "depthwise/Shape@__inference_block_1_depthwise_layer_call_and_return_conditional_losses_9108"])
#loc2205 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_1_depthwise_layer_call_and_return_conditional_losses_9108"])
#loc2206 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_1_depthwise_layer_call_and_return_conditional_losses_9108"])
#loc2207 = loc(fused["NoOp:", "NoOp@__inference_block_1_depthwise_layer_call_and_return_conditional_losses_9108"])
#loc2208 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_1_depthwise_layer_call_and_return_conditional_losses_9108"])
#loc2209 = loc(fused["Identity:", "Identity@__inference_block_1_depthwise_layer_call_and_return_conditional_losses_9108"])
#loc2210 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_1_depthwise_layer_call_fn_18666"])
#loc2211 = loc(fused["NoOp:", "NoOp@__inference_block_1_depthwise_layer_call_fn_18666"])
#loc2212 = loc(fused["Identity:", "Identity@__inference_block_1_depthwise_layer_call_fn_18666"])
#loc2213 = loc(fused["Relu6:", "Relu6@__inference_block_1_depthwise_relu_layer_call_and_return_conditional_losses_18747"])
#loc2214 = loc(fused["Identity:", "Identity@__inference_block_1_depthwise_relu_layer_call_and_return_conditional_losses_18747"])
#loc2215 = loc(fused["Relu6:", "Relu6@__inference_block_1_depthwise_relu_layer_call_and_return_conditional_losses_9126"])
#loc2216 = loc(fused["Identity:", "Identity@__inference_block_1_depthwise_relu_layer_call_and_return_conditional_losses_9126"])
#loc2217 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_1_depthwise_relu_layer_call_fn_18742"])
#loc2218 = loc(fused["Identity:", "Identity@__inference_block_1_depthwise_relu_layer_call_fn_18742"])
#loc2219 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18620"])
#loc2220 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18620"])
#loc2221 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18620"])
#loc2222 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18620"])
#loc2223 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18620"])
#loc2224 = loc(fused["NoOp:", "NoOp@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18620"])
#loc2225 = loc(fused["Identity:", "Identity@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18620"])
#loc2226 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18638"])
#loc2227 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18638"])
#loc2228 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18638"])
#loc2229 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18638"])
#loc2230 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18638"])
#loc2231 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18638"])
#loc2232 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18638"])
#loc2233 = loc(fused["NoOp:", "NoOp@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18638"])
#loc2234 = loc(fused["Identity:", "Identity@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_18638"])
#loc2235 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5809"])
#loc2236 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5809"])
#loc2237 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5809"])
#loc2238 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5809"])
#loc2239 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5809"])
#loc2240 = loc(fused["NoOp:", "NoOp@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5809"])
#loc2241 = loc(fused["Identity:", "Identity@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5809"])
#loc2242 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5840"])
#loc2243 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5840"])
#loc2244 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5840"])
#loc2245 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5840"])
#loc2246 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5840"])
#loc2247 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5840"])
#loc2248 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5840"])
#loc2249 = loc(fused["NoOp:", "NoOp@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5840"])
#loc2250 = loc(fused["Identity:", "Identity@__inference_block_1_expand_BN_layer_call_and_return_conditional_losses_5840"])
#loc2251 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_1_expand_BN_layer_call_fn_18589"])
#loc2252 = loc(fused["NoOp:", "NoOp@__inference_block_1_expand_BN_layer_call_fn_18589"])
#loc2253 = loc(fused["Identity:", "Identity@__inference_block_1_expand_BN_layer_call_fn_18589"])
#loc2254 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_1_expand_BN_layer_call_fn_18602"])
#loc2255 = loc(fused["NoOp:", "NoOp@__inference_block_1_expand_BN_layer_call_fn_18602"])
#loc2256 = loc(fused["Identity:", "Identity@__inference_block_1_expand_BN_layer_call_fn_18602"])
#loc2257 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_1_expand_layer_call_and_return_conditional_losses_18576"])
#loc2258 = loc(fused["NoOp:", "NoOp@__inference_block_1_expand_layer_call_and_return_conditional_losses_18576"])
#loc2259 = loc(fused["Conv2D:", "Conv2D@__inference_block_1_expand_layer_call_and_return_conditional_losses_18576"])
#loc2260 = loc(fused["Identity:", "Identity@__inference_block_1_expand_layer_call_and_return_conditional_losses_18576"])
#loc2261 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_1_expand_layer_call_and_return_conditional_losses_9078"])
#loc2262 = loc(fused["NoOp:", "NoOp@__inference_block_1_expand_layer_call_and_return_conditional_losses_9078"])
#loc2263 = loc(fused["Conv2D:", "Conv2D@__inference_block_1_expand_layer_call_and_return_conditional_losses_9078"])
#loc2264 = loc(fused["Identity:", "Identity@__inference_block_1_expand_layer_call_and_return_conditional_losses_9078"])
#loc2265 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_1_expand_layer_call_fn_18569"])
#loc2266 = loc(fused["NoOp:", "NoOp@__inference_block_1_expand_layer_call_fn_18569"])
#loc2267 = loc(fused["Identity:", "Identity@__inference_block_1_expand_layer_call_fn_18569"])
#loc2268 = loc(fused["Relu6:", "Relu6@__inference_block_1_expand_relu_layer_call_and_return_conditional_losses_18648"])
#loc2269 = loc(fused["Identity:", "Identity@__inference_block_1_expand_relu_layer_call_and_return_conditional_losses_18648"])
#loc2270 = loc(fused["Relu6:", "Relu6@__inference_block_1_expand_relu_layer_call_and_return_conditional_losses_9096"])
#loc2271 = loc(fused["Identity:", "Identity@__inference_block_1_expand_relu_layer_call_and_return_conditional_losses_9096"])
#loc2272 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_1_expand_relu_layer_call_fn_18643"])
#loc2273 = loc(fused["Identity:", "Identity@__inference_block_1_expand_relu_layer_call_fn_18643"])
#loc2274 = loc(fused["Const:", "Pad/paddings@__inference_block_1_pad_layer_call_and_return_conditional_losses_18659"])
#loc2275 = loc(fused["Pad:", "Pad@__inference_block_1_pad_layer_call_and_return_conditional_losses_18659"])
#loc2276 = loc(fused["Identity:", "Identity@__inference_block_1_pad_layer_call_and_return_conditional_losses_18659"])
#loc2277 = loc(fused["Const:", "Pad/paddings@__inference_block_1_pad_layer_call_and_return_conditional_losses_5861"])
#loc2278 = loc(fused["Pad:", "Pad@__inference_block_1_pad_layer_call_and_return_conditional_losses_5861"])
#loc2279 = loc(fused["Identity:", "Identity@__inference_block_1_pad_layer_call_and_return_conditional_losses_5861"])
#loc2280 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_1_pad_layer_call_fn_18653"])
#loc2281 = loc(fused["Identity:", "Identity@__inference_block_1_pad_layer_call_fn_18653"])
#loc2282 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18805"])
#loc2283 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18805"])
#loc2284 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18805"])
#loc2285 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18805"])
#loc2286 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18805"])
#loc2287 = loc(fused["NoOp:", "NoOp@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18805"])
#loc2288 = loc(fused["Identity:", "Identity@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18805"])
#loc2289 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18823"])
#loc2290 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18823"])
#loc2291 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18823"])
#loc2292 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18823"])
#loc2293 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18823"])
#loc2294 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18823"])
#loc2295 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18823"])
#loc2296 = loc(fused["NoOp:", "NoOp@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18823"])
#loc2297 = loc(fused["Identity:", "Identity@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_18823"])
#loc2298 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5950"])
#loc2299 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5950"])
#loc2300 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5950"])
#loc2301 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5950"])
#loc2302 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5950"])
#loc2303 = loc(fused["NoOp:", "NoOp@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5950"])
#loc2304 = loc(fused["Identity:", "Identity@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5950"])
#loc2305 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5981"])
#loc2306 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5981"])
#loc2307 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5981"])
#loc2308 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5981"])
#loc2309 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5981"])
#loc2310 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5981"])
#loc2311 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5981"])
#loc2312 = loc(fused["NoOp:", "NoOp@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5981"])
#loc2313 = loc(fused["Identity:", "Identity@__inference_block_1_project_BN_layer_call_and_return_conditional_losses_5981"])
#loc2314 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_1_project_BN_layer_call_fn_18774"])
#loc2315 = loc(fused["NoOp:", "NoOp@__inference_block_1_project_BN_layer_call_fn_18774"])
#loc2316 = loc(fused["Identity:", "Identity@__inference_block_1_project_BN_layer_call_fn_18774"])
#loc2317 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_1_project_BN_layer_call_fn_18787"])
#loc2318 = loc(fused["NoOp:", "NoOp@__inference_block_1_project_BN_layer_call_fn_18787"])
#loc2319 = loc(fused["Identity:", "Identity@__inference_block_1_project_BN_layer_call_fn_18787"])
#loc2320 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_1_project_layer_call_and_return_conditional_losses_18761"])
#loc2321 = loc(fused["NoOp:", "NoOp@__inference_block_1_project_layer_call_and_return_conditional_losses_18761"])
#loc2322 = loc(fused["Conv2D:", "Conv2D@__inference_block_1_project_layer_call_and_return_conditional_losses_18761"])
#loc2323 = loc(fused["Identity:", "Identity@__inference_block_1_project_layer_call_and_return_conditional_losses_18761"])
#loc2324 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_1_project_layer_call_and_return_conditional_losses_9135"])
#loc2325 = loc(fused["NoOp:", "NoOp@__inference_block_1_project_layer_call_and_return_conditional_losses_9135"])
#loc2326 = loc(fused["Conv2D:", "Conv2D@__inference_block_1_project_layer_call_and_return_conditional_losses_9135"])
#loc2327 = loc(fused["Identity:", "Identity@__inference_block_1_project_layer_call_and_return_conditional_losses_9135"])
#loc2328 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_1_project_layer_call_fn_18754"])
#loc2329 = loc(fused["NoOp:", "NoOp@__inference_block_1_project_layer_call_fn_18754"])
#loc2330 = loc(fused["Identity:", "Identity@__inference_block_1_project_layer_call_fn_18754"])
#loc2331 = loc(fused["AddV2:", "add@__inference_block_2_add_layer_call_and_return_conditional_losses_19085"])
#loc2332 = loc(fused["Identity:", "Identity@__inference_block_2_add_layer_call_and_return_conditional_losses_19085"])
#loc2333 = loc(fused["AddV2:", "add@__inference_block_2_add_layer_call_and_return_conditional_losses_9230"])
#loc2334 = loc(fused["Identity:", "Identity@__inference_block_2_add_layer_call_and_return_conditional_losses_9230"])
#loc2335 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_2_add_layer_call_fn_19079"])
#loc2336 = loc(fused["Identity:", "Identity@__inference_block_2_add_layer_call_fn_19079"])
#loc2337 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18969"])
#loc2338 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18969"])
#loc2339 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18969"])
#loc2340 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18969"])
#loc2341 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18969"])
#loc2342 = loc(fused["NoOp:", "NoOp@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18969"])
#loc2343 = loc(fused["Identity:", "Identity@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18969"])
#loc2344 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18987"])
#loc2345 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18987"])
#loc2346 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18987"])
#loc2347 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18987"])
#loc2348 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18987"])
#loc2349 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18987"])
#loc2350 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18987"])
#loc2351 = loc(fused["NoOp:", "NoOp@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18987"])
#loc2352 = loc(fused["Identity:", "Identity@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_18987"])
#loc2353 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6078"])
#loc2354 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6078"])
#loc2355 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6078"])
#loc2356 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6078"])
#loc2357 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6078"])
#loc2358 = loc(fused["NoOp:", "NoOp@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6078"])
#loc2359 = loc(fused["Identity:", "Identity@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6078"])
#loc2360 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6109"])
#loc2361 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6109"])
#loc2362 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6109"])
#loc2363 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6109"])
#loc2364 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6109"])
#loc2365 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6109"])
#loc2366 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6109"])
#loc2367 = loc(fused["NoOp:", "NoOp@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6109"])
#loc2368 = loc(fused["Identity:", "Identity@__inference_block_2_depthwise_BN_layer_call_and_return_conditional_losses_6109"])
#loc2369 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_2_depthwise_BN_layer_call_fn_18938"])
#loc2370 = loc(fused["NoOp:", "NoOp@__inference_block_2_depthwise_BN_layer_call_fn_18938"])
#loc2371 = loc(fused["Identity:", "Identity@__inference_block_2_depthwise_BN_layer_call_fn_18938"])
#loc2372 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_2_depthwise_BN_layer_call_fn_18951"])
#loc2373 = loc(fused["NoOp:", "NoOp@__inference_block_2_depthwise_BN_layer_call_fn_18951"])
#loc2374 = loc(fused["Identity:", "Identity@__inference_block_2_depthwise_BN_layer_call_fn_18951"])
#loc2375 = loc(fused["Const:", "depthwise/Shape@__inference_block_2_depthwise_layer_call_and_return_conditional_losses_18925"])
#loc2376 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_2_depthwise_layer_call_and_return_conditional_losses_18925"])
#loc2377 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_2_depthwise_layer_call_and_return_conditional_losses_18925"])
#loc2378 = loc(fused["NoOp:", "NoOp@__inference_block_2_depthwise_layer_call_and_return_conditional_losses_18925"])
#loc2379 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_2_depthwise_layer_call_and_return_conditional_losses_18925"])
#loc2380 = loc(fused["Identity:", "Identity@__inference_block_2_depthwise_layer_call_and_return_conditional_losses_18925"])
#loc2381 = loc(fused["Const:", "depthwise/Shape@__inference_block_2_depthwise_layer_call_and_return_conditional_losses_9184"])
#loc2382 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_2_depthwise_layer_call_and_return_conditional_losses_9184"])
#loc2383 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_2_depthwise_layer_call_and_return_conditional_losses_9184"])
#loc2384 = loc(fused["NoOp:", "NoOp@__inference_block_2_depthwise_layer_call_and_return_conditional_losses_9184"])
#loc2385 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_2_depthwise_layer_call_and_return_conditional_losses_9184"])
#loc2386 = loc(fused["Identity:", "Identity@__inference_block_2_depthwise_layer_call_and_return_conditional_losses_9184"])
#loc2387 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_2_depthwise_layer_call_fn_18916"])
#loc2388 = loc(fused["NoOp:", "NoOp@__inference_block_2_depthwise_layer_call_fn_18916"])
#loc2389 = loc(fused["Identity:", "Identity@__inference_block_2_depthwise_layer_call_fn_18916"])
#loc2390 = loc(fused["Relu6:", "Relu6@__inference_block_2_depthwise_relu_layer_call_and_return_conditional_losses_18997"])
#loc2391 = loc(fused["Identity:", "Identity@__inference_block_2_depthwise_relu_layer_call_and_return_conditional_losses_18997"])
#loc2392 = loc(fused["Relu6:", "Relu6@__inference_block_2_depthwise_relu_layer_call_and_return_conditional_losses_9202"])
#loc2393 = loc(fused["Identity:", "Identity@__inference_block_2_depthwise_relu_layer_call_and_return_conditional_losses_9202"])
#loc2394 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_2_depthwise_relu_layer_call_fn_18992"])
#loc2395 = loc(fused["Identity:", "Identity@__inference_block_2_depthwise_relu_layer_call_fn_18992"])
#loc2396 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18881"])
#loc2397 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18881"])
#loc2398 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18881"])
#loc2399 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18881"])
#loc2400 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18881"])
#loc2401 = loc(fused["NoOp:", "NoOp@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18881"])
#loc2402 = loc(fused["Identity:", "Identity@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18881"])
#loc2403 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18899"])
#loc2404 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18899"])
#loc2405 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18899"])
#loc2406 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18899"])
#loc2407 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18899"])
#loc2408 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18899"])
#loc2409 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18899"])
#loc2410 = loc(fused["NoOp:", "NoOp@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18899"])
#loc2411 = loc(fused["Identity:", "Identity@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_18899"])
#loc2412 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6014"])
#loc2413 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6014"])
#loc2414 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6014"])
#loc2415 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6014"])
#loc2416 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6014"])
#loc2417 = loc(fused["NoOp:", "NoOp@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6014"])
#loc2418 = loc(fused["Identity:", "Identity@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6014"])
#loc2419 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6045"])
#loc2420 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6045"])
#loc2421 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6045"])
#loc2422 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6045"])
#loc2423 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6045"])
#loc2424 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6045"])
#loc2425 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6045"])
#loc2426 = loc(fused["NoOp:", "NoOp@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6045"])
#loc2427 = loc(fused["Identity:", "Identity@__inference_block_2_expand_BN_layer_call_and_return_conditional_losses_6045"])
#loc2428 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_2_expand_BN_layer_call_fn_18850"])
#loc2429 = loc(fused["NoOp:", "NoOp@__inference_block_2_expand_BN_layer_call_fn_18850"])
#loc2430 = loc(fused["Identity:", "Identity@__inference_block_2_expand_BN_layer_call_fn_18850"])
#loc2431 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_2_expand_BN_layer_call_fn_18863"])
#loc2432 = loc(fused["NoOp:", "NoOp@__inference_block_2_expand_BN_layer_call_fn_18863"])
#loc2433 = loc(fused["Identity:", "Identity@__inference_block_2_expand_BN_layer_call_fn_18863"])
#loc2434 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_2_expand_layer_call_and_return_conditional_losses_18837"])
#loc2435 = loc(fused["NoOp:", "NoOp@__inference_block_2_expand_layer_call_and_return_conditional_losses_18837"])
#loc2436 = loc(fused["Conv2D:", "Conv2D@__inference_block_2_expand_layer_call_and_return_conditional_losses_18837"])
#loc2437 = loc(fused["Identity:", "Identity@__inference_block_2_expand_layer_call_and_return_conditional_losses_18837"])
#loc2438 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_2_expand_layer_call_and_return_conditional_losses_9155"])
#loc2439 = loc(fused["NoOp:", "NoOp@__inference_block_2_expand_layer_call_and_return_conditional_losses_9155"])
#loc2440 = loc(fused["Conv2D:", "Conv2D@__inference_block_2_expand_layer_call_and_return_conditional_losses_9155"])
#loc2441 = loc(fused["Identity:", "Identity@__inference_block_2_expand_layer_call_and_return_conditional_losses_9155"])
#loc2442 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_2_expand_layer_call_fn_18830"])
#loc2443 = loc(fused["NoOp:", "NoOp@__inference_block_2_expand_layer_call_fn_18830"])
#loc2444 = loc(fused["Identity:", "Identity@__inference_block_2_expand_layer_call_fn_18830"])
#loc2445 = loc(fused["Relu6:", "Relu6@__inference_block_2_expand_relu_layer_call_and_return_conditional_losses_18909"])
#loc2446 = loc(fused["Identity:", "Identity@__inference_block_2_expand_relu_layer_call_and_return_conditional_losses_18909"])
#loc2447 = loc(fused["Relu6:", "Relu6@__inference_block_2_expand_relu_layer_call_and_return_conditional_losses_9173"])
#loc2448 = loc(fused["Identity:", "Identity@__inference_block_2_expand_relu_layer_call_and_return_conditional_losses_9173"])
#loc2449 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_2_expand_relu_layer_call_fn_18904"])
#loc2450 = loc(fused["Identity:", "Identity@__inference_block_2_expand_relu_layer_call_fn_18904"])
#loc2451 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19055"])
#loc2452 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19055"])
#loc2453 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19055"])
#loc2454 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19055"])
#loc2455 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19055"])
#loc2456 = loc(fused["NoOp:", "NoOp@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19055"])
#loc2457 = loc(fused["Identity:", "Identity@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19055"])
#loc2458 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19073"])
#loc2459 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19073"])
#loc2460 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19073"])
#loc2461 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19073"])
#loc2462 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19073"])
#loc2463 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19073"])
#loc2464 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19073"])
#loc2465 = loc(fused["NoOp:", "NoOp@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19073"])
#loc2466 = loc(fused["Identity:", "Identity@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_19073"])
#loc2467 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6142"])
#loc2468 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6142"])
#loc2469 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6142"])
#loc2470 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6142"])
#loc2471 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6142"])
#loc2472 = loc(fused["NoOp:", "NoOp@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6142"])
#loc2473 = loc(fused["Identity:", "Identity@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6142"])
#loc2474 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6173"])
#loc2475 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6173"])
#loc2476 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6173"])
#loc2477 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6173"])
#loc2478 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6173"])
#loc2479 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6173"])
#loc2480 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6173"])
#loc2481 = loc(fused["NoOp:", "NoOp@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6173"])
#loc2482 = loc(fused["Identity:", "Identity@__inference_block_2_project_BN_layer_call_and_return_conditional_losses_6173"])
#loc2483 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_2_project_BN_layer_call_fn_19024"])
#loc2484 = loc(fused["NoOp:", "NoOp@__inference_block_2_project_BN_layer_call_fn_19024"])
#loc2485 = loc(fused["Identity:", "Identity@__inference_block_2_project_BN_layer_call_fn_19024"])
#loc2486 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_2_project_BN_layer_call_fn_19037"])
#loc2487 = loc(fused["NoOp:", "NoOp@__inference_block_2_project_BN_layer_call_fn_19037"])
#loc2488 = loc(fused["Identity:", "Identity@__inference_block_2_project_BN_layer_call_fn_19037"])
#loc2489 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_2_project_layer_call_and_return_conditional_losses_19011"])
#loc2490 = loc(fused["NoOp:", "NoOp@__inference_block_2_project_layer_call_and_return_conditional_losses_19011"])
#loc2491 = loc(fused["Conv2D:", "Conv2D@__inference_block_2_project_layer_call_and_return_conditional_losses_19011"])
#loc2492 = loc(fused["Identity:", "Identity@__inference_block_2_project_layer_call_and_return_conditional_losses_19011"])
#loc2493 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_2_project_layer_call_and_return_conditional_losses_9211"])
#loc2494 = loc(fused["NoOp:", "NoOp@__inference_block_2_project_layer_call_and_return_conditional_losses_9211"])
#loc2495 = loc(fused["Conv2D:", "Conv2D@__inference_block_2_project_layer_call_and_return_conditional_losses_9211"])
#loc2496 = loc(fused["Identity:", "Identity@__inference_block_2_project_layer_call_and_return_conditional_losses_9211"])
#loc2497 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_2_project_layer_call_fn_19004"])
#loc2498 = loc(fused["NoOp:", "NoOp@__inference_block_2_project_layer_call_fn_19004"])
#loc2499 = loc(fused["Identity:", "Identity@__inference_block_2_project_layer_call_fn_19004"])
#loc2500 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19242"])
#loc2501 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19242"])
#loc2502 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19242"])
#loc2503 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19242"])
#loc2504 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19242"])
#loc2505 = loc(fused["NoOp:", "NoOp@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19242"])
#loc2506 = loc(fused["Identity:", "Identity@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19242"])
#loc2507 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19260"])
#loc2508 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19260"])
#loc2509 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19260"])
#loc2510 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19260"])
#loc2511 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19260"])
#loc2512 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19260"])
#loc2513 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19260"])
#loc2514 = loc(fused["NoOp:", "NoOp@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19260"])
#loc2515 = loc(fused["Identity:", "Identity@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_19260"])
#loc2516 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6283"])
#loc2517 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6283"])
#loc2518 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6283"])
#loc2519 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6283"])
#loc2520 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6283"])
#loc2521 = loc(fused["NoOp:", "NoOp@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6283"])
#loc2522 = loc(fused["Identity:", "Identity@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6283"])
#loc2523 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6314"])
#loc2524 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6314"])
#loc2525 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6314"])
#loc2526 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6314"])
#loc2527 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6314"])
#loc2528 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6314"])
#loc2529 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6314"])
#loc2530 = loc(fused["NoOp:", "NoOp@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6314"])
#loc2531 = loc(fused["Identity:", "Identity@__inference_block_3_depthwise_BN_layer_call_and_return_conditional_losses_6314"])
#loc2532 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_3_depthwise_BN_layer_call_fn_19211"])
#loc2533 = loc(fused["NoOp:", "NoOp@__inference_block_3_depthwise_BN_layer_call_fn_19211"])
#loc2534 = loc(fused["Identity:", "Identity@__inference_block_3_depthwise_BN_layer_call_fn_19211"])
#loc2535 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_3_depthwise_BN_layer_call_fn_19224"])
#loc2536 = loc(fused["NoOp:", "NoOp@__inference_block_3_depthwise_BN_layer_call_fn_19224"])
#loc2537 = loc(fused["Identity:", "Identity@__inference_block_3_depthwise_BN_layer_call_fn_19224"])
#loc2538 = loc(fused["Const:", "depthwise/Shape@__inference_block_3_depthwise_layer_call_and_return_conditional_losses_19198"])
#loc2539 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_3_depthwise_layer_call_and_return_conditional_losses_19198"])
#loc2540 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_3_depthwise_layer_call_and_return_conditional_losses_19198"])
#loc2541 = loc(fused["NoOp:", "NoOp@__inference_block_3_depthwise_layer_call_and_return_conditional_losses_19198"])
#loc2542 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_3_depthwise_layer_call_and_return_conditional_losses_19198"])
#loc2543 = loc(fused["Identity:", "Identity@__inference_block_3_depthwise_layer_call_and_return_conditional_losses_19198"])
#loc2544 = loc(fused["Const:", "depthwise/Shape@__inference_block_3_depthwise_layer_call_and_return_conditional_losses_9269"])
#loc2545 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_3_depthwise_layer_call_and_return_conditional_losses_9269"])
#loc2546 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_3_depthwise_layer_call_and_return_conditional_losses_9269"])
#loc2547 = loc(fused["NoOp:", "NoOp@__inference_block_3_depthwise_layer_call_and_return_conditional_losses_9269"])
#loc2548 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_3_depthwise_layer_call_and_return_conditional_losses_9269"])
#loc2549 = loc(fused["Identity:", "Identity@__inference_block_3_depthwise_layer_call_and_return_conditional_losses_9269"])
#loc2550 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_3_depthwise_layer_call_fn_19189"])
#loc2551 = loc(fused["NoOp:", "NoOp@__inference_block_3_depthwise_layer_call_fn_19189"])
#loc2552 = loc(fused["Identity:", "Identity@__inference_block_3_depthwise_layer_call_fn_19189"])
#loc2553 = loc(fused["Relu6:", "Relu6@__inference_block_3_depthwise_relu_layer_call_and_return_conditional_losses_19270"])
#loc2554 = loc(fused["Identity:", "Identity@__inference_block_3_depthwise_relu_layer_call_and_return_conditional_losses_19270"])
#loc2555 = loc(fused["Relu6:", "Relu6@__inference_block_3_depthwise_relu_layer_call_and_return_conditional_losses_9287"])
#loc2556 = loc(fused["Identity:", "Identity@__inference_block_3_depthwise_relu_layer_call_and_return_conditional_losses_9287"])
#loc2557 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_3_depthwise_relu_layer_call_fn_19265"])
#loc2558 = loc(fused["Identity:", "Identity@__inference_block_3_depthwise_relu_layer_call_fn_19265"])
#loc2559 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19143"])
#loc2560 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19143"])
#loc2561 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19143"])
#loc2562 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19143"])
#loc2563 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19143"])
#loc2564 = loc(fused["NoOp:", "NoOp@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19143"])
#loc2565 = loc(fused["Identity:", "Identity@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19143"])
#loc2566 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19161"])
#loc2567 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19161"])
#loc2568 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19161"])
#loc2569 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19161"])
#loc2570 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19161"])
#loc2571 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19161"])
#loc2572 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19161"])
#loc2573 = loc(fused["NoOp:", "NoOp@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19161"])
#loc2574 = loc(fused["Identity:", "Identity@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_19161"])
#loc2575 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6206"])
#loc2576 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6206"])
#loc2577 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6206"])
#loc2578 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6206"])
#loc2579 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6206"])
#loc2580 = loc(fused["NoOp:", "NoOp@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6206"])
#loc2581 = loc(fused["Identity:", "Identity@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6206"])
#loc2582 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6237"])
#loc2583 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6237"])
#loc2584 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6237"])
#loc2585 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6237"])
#loc2586 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6237"])
#loc2587 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6237"])
#loc2588 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6237"])
#loc2589 = loc(fused["NoOp:", "NoOp@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6237"])
#loc2590 = loc(fused["Identity:", "Identity@__inference_block_3_expand_BN_layer_call_and_return_conditional_losses_6237"])
#loc2591 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_3_expand_BN_layer_call_fn_19112"])
#loc2592 = loc(fused["NoOp:", "NoOp@__inference_block_3_expand_BN_layer_call_fn_19112"])
#loc2593 = loc(fused["Identity:", "Identity@__inference_block_3_expand_BN_layer_call_fn_19112"])
#loc2594 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_3_expand_BN_layer_call_fn_19125"])
#loc2595 = loc(fused["NoOp:", "NoOp@__inference_block_3_expand_BN_layer_call_fn_19125"])
#loc2596 = loc(fused["Identity:", "Identity@__inference_block_3_expand_BN_layer_call_fn_19125"])
#loc2597 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_3_expand_layer_call_and_return_conditional_losses_19099"])
#loc2598 = loc(fused["NoOp:", "NoOp@__inference_block_3_expand_layer_call_and_return_conditional_losses_19099"])
#loc2599 = loc(fused["Conv2D:", "Conv2D@__inference_block_3_expand_layer_call_and_return_conditional_losses_19099"])
#loc2600 = loc(fused["Identity:", "Identity@__inference_block_3_expand_layer_call_and_return_conditional_losses_19099"])
#loc2601 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_3_expand_layer_call_and_return_conditional_losses_9239"])
#loc2602 = loc(fused["NoOp:", "NoOp@__inference_block_3_expand_layer_call_and_return_conditional_losses_9239"])
#loc2603 = loc(fused["Conv2D:", "Conv2D@__inference_block_3_expand_layer_call_and_return_conditional_losses_9239"])
#loc2604 = loc(fused["Identity:", "Identity@__inference_block_3_expand_layer_call_and_return_conditional_losses_9239"])
#loc2605 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_3_expand_layer_call_fn_19092"])
#loc2606 = loc(fused["NoOp:", "NoOp@__inference_block_3_expand_layer_call_fn_19092"])
#loc2607 = loc(fused["Identity:", "Identity@__inference_block_3_expand_layer_call_fn_19092"])
#loc2608 = loc(fused["Relu6:", "Relu6@__inference_block_3_expand_relu_layer_call_and_return_conditional_losses_19171"])
#loc2609 = loc(fused["Identity:", "Identity@__inference_block_3_expand_relu_layer_call_and_return_conditional_losses_19171"])
#loc2610 = loc(fused["Relu6:", "Relu6@__inference_block_3_expand_relu_layer_call_and_return_conditional_losses_9257"])
#loc2611 = loc(fused["Identity:", "Identity@__inference_block_3_expand_relu_layer_call_and_return_conditional_losses_9257"])
#loc2612 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_3_expand_relu_layer_call_fn_19166"])
#loc2613 = loc(fused["Identity:", "Identity@__inference_block_3_expand_relu_layer_call_fn_19166"])
#loc2614 = loc(fused["Const:", "Pad/paddings@__inference_block_3_pad_layer_call_and_return_conditional_losses_19182"])
#loc2615 = loc(fused["Pad:", "Pad@__inference_block_3_pad_layer_call_and_return_conditional_losses_19182"])
#loc2616 = loc(fused["Identity:", "Identity@__inference_block_3_pad_layer_call_and_return_conditional_losses_19182"])
#loc2617 = loc(fused["Const:", "Pad/paddings@__inference_block_3_pad_layer_call_and_return_conditional_losses_6258"])
#loc2618 = loc(fused["Pad:", "Pad@__inference_block_3_pad_layer_call_and_return_conditional_losses_6258"])
#loc2619 = loc(fused["Identity:", "Identity@__inference_block_3_pad_layer_call_and_return_conditional_losses_6258"])
#loc2620 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_3_pad_layer_call_fn_19176"])
#loc2621 = loc(fused["Identity:", "Identity@__inference_block_3_pad_layer_call_fn_19176"])
#loc2622 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19328"])
#loc2623 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19328"])
#loc2624 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19328"])
#loc2625 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19328"])
#loc2626 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19328"])
#loc2627 = loc(fused["NoOp:", "NoOp@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19328"])
#loc2628 = loc(fused["Identity:", "Identity@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19328"])
#loc2629 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19346"])
#loc2630 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19346"])
#loc2631 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19346"])
#loc2632 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19346"])
#loc2633 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19346"])
#loc2634 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19346"])
#loc2635 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19346"])
#loc2636 = loc(fused["NoOp:", "NoOp@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19346"])
#loc2637 = loc(fused["Identity:", "Identity@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_19346"])
#loc2638 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6347"])
#loc2639 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6347"])
#loc2640 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6347"])
#loc2641 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6347"])
#loc2642 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6347"])
#loc2643 = loc(fused["NoOp:", "NoOp@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6347"])
#loc2644 = loc(fused["Identity:", "Identity@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6347"])
#loc2645 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6378"])
#loc2646 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6378"])
#loc2647 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6378"])
#loc2648 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6378"])
#loc2649 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6378"])
#loc2650 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6378"])
#loc2651 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6378"])
#loc2652 = loc(fused["NoOp:", "NoOp@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6378"])
#loc2653 = loc(fused["Identity:", "Identity@__inference_block_3_project_BN_layer_call_and_return_conditional_losses_6378"])
#loc2654 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_3_project_BN_layer_call_fn_19297"])
#loc2655 = loc(fused["NoOp:", "NoOp@__inference_block_3_project_BN_layer_call_fn_19297"])
#loc2656 = loc(fused["Identity:", "Identity@__inference_block_3_project_BN_layer_call_fn_19297"])
#loc2657 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_3_project_BN_layer_call_fn_19310"])
#loc2658 = loc(fused["NoOp:", "NoOp@__inference_block_3_project_BN_layer_call_fn_19310"])
#loc2659 = loc(fused["Identity:", "Identity@__inference_block_3_project_BN_layer_call_fn_19310"])
#loc2660 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_3_project_layer_call_and_return_conditional_losses_19284"])
#loc2661 = loc(fused["NoOp:", "NoOp@__inference_block_3_project_layer_call_and_return_conditional_losses_19284"])
#loc2662 = loc(fused["Conv2D:", "Conv2D@__inference_block_3_project_layer_call_and_return_conditional_losses_19284"])
#loc2663 = loc(fused["Identity:", "Identity@__inference_block_3_project_layer_call_and_return_conditional_losses_19284"])
#loc2664 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_3_project_layer_call_and_return_conditional_losses_9296"])
#loc2665 = loc(fused["NoOp:", "NoOp@__inference_block_3_project_layer_call_and_return_conditional_losses_9296"])
#loc2666 = loc(fused["Conv2D:", "Conv2D@__inference_block_3_project_layer_call_and_return_conditional_losses_9296"])
#loc2667 = loc(fused["Identity:", "Identity@__inference_block_3_project_layer_call_and_return_conditional_losses_9296"])
#loc2668 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_3_project_layer_call_fn_19277"])
#loc2669 = loc(fused["NoOp:", "NoOp@__inference_block_3_project_layer_call_fn_19277"])
#loc2670 = loc(fused["Identity:", "Identity@__inference_block_3_project_layer_call_fn_19277"])
#loc2671 = loc(fused["AddV2:", "add@__inference_block_4_add_layer_call_and_return_conditional_losses_19608"])
#loc2672 = loc(fused["Identity:", "Identity@__inference_block_4_add_layer_call_and_return_conditional_losses_19608"])
#loc2673 = loc(fused["AddV2:", "add@__inference_block_4_add_layer_call_and_return_conditional_losses_9391"])
#loc2674 = loc(fused["Identity:", "Identity@__inference_block_4_add_layer_call_and_return_conditional_losses_9391"])
#loc2675 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_4_add_layer_call_fn_19602"])
#loc2676 = loc(fused["Identity:", "Identity@__inference_block_4_add_layer_call_fn_19602"])
#loc2677 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19492"])
#loc2678 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19492"])
#loc2679 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19492"])
#loc2680 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19492"])
#loc2681 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19492"])
#loc2682 = loc(fused["NoOp:", "NoOp@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19492"])
#loc2683 = loc(fused["Identity:", "Identity@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19492"])
#loc2684 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19510"])
#loc2685 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19510"])
#loc2686 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19510"])
#loc2687 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19510"])
#loc2688 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19510"])
#loc2689 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19510"])
#loc2690 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19510"])
#loc2691 = loc(fused["NoOp:", "NoOp@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19510"])
#loc2692 = loc(fused["Identity:", "Identity@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_19510"])
#loc2693 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6475"])
#loc2694 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6475"])
#loc2695 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6475"])
#loc2696 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6475"])
#loc2697 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6475"])
#loc2698 = loc(fused["NoOp:", "NoOp@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6475"])
#loc2699 = loc(fused["Identity:", "Identity@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6475"])
#loc2700 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6506"])
#loc2701 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6506"])
#loc2702 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6506"])
#loc2703 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6506"])
#loc2704 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6506"])
#loc2705 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6506"])
#loc2706 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6506"])
#loc2707 = loc(fused["NoOp:", "NoOp@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6506"])
#loc2708 = loc(fused["Identity:", "Identity@__inference_block_4_depthwise_BN_layer_call_and_return_conditional_losses_6506"])
#loc2709 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_4_depthwise_BN_layer_call_fn_19461"])
#loc2710 = loc(fused["NoOp:", "NoOp@__inference_block_4_depthwise_BN_layer_call_fn_19461"])
#loc2711 = loc(fused["Identity:", "Identity@__inference_block_4_depthwise_BN_layer_call_fn_19461"])
#loc2712 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_4_depthwise_BN_layer_call_fn_19474"])
#loc2713 = loc(fused["NoOp:", "NoOp@__inference_block_4_depthwise_BN_layer_call_fn_19474"])
#loc2714 = loc(fused["Identity:", "Identity@__inference_block_4_depthwise_BN_layer_call_fn_19474"])
#loc2715 = loc(fused["Const:", "depthwise/Shape@__inference_block_4_depthwise_layer_call_and_return_conditional_losses_19448"])
#loc2716 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_4_depthwise_layer_call_and_return_conditional_losses_19448"])
#loc2717 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_4_depthwise_layer_call_and_return_conditional_losses_19448"])
#loc2718 = loc(fused["NoOp:", "NoOp@__inference_block_4_depthwise_layer_call_and_return_conditional_losses_19448"])
#loc2719 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_4_depthwise_layer_call_and_return_conditional_losses_19448"])
#loc2720 = loc(fused["Identity:", "Identity@__inference_block_4_depthwise_layer_call_and_return_conditional_losses_19448"])
#loc2721 = loc(fused["Const:", "depthwise/Shape@__inference_block_4_depthwise_layer_call_and_return_conditional_losses_9345"])
#loc2722 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_4_depthwise_layer_call_and_return_conditional_losses_9345"])
#loc2723 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_4_depthwise_layer_call_and_return_conditional_losses_9345"])
#loc2724 = loc(fused["NoOp:", "NoOp@__inference_block_4_depthwise_layer_call_and_return_conditional_losses_9345"])
#loc2725 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_4_depthwise_layer_call_and_return_conditional_losses_9345"])
#loc2726 = loc(fused["Identity:", "Identity@__inference_block_4_depthwise_layer_call_and_return_conditional_losses_9345"])
#loc2727 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_4_depthwise_layer_call_fn_19439"])
#loc2728 = loc(fused["NoOp:", "NoOp@__inference_block_4_depthwise_layer_call_fn_19439"])
#loc2729 = loc(fused["Identity:", "Identity@__inference_block_4_depthwise_layer_call_fn_19439"])
#loc2730 = loc(fused["Relu6:", "Relu6@__inference_block_4_depthwise_relu_layer_call_and_return_conditional_losses_19520"])
#loc2731 = loc(fused["Identity:", "Identity@__inference_block_4_depthwise_relu_layer_call_and_return_conditional_losses_19520"])
#loc2732 = loc(fused["Relu6:", "Relu6@__inference_block_4_depthwise_relu_layer_call_and_return_conditional_losses_9363"])
#loc2733 = loc(fused["Identity:", "Identity@__inference_block_4_depthwise_relu_layer_call_and_return_conditional_losses_9363"])
#loc2734 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_4_depthwise_relu_layer_call_fn_19515"])
#loc2735 = loc(fused["Identity:", "Identity@__inference_block_4_depthwise_relu_layer_call_fn_19515"])
#loc2736 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19404"])
#loc2737 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19404"])
#loc2738 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19404"])
#loc2739 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19404"])
#loc2740 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19404"])
#loc2741 = loc(fused["NoOp:", "NoOp@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19404"])
#loc2742 = loc(fused["Identity:", "Identity@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19404"])
#loc2743 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19422"])
#loc2744 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19422"])
#loc2745 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19422"])
#loc2746 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19422"])
#loc2747 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19422"])
#loc2748 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19422"])
#loc2749 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19422"])
#loc2750 = loc(fused["NoOp:", "NoOp@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19422"])
#loc2751 = loc(fused["Identity:", "Identity@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_19422"])
#loc2752 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6411"])
#loc2753 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6411"])
#loc2754 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6411"])
#loc2755 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6411"])
#loc2756 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6411"])
#loc2757 = loc(fused["NoOp:", "NoOp@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6411"])
#loc2758 = loc(fused["Identity:", "Identity@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6411"])
#loc2759 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6442"])
#loc2760 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6442"])
#loc2761 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6442"])
#loc2762 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6442"])
#loc2763 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6442"])
#loc2764 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6442"])
#loc2765 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6442"])
#loc2766 = loc(fused["NoOp:", "NoOp@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6442"])
#loc2767 = loc(fused["Identity:", "Identity@__inference_block_4_expand_BN_layer_call_and_return_conditional_losses_6442"])
#loc2768 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_4_expand_BN_layer_call_fn_19373"])
#loc2769 = loc(fused["NoOp:", "NoOp@__inference_block_4_expand_BN_layer_call_fn_19373"])
#loc2770 = loc(fused["Identity:", "Identity@__inference_block_4_expand_BN_layer_call_fn_19373"])
#loc2771 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_4_expand_BN_layer_call_fn_19386"])
#loc2772 = loc(fused["NoOp:", "NoOp@__inference_block_4_expand_BN_layer_call_fn_19386"])
#loc2773 = loc(fused["Identity:", "Identity@__inference_block_4_expand_BN_layer_call_fn_19386"])
#loc2774 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_4_expand_layer_call_and_return_conditional_losses_19360"])
#loc2775 = loc(fused["NoOp:", "NoOp@__inference_block_4_expand_layer_call_and_return_conditional_losses_19360"])
#loc2776 = loc(fused["Conv2D:", "Conv2D@__inference_block_4_expand_layer_call_and_return_conditional_losses_19360"])
#loc2777 = loc(fused["Identity:", "Identity@__inference_block_4_expand_layer_call_and_return_conditional_losses_19360"])
#loc2778 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_4_expand_layer_call_and_return_conditional_losses_9316"])
#loc2779 = loc(fused["NoOp:", "NoOp@__inference_block_4_expand_layer_call_and_return_conditional_losses_9316"])
#loc2780 = loc(fused["Conv2D:", "Conv2D@__inference_block_4_expand_layer_call_and_return_conditional_losses_9316"])
#loc2781 = loc(fused["Identity:", "Identity@__inference_block_4_expand_layer_call_and_return_conditional_losses_9316"])
#loc2782 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_4_expand_layer_call_fn_19353"])
#loc2783 = loc(fused["NoOp:", "NoOp@__inference_block_4_expand_layer_call_fn_19353"])
#loc2784 = loc(fused["Identity:", "Identity@__inference_block_4_expand_layer_call_fn_19353"])
#loc2785 = loc(fused["Relu6:", "Relu6@__inference_block_4_expand_relu_layer_call_and_return_conditional_losses_19432"])
#loc2786 = loc(fused["Identity:", "Identity@__inference_block_4_expand_relu_layer_call_and_return_conditional_losses_19432"])
#loc2787 = loc(fused["Relu6:", "Relu6@__inference_block_4_expand_relu_layer_call_and_return_conditional_losses_9334"])
#loc2788 = loc(fused["Identity:", "Identity@__inference_block_4_expand_relu_layer_call_and_return_conditional_losses_9334"])
#loc2789 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_4_expand_relu_layer_call_fn_19427"])
#loc2790 = loc(fused["Identity:", "Identity@__inference_block_4_expand_relu_layer_call_fn_19427"])
#loc2791 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19578"])
#loc2792 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19578"])
#loc2793 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19578"])
#loc2794 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19578"])
#loc2795 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19578"])
#loc2796 = loc(fused["NoOp:", "NoOp@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19578"])
#loc2797 = loc(fused["Identity:", "Identity@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19578"])
#loc2798 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19596"])
#loc2799 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19596"])
#loc2800 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19596"])
#loc2801 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19596"])
#loc2802 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19596"])
#loc2803 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19596"])
#loc2804 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19596"])
#loc2805 = loc(fused["NoOp:", "NoOp@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19596"])
#loc2806 = loc(fused["Identity:", "Identity@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_19596"])
#loc2807 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6539"])
#loc2808 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6539"])
#loc2809 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6539"])
#loc2810 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6539"])
#loc2811 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6539"])
#loc2812 = loc(fused["NoOp:", "NoOp@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6539"])
#loc2813 = loc(fused["Identity:", "Identity@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6539"])
#loc2814 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6570"])
#loc2815 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6570"])
#loc2816 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6570"])
#loc2817 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6570"])
#loc2818 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6570"])
#loc2819 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6570"])
#loc2820 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6570"])
#loc2821 = loc(fused["NoOp:", "NoOp@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6570"])
#loc2822 = loc(fused["Identity:", "Identity@__inference_block_4_project_BN_layer_call_and_return_conditional_losses_6570"])
#loc2823 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_4_project_BN_layer_call_fn_19547"])
#loc2824 = loc(fused["NoOp:", "NoOp@__inference_block_4_project_BN_layer_call_fn_19547"])
#loc2825 = loc(fused["Identity:", "Identity@__inference_block_4_project_BN_layer_call_fn_19547"])
#loc2826 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_4_project_BN_layer_call_fn_19560"])
#loc2827 = loc(fused["NoOp:", "NoOp@__inference_block_4_project_BN_layer_call_fn_19560"])
#loc2828 = loc(fused["Identity:", "Identity@__inference_block_4_project_BN_layer_call_fn_19560"])
#loc2829 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_4_project_layer_call_and_return_conditional_losses_19534"])
#loc2830 = loc(fused["NoOp:", "NoOp@__inference_block_4_project_layer_call_and_return_conditional_losses_19534"])
#loc2831 = loc(fused["Conv2D:", "Conv2D@__inference_block_4_project_layer_call_and_return_conditional_losses_19534"])
#loc2832 = loc(fused["Identity:", "Identity@__inference_block_4_project_layer_call_and_return_conditional_losses_19534"])
#loc2833 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_4_project_layer_call_and_return_conditional_losses_9372"])
#loc2834 = loc(fused["NoOp:", "NoOp@__inference_block_4_project_layer_call_and_return_conditional_losses_9372"])
#loc2835 = loc(fused["Conv2D:", "Conv2D@__inference_block_4_project_layer_call_and_return_conditional_losses_9372"])
#loc2836 = loc(fused["Identity:", "Identity@__inference_block_4_project_layer_call_and_return_conditional_losses_9372"])
#loc2837 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_4_project_layer_call_fn_19527"])
#loc2838 = loc(fused["NoOp:", "NoOp@__inference_block_4_project_layer_call_fn_19527"])
#loc2839 = loc(fused["Identity:", "Identity@__inference_block_4_project_layer_call_fn_19527"])
#loc2840 = loc(fused["AddV2:", "add@__inference_block_5_add_layer_call_and_return_conditional_losses_19870"])
#loc2841 = loc(fused["Identity:", "Identity@__inference_block_5_add_layer_call_and_return_conditional_losses_19870"])
#loc2842 = loc(fused["AddV2:", "add@__inference_block_5_add_layer_call_and_return_conditional_losses_9475"])
#loc2843 = loc(fused["Identity:", "Identity@__inference_block_5_add_layer_call_and_return_conditional_losses_9475"])
#loc2844 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_5_add_layer_call_fn_19864"])
#loc2845 = loc(fused["Identity:", "Identity@__inference_block_5_add_layer_call_fn_19864"])
#loc2846 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19754"])
#loc2847 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19754"])
#loc2848 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19754"])
#loc2849 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19754"])
#loc2850 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19754"])
#loc2851 = loc(fused["NoOp:", "NoOp@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19754"])
#loc2852 = loc(fused["Identity:", "Identity@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19754"])
#loc2853 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19772"])
#loc2854 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19772"])
#loc2855 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19772"])
#loc2856 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19772"])
#loc2857 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19772"])
#loc2858 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19772"])
#loc2859 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19772"])
#loc2860 = loc(fused["NoOp:", "NoOp@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19772"])
#loc2861 = loc(fused["Identity:", "Identity@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_19772"])
#loc2862 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6667"])
#loc2863 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6667"])
#loc2864 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6667"])
#loc2865 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6667"])
#loc2866 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6667"])
#loc2867 = loc(fused["NoOp:", "NoOp@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6667"])
#loc2868 = loc(fused["Identity:", "Identity@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6667"])
#loc2869 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6698"])
#loc2870 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6698"])
#loc2871 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6698"])
#loc2872 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6698"])
#loc2873 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6698"])
#loc2874 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6698"])
#loc2875 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6698"])
#loc2876 = loc(fused["NoOp:", "NoOp@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6698"])
#loc2877 = loc(fused["Identity:", "Identity@__inference_block_5_depthwise_BN_layer_call_and_return_conditional_losses_6698"])
#loc2878 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_5_depthwise_BN_layer_call_fn_19723"])
#loc2879 = loc(fused["NoOp:", "NoOp@__inference_block_5_depthwise_BN_layer_call_fn_19723"])
#loc2880 = loc(fused["Identity:", "Identity@__inference_block_5_depthwise_BN_layer_call_fn_19723"])
#loc2881 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_5_depthwise_BN_layer_call_fn_19736"])
#loc2882 = loc(fused["NoOp:", "NoOp@__inference_block_5_depthwise_BN_layer_call_fn_19736"])
#loc2883 = loc(fused["Identity:", "Identity@__inference_block_5_depthwise_BN_layer_call_fn_19736"])
#loc2884 = loc(fused["Const:", "depthwise/Shape@__inference_block_5_depthwise_layer_call_and_return_conditional_losses_19710"])
#loc2885 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_5_depthwise_layer_call_and_return_conditional_losses_19710"])
#loc2886 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_5_depthwise_layer_call_and_return_conditional_losses_19710"])
#loc2887 = loc(fused["NoOp:", "NoOp@__inference_block_5_depthwise_layer_call_and_return_conditional_losses_19710"])
#loc2888 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_5_depthwise_layer_call_and_return_conditional_losses_19710"])
#loc2889 = loc(fused["Identity:", "Identity@__inference_block_5_depthwise_layer_call_and_return_conditional_losses_19710"])
#loc2890 = loc(fused["Const:", "depthwise/Shape@__inference_block_5_depthwise_layer_call_and_return_conditional_losses_9429"])
#loc2891 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_5_depthwise_layer_call_and_return_conditional_losses_9429"])
#loc2892 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_5_depthwise_layer_call_and_return_conditional_losses_9429"])
#loc2893 = loc(fused["NoOp:", "NoOp@__inference_block_5_depthwise_layer_call_and_return_conditional_losses_9429"])
#loc2894 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_5_depthwise_layer_call_and_return_conditional_losses_9429"])
#loc2895 = loc(fused["Identity:", "Identity@__inference_block_5_depthwise_layer_call_and_return_conditional_losses_9429"])
#loc2896 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_5_depthwise_layer_call_fn_19701"])
#loc2897 = loc(fused["NoOp:", "NoOp@__inference_block_5_depthwise_layer_call_fn_19701"])
#loc2898 = loc(fused["Identity:", "Identity@__inference_block_5_depthwise_layer_call_fn_19701"])
#loc2899 = loc(fused["Relu6:", "Relu6@__inference_block_5_depthwise_relu_layer_call_and_return_conditional_losses_19782"])
#loc2900 = loc(fused["Identity:", "Identity@__inference_block_5_depthwise_relu_layer_call_and_return_conditional_losses_19782"])
#loc2901 = loc(fused["Relu6:", "Relu6@__inference_block_5_depthwise_relu_layer_call_and_return_conditional_losses_9447"])
#loc2902 = loc(fused["Identity:", "Identity@__inference_block_5_depthwise_relu_layer_call_and_return_conditional_losses_9447"])
#loc2903 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_5_depthwise_relu_layer_call_fn_19777"])
#loc2904 = loc(fused["Identity:", "Identity@__inference_block_5_depthwise_relu_layer_call_fn_19777"])
#loc2905 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19666"])
#loc2906 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19666"])
#loc2907 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19666"])
#loc2908 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19666"])
#loc2909 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19666"])
#loc2910 = loc(fused["NoOp:", "NoOp@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19666"])
#loc2911 = loc(fused["Identity:", "Identity@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19666"])
#loc2912 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19684"])
#loc2913 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19684"])
#loc2914 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19684"])
#loc2915 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19684"])
#loc2916 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19684"])
#loc2917 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19684"])
#loc2918 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19684"])
#loc2919 = loc(fused["NoOp:", "NoOp@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19684"])
#loc2920 = loc(fused["Identity:", "Identity@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_19684"])
#loc2921 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6603"])
#loc2922 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6603"])
#loc2923 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6603"])
#loc2924 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6603"])
#loc2925 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6603"])
#loc2926 = loc(fused["NoOp:", "NoOp@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6603"])
#loc2927 = loc(fused["Identity:", "Identity@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6603"])
#loc2928 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6634"])
#loc2929 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6634"])
#loc2930 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6634"])
#loc2931 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6634"])
#loc2932 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6634"])
#loc2933 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6634"])
#loc2934 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6634"])
#loc2935 = loc(fused["NoOp:", "NoOp@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6634"])
#loc2936 = loc(fused["Identity:", "Identity@__inference_block_5_expand_BN_layer_call_and_return_conditional_losses_6634"])
#loc2937 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_5_expand_BN_layer_call_fn_19635"])
#loc2938 = loc(fused["NoOp:", "NoOp@__inference_block_5_expand_BN_layer_call_fn_19635"])
#loc2939 = loc(fused["Identity:", "Identity@__inference_block_5_expand_BN_layer_call_fn_19635"])
#loc2940 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_5_expand_BN_layer_call_fn_19648"])
#loc2941 = loc(fused["NoOp:", "NoOp@__inference_block_5_expand_BN_layer_call_fn_19648"])
#loc2942 = loc(fused["Identity:", "Identity@__inference_block_5_expand_BN_layer_call_fn_19648"])
#loc2943 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_5_expand_layer_call_and_return_conditional_losses_19622"])
#loc2944 = loc(fused["NoOp:", "NoOp@__inference_block_5_expand_layer_call_and_return_conditional_losses_19622"])
#loc2945 = loc(fused["Conv2D:", "Conv2D@__inference_block_5_expand_layer_call_and_return_conditional_losses_19622"])
#loc2946 = loc(fused["Identity:", "Identity@__inference_block_5_expand_layer_call_and_return_conditional_losses_19622"])
#loc2947 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_5_expand_layer_call_and_return_conditional_losses_9400"])
#loc2948 = loc(fused["NoOp:", "NoOp@__inference_block_5_expand_layer_call_and_return_conditional_losses_9400"])
#loc2949 = loc(fused["Conv2D:", "Conv2D@__inference_block_5_expand_layer_call_and_return_conditional_losses_9400"])
#loc2950 = loc(fused["Identity:", "Identity@__inference_block_5_expand_layer_call_and_return_conditional_losses_9400"])
#loc2951 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_5_expand_layer_call_fn_19615"])
#loc2952 = loc(fused["NoOp:", "NoOp@__inference_block_5_expand_layer_call_fn_19615"])
#loc2953 = loc(fused["Identity:", "Identity@__inference_block_5_expand_layer_call_fn_19615"])
#loc2954 = loc(fused["Relu6:", "Relu6@__inference_block_5_expand_relu_layer_call_and_return_conditional_losses_19694"])
#loc2955 = loc(fused["Identity:", "Identity@__inference_block_5_expand_relu_layer_call_and_return_conditional_losses_19694"])
#loc2956 = loc(fused["Relu6:", "Relu6@__inference_block_5_expand_relu_layer_call_and_return_conditional_losses_9418"])
#loc2957 = loc(fused["Identity:", "Identity@__inference_block_5_expand_relu_layer_call_and_return_conditional_losses_9418"])
#loc2958 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_5_expand_relu_layer_call_fn_19689"])
#loc2959 = loc(fused["Identity:", "Identity@__inference_block_5_expand_relu_layer_call_fn_19689"])
#loc2960 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19840"])
#loc2961 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19840"])
#loc2962 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19840"])
#loc2963 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19840"])
#loc2964 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19840"])
#loc2965 = loc(fused["NoOp:", "NoOp@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19840"])
#loc2966 = loc(fused["Identity:", "Identity@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19840"])
#loc2967 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19858"])
#loc2968 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19858"])
#loc2969 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19858"])
#loc2970 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19858"])
#loc2971 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19858"])
#loc2972 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19858"])
#loc2973 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19858"])
#loc2974 = loc(fused["NoOp:", "NoOp@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19858"])
#loc2975 = loc(fused["Identity:", "Identity@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_19858"])
#loc2976 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6731"])
#loc2977 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6731"])
#loc2978 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6731"])
#loc2979 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6731"])
#loc2980 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6731"])
#loc2981 = loc(fused["NoOp:", "NoOp@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6731"])
#loc2982 = loc(fused["Identity:", "Identity@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6731"])
#loc2983 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6762"])
#loc2984 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6762"])
#loc2985 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6762"])
#loc2986 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6762"])
#loc2987 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6762"])
#loc2988 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6762"])
#loc2989 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6762"])
#loc2990 = loc(fused["NoOp:", "NoOp@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6762"])
#loc2991 = loc(fused["Identity:", "Identity@__inference_block_5_project_BN_layer_call_and_return_conditional_losses_6762"])
#loc2992 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_5_project_BN_layer_call_fn_19809"])
#loc2993 = loc(fused["NoOp:", "NoOp@__inference_block_5_project_BN_layer_call_fn_19809"])
#loc2994 = loc(fused["Identity:", "Identity@__inference_block_5_project_BN_layer_call_fn_19809"])
#loc2995 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_5_project_BN_layer_call_fn_19822"])
#loc2996 = loc(fused["NoOp:", "NoOp@__inference_block_5_project_BN_layer_call_fn_19822"])
#loc2997 = loc(fused["Identity:", "Identity@__inference_block_5_project_BN_layer_call_fn_19822"])
#loc2998 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_5_project_layer_call_and_return_conditional_losses_19796"])
#loc2999 = loc(fused["NoOp:", "NoOp@__inference_block_5_project_layer_call_and_return_conditional_losses_19796"])
#loc3000 = loc(fused["Conv2D:", "Conv2D@__inference_block_5_project_layer_call_and_return_conditional_losses_19796"])
#loc3001 = loc(fused["Identity:", "Identity@__inference_block_5_project_layer_call_and_return_conditional_losses_19796"])
#loc3002 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_5_project_layer_call_and_return_conditional_losses_9456"])
#loc3003 = loc(fused["NoOp:", "NoOp@__inference_block_5_project_layer_call_and_return_conditional_losses_9456"])
#loc3004 = loc(fused["Conv2D:", "Conv2D@__inference_block_5_project_layer_call_and_return_conditional_losses_9456"])
#loc3005 = loc(fused["Identity:", "Identity@__inference_block_5_project_layer_call_and_return_conditional_losses_9456"])
#loc3006 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_5_project_layer_call_fn_19789"])
#loc3007 = loc(fused["NoOp:", "NoOp@__inference_block_5_project_layer_call_fn_19789"])
#loc3008 = loc(fused["Identity:", "Identity@__inference_block_5_project_layer_call_fn_19789"])
#loc3009 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20027"])
#loc3010 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20027"])
#loc3011 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20027"])
#loc3012 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20027"])
#loc3013 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20027"])
#loc3014 = loc(fused["NoOp:", "NoOp@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20027"])
#loc3015 = loc(fused["Identity:", "Identity@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20027"])
#loc3016 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20045"])
#loc3017 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20045"])
#loc3018 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20045"])
#loc3019 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20045"])
#loc3020 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20045"])
#loc3021 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20045"])
#loc3022 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20045"])
#loc3023 = loc(fused["NoOp:", "NoOp@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20045"])
#loc3024 = loc(fused["Identity:", "Identity@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_20045"])
#loc3025 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6872"])
#loc3026 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6872"])
#loc3027 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6872"])
#loc3028 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6872"])
#loc3029 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6872"])
#loc3030 = loc(fused["NoOp:", "NoOp@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6872"])
#loc3031 = loc(fused["Identity:", "Identity@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6872"])
#loc3032 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6903"])
#loc3033 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6903"])
#loc3034 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6903"])
#loc3035 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6903"])
#loc3036 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6903"])
#loc3037 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6903"])
#loc3038 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6903"])
#loc3039 = loc(fused["NoOp:", "NoOp@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6903"])
#loc3040 = loc(fused["Identity:", "Identity@__inference_block_6_depthwise_BN_layer_call_and_return_conditional_losses_6903"])
#loc3041 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_6_depthwise_BN_layer_call_fn_19996"])
#loc3042 = loc(fused["NoOp:", "NoOp@__inference_block_6_depthwise_BN_layer_call_fn_19996"])
#loc3043 = loc(fused["Identity:", "Identity@__inference_block_6_depthwise_BN_layer_call_fn_19996"])
#loc3044 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_6_depthwise_BN_layer_call_fn_20009"])
#loc3045 = loc(fused["NoOp:", "NoOp@__inference_block_6_depthwise_BN_layer_call_fn_20009"])
#loc3046 = loc(fused["Identity:", "Identity@__inference_block_6_depthwise_BN_layer_call_fn_20009"])
#loc3047 = loc(fused["Const:", "depthwise/Shape@__inference_block_6_depthwise_layer_call_and_return_conditional_losses_19983"])
#loc3048 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_6_depthwise_layer_call_and_return_conditional_losses_19983"])
#loc3049 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_6_depthwise_layer_call_and_return_conditional_losses_19983"])
#loc3050 = loc(fused["NoOp:", "NoOp@__inference_block_6_depthwise_layer_call_and_return_conditional_losses_19983"])
#loc3051 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_6_depthwise_layer_call_and_return_conditional_losses_19983"])
#loc3052 = loc(fused["Identity:", "Identity@__inference_block_6_depthwise_layer_call_and_return_conditional_losses_19983"])
#loc3053 = loc(fused["Const:", "depthwise/Shape@__inference_block_6_depthwise_layer_call_and_return_conditional_losses_9514"])
#loc3054 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_6_depthwise_layer_call_and_return_conditional_losses_9514"])
#loc3055 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_6_depthwise_layer_call_and_return_conditional_losses_9514"])
#loc3056 = loc(fused["NoOp:", "NoOp@__inference_block_6_depthwise_layer_call_and_return_conditional_losses_9514"])
#loc3057 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_6_depthwise_layer_call_and_return_conditional_losses_9514"])
#loc3058 = loc(fused["Identity:", "Identity@__inference_block_6_depthwise_layer_call_and_return_conditional_losses_9514"])
#loc3059 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_6_depthwise_layer_call_fn_19974"])
#loc3060 = loc(fused["NoOp:", "NoOp@__inference_block_6_depthwise_layer_call_fn_19974"])
#loc3061 = loc(fused["Identity:", "Identity@__inference_block_6_depthwise_layer_call_fn_19974"])
#loc3062 = loc(fused["Relu6:", "Relu6@__inference_block_6_depthwise_relu_layer_call_and_return_conditional_losses_20055"])
#loc3063 = loc(fused["Identity:", "Identity@__inference_block_6_depthwise_relu_layer_call_and_return_conditional_losses_20055"])
#loc3064 = loc(fused["Relu6:", "Relu6@__inference_block_6_depthwise_relu_layer_call_and_return_conditional_losses_9532"])
#loc3065 = loc(fused["Identity:", "Identity@__inference_block_6_depthwise_relu_layer_call_and_return_conditional_losses_9532"])
#loc3066 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_6_depthwise_relu_layer_call_fn_20050"])
#loc3067 = loc(fused["Identity:", "Identity@__inference_block_6_depthwise_relu_layer_call_fn_20050"])
#loc3068 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19928"])
#loc3069 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19928"])
#loc3070 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19928"])
#loc3071 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19928"])
#loc3072 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19928"])
#loc3073 = loc(fused["NoOp:", "NoOp@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19928"])
#loc3074 = loc(fused["Identity:", "Identity@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19928"])
#loc3075 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19946"])
#loc3076 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19946"])
#loc3077 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19946"])
#loc3078 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19946"])
#loc3079 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19946"])
#loc3080 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19946"])
#loc3081 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19946"])
#loc3082 = loc(fused["NoOp:", "NoOp@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19946"])
#loc3083 = loc(fused["Identity:", "Identity@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_19946"])
#loc3084 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6795"])
#loc3085 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6795"])
#loc3086 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6795"])
#loc3087 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6795"])
#loc3088 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6795"])
#loc3089 = loc(fused["NoOp:", "NoOp@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6795"])
#loc3090 = loc(fused["Identity:", "Identity@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6795"])
#loc3091 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6826"])
#loc3092 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6826"])
#loc3093 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6826"])
#loc3094 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6826"])
#loc3095 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6826"])
#loc3096 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6826"])
#loc3097 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6826"])
#loc3098 = loc(fused["NoOp:", "NoOp@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6826"])
#loc3099 = loc(fused["Identity:", "Identity@__inference_block_6_expand_BN_layer_call_and_return_conditional_losses_6826"])
#loc3100 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_6_expand_BN_layer_call_fn_19897"])
#loc3101 = loc(fused["NoOp:", "NoOp@__inference_block_6_expand_BN_layer_call_fn_19897"])
#loc3102 = loc(fused["Identity:", "Identity@__inference_block_6_expand_BN_layer_call_fn_19897"])
#loc3103 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_6_expand_BN_layer_call_fn_19910"])
#loc3104 = loc(fused["NoOp:", "NoOp@__inference_block_6_expand_BN_layer_call_fn_19910"])
#loc3105 = loc(fused["Identity:", "Identity@__inference_block_6_expand_BN_layer_call_fn_19910"])
#loc3106 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_6_expand_layer_call_and_return_conditional_losses_19884"])
#loc3107 = loc(fused["NoOp:", "NoOp@__inference_block_6_expand_layer_call_and_return_conditional_losses_19884"])
#loc3108 = loc(fused["Conv2D:", "Conv2D@__inference_block_6_expand_layer_call_and_return_conditional_losses_19884"])
#loc3109 = loc(fused["Identity:", "Identity@__inference_block_6_expand_layer_call_and_return_conditional_losses_19884"])
#loc3110 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_6_expand_layer_call_and_return_conditional_losses_9484"])
#loc3111 = loc(fused["NoOp:", "NoOp@__inference_block_6_expand_layer_call_and_return_conditional_losses_9484"])
#loc3112 = loc(fused["Conv2D:", "Conv2D@__inference_block_6_expand_layer_call_and_return_conditional_losses_9484"])
#loc3113 = loc(fused["Identity:", "Identity@__inference_block_6_expand_layer_call_and_return_conditional_losses_9484"])
#loc3114 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_6_expand_layer_call_fn_19877"])
#loc3115 = loc(fused["NoOp:", "NoOp@__inference_block_6_expand_layer_call_fn_19877"])
#loc3116 = loc(fused["Identity:", "Identity@__inference_block_6_expand_layer_call_fn_19877"])
#loc3117 = loc(fused["Relu6:", "Relu6@__inference_block_6_expand_relu_layer_call_and_return_conditional_losses_19956"])
#loc3118 = loc(fused["Identity:", "Identity@__inference_block_6_expand_relu_layer_call_and_return_conditional_losses_19956"])
#loc3119 = loc(fused["Relu6:", "Relu6@__inference_block_6_expand_relu_layer_call_and_return_conditional_losses_9502"])
#loc3120 = loc(fused["Identity:", "Identity@__inference_block_6_expand_relu_layer_call_and_return_conditional_losses_9502"])
#loc3121 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_6_expand_relu_layer_call_fn_19951"])
#loc3122 = loc(fused["Identity:", "Identity@__inference_block_6_expand_relu_layer_call_fn_19951"])
#loc3123 = loc(fused["Const:", "Pad/paddings@__inference_block_6_pad_layer_call_and_return_conditional_losses_19967"])
#loc3124 = loc(fused["Pad:", "Pad@__inference_block_6_pad_layer_call_and_return_conditional_losses_19967"])
#loc3125 = loc(fused["Identity:", "Identity@__inference_block_6_pad_layer_call_and_return_conditional_losses_19967"])
#loc3126 = loc(fused["Const:", "Pad/paddings@__inference_block_6_pad_layer_call_and_return_conditional_losses_6847"])
#loc3127 = loc(fused["Pad:", "Pad@__inference_block_6_pad_layer_call_and_return_conditional_losses_6847"])
#loc3128 = loc(fused["Identity:", "Identity@__inference_block_6_pad_layer_call_and_return_conditional_losses_6847"])
#loc3129 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_6_pad_layer_call_fn_19961"])
#loc3130 = loc(fused["Identity:", "Identity@__inference_block_6_pad_layer_call_fn_19961"])
#loc3131 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20113"])
#loc3132 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20113"])
#loc3133 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20113"])
#loc3134 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20113"])
#loc3135 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20113"])
#loc3136 = loc(fused["NoOp:", "NoOp@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20113"])
#loc3137 = loc(fused["Identity:", "Identity@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20113"])
#loc3138 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20131"])
#loc3139 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20131"])
#loc3140 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20131"])
#loc3141 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20131"])
#loc3142 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20131"])
#loc3143 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20131"])
#loc3144 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20131"])
#loc3145 = loc(fused["NoOp:", "NoOp@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20131"])
#loc3146 = loc(fused["Identity:", "Identity@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_20131"])
#loc3147 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6936"])
#loc3148 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6936"])
#loc3149 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6936"])
#loc3150 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6936"])
#loc3151 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6936"])
#loc3152 = loc(fused["NoOp:", "NoOp@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6936"])
#loc3153 = loc(fused["Identity:", "Identity@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6936"])
#loc3154 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6967"])
#loc3155 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6967"])
#loc3156 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6967"])
#loc3157 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6967"])
#loc3158 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6967"])
#loc3159 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6967"])
#loc3160 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6967"])
#loc3161 = loc(fused["NoOp:", "NoOp@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6967"])
#loc3162 = loc(fused["Identity:", "Identity@__inference_block_6_project_BN_layer_call_and_return_conditional_losses_6967"])
#loc3163 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_6_project_BN_layer_call_fn_20082"])
#loc3164 = loc(fused["NoOp:", "NoOp@__inference_block_6_project_BN_layer_call_fn_20082"])
#loc3165 = loc(fused["Identity:", "Identity@__inference_block_6_project_BN_layer_call_fn_20082"])
#loc3166 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_6_project_BN_layer_call_fn_20095"])
#loc3167 = loc(fused["NoOp:", "NoOp@__inference_block_6_project_BN_layer_call_fn_20095"])
#loc3168 = loc(fused["Identity:", "Identity@__inference_block_6_project_BN_layer_call_fn_20095"])
#loc3169 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_6_project_layer_call_and_return_conditional_losses_20069"])
#loc3170 = loc(fused["NoOp:", "NoOp@__inference_block_6_project_layer_call_and_return_conditional_losses_20069"])
#loc3171 = loc(fused["Conv2D:", "Conv2D@__inference_block_6_project_layer_call_and_return_conditional_losses_20069"])
#loc3172 = loc(fused["Identity:", "Identity@__inference_block_6_project_layer_call_and_return_conditional_losses_20069"])
#loc3173 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_6_project_layer_call_and_return_conditional_losses_9541"])
#loc3174 = loc(fused["NoOp:", "NoOp@__inference_block_6_project_layer_call_and_return_conditional_losses_9541"])
#loc3175 = loc(fused["Conv2D:", "Conv2D@__inference_block_6_project_layer_call_and_return_conditional_losses_9541"])
#loc3176 = loc(fused["Identity:", "Identity@__inference_block_6_project_layer_call_and_return_conditional_losses_9541"])
#loc3177 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_6_project_layer_call_fn_20062"])
#loc3178 = loc(fused["NoOp:", "NoOp@__inference_block_6_project_layer_call_fn_20062"])
#loc3179 = loc(fused["Identity:", "Identity@__inference_block_6_project_layer_call_fn_20062"])
#loc3180 = loc(fused["AddV2:", "add@__inference_block_7_add_layer_call_and_return_conditional_losses_20393"])
#loc3181 = loc(fused["Identity:", "Identity@__inference_block_7_add_layer_call_and_return_conditional_losses_20393"])
#loc3182 = loc(fused["AddV2:", "add@__inference_block_7_add_layer_call_and_return_conditional_losses_9636"])
#loc3183 = loc(fused["Identity:", "Identity@__inference_block_7_add_layer_call_and_return_conditional_losses_9636"])
#loc3184 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_7_add_layer_call_fn_20387"])
#loc3185 = loc(fused["Identity:", "Identity@__inference_block_7_add_layer_call_fn_20387"])
#loc3186 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20277"])
#loc3187 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20277"])
#loc3188 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20277"])
#loc3189 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20277"])
#loc3190 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20277"])
#loc3191 = loc(fused["NoOp:", "NoOp@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20277"])
#loc3192 = loc(fused["Identity:", "Identity@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20277"])
#loc3193 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20295"])
#loc3194 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20295"])
#loc3195 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20295"])
#loc3196 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20295"])
#loc3197 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20295"])
#loc3198 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20295"])
#loc3199 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20295"])
#loc3200 = loc(fused["NoOp:", "NoOp@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20295"])
#loc3201 = loc(fused["Identity:", "Identity@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_20295"])
#loc3202 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7064"])
#loc3203 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7064"])
#loc3204 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7064"])
#loc3205 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7064"])
#loc3206 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7064"])
#loc3207 = loc(fused["NoOp:", "NoOp@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7064"])
#loc3208 = loc(fused["Identity:", "Identity@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7064"])
#loc3209 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7095"])
#loc3210 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7095"])
#loc3211 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7095"])
#loc3212 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7095"])
#loc3213 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7095"])
#loc3214 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7095"])
#loc3215 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7095"])
#loc3216 = loc(fused["NoOp:", "NoOp@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7095"])
#loc3217 = loc(fused["Identity:", "Identity@__inference_block_7_depthwise_BN_layer_call_and_return_conditional_losses_7095"])
#loc3218 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_7_depthwise_BN_layer_call_fn_20246"])
#loc3219 = loc(fused["NoOp:", "NoOp@__inference_block_7_depthwise_BN_layer_call_fn_20246"])
#loc3220 = loc(fused["Identity:", "Identity@__inference_block_7_depthwise_BN_layer_call_fn_20246"])
#loc3221 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_7_depthwise_BN_layer_call_fn_20259"])
#loc3222 = loc(fused["NoOp:", "NoOp@__inference_block_7_depthwise_BN_layer_call_fn_20259"])
#loc3223 = loc(fused["Identity:", "Identity@__inference_block_7_depthwise_BN_layer_call_fn_20259"])
#loc3224 = loc(fused["Const:", "depthwise/Shape@__inference_block_7_depthwise_layer_call_and_return_conditional_losses_20233"])
#loc3225 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_7_depthwise_layer_call_and_return_conditional_losses_20233"])
#loc3226 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_7_depthwise_layer_call_and_return_conditional_losses_20233"])
#loc3227 = loc(fused["NoOp:", "NoOp@__inference_block_7_depthwise_layer_call_and_return_conditional_losses_20233"])
#loc3228 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_7_depthwise_layer_call_and_return_conditional_losses_20233"])
#loc3229 = loc(fused["Identity:", "Identity@__inference_block_7_depthwise_layer_call_and_return_conditional_losses_20233"])
#loc3230 = loc(fused["Const:", "depthwise/Shape@__inference_block_7_depthwise_layer_call_and_return_conditional_losses_9590"])
#loc3231 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_7_depthwise_layer_call_and_return_conditional_losses_9590"])
#loc3232 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_7_depthwise_layer_call_and_return_conditional_losses_9590"])
#loc3233 = loc(fused["NoOp:", "NoOp@__inference_block_7_depthwise_layer_call_and_return_conditional_losses_9590"])
#loc3234 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_7_depthwise_layer_call_and_return_conditional_losses_9590"])
#loc3235 = loc(fused["Identity:", "Identity@__inference_block_7_depthwise_layer_call_and_return_conditional_losses_9590"])
#loc3236 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_7_depthwise_layer_call_fn_20224"])
#loc3237 = loc(fused["NoOp:", "NoOp@__inference_block_7_depthwise_layer_call_fn_20224"])
#loc3238 = loc(fused["Identity:", "Identity@__inference_block_7_depthwise_layer_call_fn_20224"])
#loc3239 = loc(fused["Relu6:", "Relu6@__inference_block_7_depthwise_relu_layer_call_and_return_conditional_losses_20305"])
#loc3240 = loc(fused["Identity:", "Identity@__inference_block_7_depthwise_relu_layer_call_and_return_conditional_losses_20305"])
#loc3241 = loc(fused["Relu6:", "Relu6@__inference_block_7_depthwise_relu_layer_call_and_return_conditional_losses_9608"])
#loc3242 = loc(fused["Identity:", "Identity@__inference_block_7_depthwise_relu_layer_call_and_return_conditional_losses_9608"])
#loc3243 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_7_depthwise_relu_layer_call_fn_20300"])
#loc3244 = loc(fused["Identity:", "Identity@__inference_block_7_depthwise_relu_layer_call_fn_20300"])
#loc3245 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20189"])
#loc3246 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20189"])
#loc3247 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20189"])
#loc3248 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20189"])
#loc3249 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20189"])
#loc3250 = loc(fused["NoOp:", "NoOp@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20189"])
#loc3251 = loc(fused["Identity:", "Identity@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20189"])
#loc3252 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20207"])
#loc3253 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20207"])
#loc3254 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20207"])
#loc3255 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20207"])
#loc3256 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20207"])
#loc3257 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20207"])
#loc3258 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20207"])
#loc3259 = loc(fused["NoOp:", "NoOp@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20207"])
#loc3260 = loc(fused["Identity:", "Identity@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_20207"])
#loc3261 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7000"])
#loc3262 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7000"])
#loc3263 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7000"])
#loc3264 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7000"])
#loc3265 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7000"])
#loc3266 = loc(fused["NoOp:", "NoOp@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7000"])
#loc3267 = loc(fused["Identity:", "Identity@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7000"])
#loc3268 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7031"])
#loc3269 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7031"])
#loc3270 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7031"])
#loc3271 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7031"])
#loc3272 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7031"])
#loc3273 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7031"])
#loc3274 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7031"])
#loc3275 = loc(fused["NoOp:", "NoOp@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7031"])
#loc3276 = loc(fused["Identity:", "Identity@__inference_block_7_expand_BN_layer_call_and_return_conditional_losses_7031"])
#loc3277 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_7_expand_BN_layer_call_fn_20158"])
#loc3278 = loc(fused["NoOp:", "NoOp@__inference_block_7_expand_BN_layer_call_fn_20158"])
#loc3279 = loc(fused["Identity:", "Identity@__inference_block_7_expand_BN_layer_call_fn_20158"])
#loc3280 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_7_expand_BN_layer_call_fn_20171"])
#loc3281 = loc(fused["NoOp:", "NoOp@__inference_block_7_expand_BN_layer_call_fn_20171"])
#loc3282 = loc(fused["Identity:", "Identity@__inference_block_7_expand_BN_layer_call_fn_20171"])
#loc3283 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_7_expand_layer_call_and_return_conditional_losses_20145"])
#loc3284 = loc(fused["NoOp:", "NoOp@__inference_block_7_expand_layer_call_and_return_conditional_losses_20145"])
#loc3285 = loc(fused["Conv2D:", "Conv2D@__inference_block_7_expand_layer_call_and_return_conditional_losses_20145"])
#loc3286 = loc(fused["Identity:", "Identity@__inference_block_7_expand_layer_call_and_return_conditional_losses_20145"])
#loc3287 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_7_expand_layer_call_and_return_conditional_losses_9561"])
#loc3288 = loc(fused["NoOp:", "NoOp@__inference_block_7_expand_layer_call_and_return_conditional_losses_9561"])
#loc3289 = loc(fused["Conv2D:", "Conv2D@__inference_block_7_expand_layer_call_and_return_conditional_losses_9561"])
#loc3290 = loc(fused["Identity:", "Identity@__inference_block_7_expand_layer_call_and_return_conditional_losses_9561"])
#loc3291 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_7_expand_layer_call_fn_20138"])
#loc3292 = loc(fused["NoOp:", "NoOp@__inference_block_7_expand_layer_call_fn_20138"])
#loc3293 = loc(fused["Identity:", "Identity@__inference_block_7_expand_layer_call_fn_20138"])
#loc3294 = loc(fused["Relu6:", "Relu6@__inference_block_7_expand_relu_layer_call_and_return_conditional_losses_20217"])
#loc3295 = loc(fused["Identity:", "Identity@__inference_block_7_expand_relu_layer_call_and_return_conditional_losses_20217"])
#loc3296 = loc(fused["Relu6:", "Relu6@__inference_block_7_expand_relu_layer_call_and_return_conditional_losses_9579"])
#loc3297 = loc(fused["Identity:", "Identity@__inference_block_7_expand_relu_layer_call_and_return_conditional_losses_9579"])
#loc3298 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_7_expand_relu_layer_call_fn_20212"])
#loc3299 = loc(fused["Identity:", "Identity@__inference_block_7_expand_relu_layer_call_fn_20212"])
#loc3300 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20363"])
#loc3301 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20363"])
#loc3302 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20363"])
#loc3303 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20363"])
#loc3304 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20363"])
#loc3305 = loc(fused["NoOp:", "NoOp@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20363"])
#loc3306 = loc(fused["Identity:", "Identity@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20363"])
#loc3307 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20381"])
#loc3308 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20381"])
#loc3309 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20381"])
#loc3310 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20381"])
#loc3311 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20381"])
#loc3312 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20381"])
#loc3313 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20381"])
#loc3314 = loc(fused["NoOp:", "NoOp@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20381"])
#loc3315 = loc(fused["Identity:", "Identity@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_20381"])
#loc3316 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7128"])
#loc3317 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7128"])
#loc3318 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7128"])
#loc3319 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7128"])
#loc3320 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7128"])
#loc3321 = loc(fused["NoOp:", "NoOp@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7128"])
#loc3322 = loc(fused["Identity:", "Identity@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7128"])
#loc3323 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7159"])
#loc3324 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7159"])
#loc3325 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7159"])
#loc3326 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7159"])
#loc3327 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7159"])
#loc3328 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7159"])
#loc3329 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7159"])
#loc3330 = loc(fused["NoOp:", "NoOp@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7159"])
#loc3331 = loc(fused["Identity:", "Identity@__inference_block_7_project_BN_layer_call_and_return_conditional_losses_7159"])
#loc3332 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_7_project_BN_layer_call_fn_20332"])
#loc3333 = loc(fused["NoOp:", "NoOp@__inference_block_7_project_BN_layer_call_fn_20332"])
#loc3334 = loc(fused["Identity:", "Identity@__inference_block_7_project_BN_layer_call_fn_20332"])
#loc3335 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_7_project_BN_layer_call_fn_20345"])
#loc3336 = loc(fused["NoOp:", "NoOp@__inference_block_7_project_BN_layer_call_fn_20345"])
#loc3337 = loc(fused["Identity:", "Identity@__inference_block_7_project_BN_layer_call_fn_20345"])
#loc3338 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_7_project_layer_call_and_return_conditional_losses_20319"])
#loc3339 = loc(fused["NoOp:", "NoOp@__inference_block_7_project_layer_call_and_return_conditional_losses_20319"])
#loc3340 = loc(fused["Conv2D:", "Conv2D@__inference_block_7_project_layer_call_and_return_conditional_losses_20319"])
#loc3341 = loc(fused["Identity:", "Identity@__inference_block_7_project_layer_call_and_return_conditional_losses_20319"])
#loc3342 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_7_project_layer_call_and_return_conditional_losses_9617"])
#loc3343 = loc(fused["NoOp:", "NoOp@__inference_block_7_project_layer_call_and_return_conditional_losses_9617"])
#loc3344 = loc(fused["Conv2D:", "Conv2D@__inference_block_7_project_layer_call_and_return_conditional_losses_9617"])
#loc3345 = loc(fused["Identity:", "Identity@__inference_block_7_project_layer_call_and_return_conditional_losses_9617"])
#loc3346 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_7_project_layer_call_fn_20312"])
#loc3347 = loc(fused["NoOp:", "NoOp@__inference_block_7_project_layer_call_fn_20312"])
#loc3348 = loc(fused["Identity:", "Identity@__inference_block_7_project_layer_call_fn_20312"])
#loc3349 = loc(fused["AddV2:", "add@__inference_block_8_add_layer_call_and_return_conditional_losses_20655"])
#loc3350 = loc(fused["Identity:", "Identity@__inference_block_8_add_layer_call_and_return_conditional_losses_20655"])
#loc3351 = loc(fused["AddV2:", "add@__inference_block_8_add_layer_call_and_return_conditional_losses_9720"])
#loc3352 = loc(fused["Identity:", "Identity@__inference_block_8_add_layer_call_and_return_conditional_losses_9720"])
#loc3353 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_8_add_layer_call_fn_20649"])
#loc3354 = loc(fused["Identity:", "Identity@__inference_block_8_add_layer_call_fn_20649"])
#loc3355 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20539"])
#loc3356 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20539"])
#loc3357 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20539"])
#loc3358 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20539"])
#loc3359 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20539"])
#loc3360 = loc(fused["NoOp:", "NoOp@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20539"])
#loc3361 = loc(fused["Identity:", "Identity@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20539"])
#loc3362 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20557"])
#loc3363 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20557"])
#loc3364 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20557"])
#loc3365 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20557"])
#loc3366 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20557"])
#loc3367 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20557"])
#loc3368 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20557"])
#loc3369 = loc(fused["NoOp:", "NoOp@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20557"])
#loc3370 = loc(fused["Identity:", "Identity@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_20557"])
#loc3371 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7256"])
#loc3372 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7256"])
#loc3373 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7256"])
#loc3374 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7256"])
#loc3375 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7256"])
#loc3376 = loc(fused["NoOp:", "NoOp@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7256"])
#loc3377 = loc(fused["Identity:", "Identity@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7256"])
#loc3378 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7287"])
#loc3379 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7287"])
#loc3380 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7287"])
#loc3381 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7287"])
#loc3382 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7287"])
#loc3383 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7287"])
#loc3384 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7287"])
#loc3385 = loc(fused["NoOp:", "NoOp@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7287"])
#loc3386 = loc(fused["Identity:", "Identity@__inference_block_8_depthwise_BN_layer_call_and_return_conditional_losses_7287"])
#loc3387 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_8_depthwise_BN_layer_call_fn_20508"])
#loc3388 = loc(fused["NoOp:", "NoOp@__inference_block_8_depthwise_BN_layer_call_fn_20508"])
#loc3389 = loc(fused["Identity:", "Identity@__inference_block_8_depthwise_BN_layer_call_fn_20508"])
#loc3390 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_8_depthwise_BN_layer_call_fn_20521"])
#loc3391 = loc(fused["NoOp:", "NoOp@__inference_block_8_depthwise_BN_layer_call_fn_20521"])
#loc3392 = loc(fused["Identity:", "Identity@__inference_block_8_depthwise_BN_layer_call_fn_20521"])
#loc3393 = loc(fused["Const:", "depthwise/Shape@__inference_block_8_depthwise_layer_call_and_return_conditional_losses_20495"])
#loc3394 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_8_depthwise_layer_call_and_return_conditional_losses_20495"])
#loc3395 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_8_depthwise_layer_call_and_return_conditional_losses_20495"])
#loc3396 = loc(fused["NoOp:", "NoOp@__inference_block_8_depthwise_layer_call_and_return_conditional_losses_20495"])
#loc3397 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_8_depthwise_layer_call_and_return_conditional_losses_20495"])
#loc3398 = loc(fused["Identity:", "Identity@__inference_block_8_depthwise_layer_call_and_return_conditional_losses_20495"])
#loc3399 = loc(fused["Const:", "depthwise/Shape@__inference_block_8_depthwise_layer_call_and_return_conditional_losses_9674"])
#loc3400 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_8_depthwise_layer_call_and_return_conditional_losses_9674"])
#loc3401 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_8_depthwise_layer_call_and_return_conditional_losses_9674"])
#loc3402 = loc(fused["NoOp:", "NoOp@__inference_block_8_depthwise_layer_call_and_return_conditional_losses_9674"])
#loc3403 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_8_depthwise_layer_call_and_return_conditional_losses_9674"])
#loc3404 = loc(fused["Identity:", "Identity@__inference_block_8_depthwise_layer_call_and_return_conditional_losses_9674"])
#loc3405 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_8_depthwise_layer_call_fn_20486"])
#loc3406 = loc(fused["NoOp:", "NoOp@__inference_block_8_depthwise_layer_call_fn_20486"])
#loc3407 = loc(fused["Identity:", "Identity@__inference_block_8_depthwise_layer_call_fn_20486"])
#loc3408 = loc(fused["Relu6:", "Relu6@__inference_block_8_depthwise_relu_layer_call_and_return_conditional_losses_20567"])
#loc3409 = loc(fused["Identity:", "Identity@__inference_block_8_depthwise_relu_layer_call_and_return_conditional_losses_20567"])
#loc3410 = loc(fused["Relu6:", "Relu6@__inference_block_8_depthwise_relu_layer_call_and_return_conditional_losses_9692"])
#loc3411 = loc(fused["Identity:", "Identity@__inference_block_8_depthwise_relu_layer_call_and_return_conditional_losses_9692"])
#loc3412 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_8_depthwise_relu_layer_call_fn_20562"])
#loc3413 = loc(fused["Identity:", "Identity@__inference_block_8_depthwise_relu_layer_call_fn_20562"])
#loc3414 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20451"])
#loc3415 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20451"])
#loc3416 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20451"])
#loc3417 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20451"])
#loc3418 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20451"])
#loc3419 = loc(fused["NoOp:", "NoOp@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20451"])
#loc3420 = loc(fused["Identity:", "Identity@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20451"])
#loc3421 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20469"])
#loc3422 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20469"])
#loc3423 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20469"])
#loc3424 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20469"])
#loc3425 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20469"])
#loc3426 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20469"])
#loc3427 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20469"])
#loc3428 = loc(fused["NoOp:", "NoOp@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20469"])
#loc3429 = loc(fused["Identity:", "Identity@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_20469"])
#loc3430 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7192"])
#loc3431 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7192"])
#loc3432 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7192"])
#loc3433 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7192"])
#loc3434 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7192"])
#loc3435 = loc(fused["NoOp:", "NoOp@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7192"])
#loc3436 = loc(fused["Identity:", "Identity@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7192"])
#loc3437 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7223"])
#loc3438 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7223"])
#loc3439 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7223"])
#loc3440 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7223"])
#loc3441 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7223"])
#loc3442 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7223"])
#loc3443 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7223"])
#loc3444 = loc(fused["NoOp:", "NoOp@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7223"])
#loc3445 = loc(fused["Identity:", "Identity@__inference_block_8_expand_BN_layer_call_and_return_conditional_losses_7223"])
#loc3446 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_8_expand_BN_layer_call_fn_20420"])
#loc3447 = loc(fused["NoOp:", "NoOp@__inference_block_8_expand_BN_layer_call_fn_20420"])
#loc3448 = loc(fused["Identity:", "Identity@__inference_block_8_expand_BN_layer_call_fn_20420"])
#loc3449 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_8_expand_BN_layer_call_fn_20433"])
#loc3450 = loc(fused["NoOp:", "NoOp@__inference_block_8_expand_BN_layer_call_fn_20433"])
#loc3451 = loc(fused["Identity:", "Identity@__inference_block_8_expand_BN_layer_call_fn_20433"])
#loc3452 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_8_expand_layer_call_and_return_conditional_losses_20407"])
#loc3453 = loc(fused["NoOp:", "NoOp@__inference_block_8_expand_layer_call_and_return_conditional_losses_20407"])
#loc3454 = loc(fused["Conv2D:", "Conv2D@__inference_block_8_expand_layer_call_and_return_conditional_losses_20407"])
#loc3455 = loc(fused["Identity:", "Identity@__inference_block_8_expand_layer_call_and_return_conditional_losses_20407"])
#loc3456 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_8_expand_layer_call_and_return_conditional_losses_9645"])
#loc3457 = loc(fused["NoOp:", "NoOp@__inference_block_8_expand_layer_call_and_return_conditional_losses_9645"])
#loc3458 = loc(fused["Conv2D:", "Conv2D@__inference_block_8_expand_layer_call_and_return_conditional_losses_9645"])
#loc3459 = loc(fused["Identity:", "Identity@__inference_block_8_expand_layer_call_and_return_conditional_losses_9645"])
#loc3460 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_8_expand_layer_call_fn_20400"])
#loc3461 = loc(fused["NoOp:", "NoOp@__inference_block_8_expand_layer_call_fn_20400"])
#loc3462 = loc(fused["Identity:", "Identity@__inference_block_8_expand_layer_call_fn_20400"])
#loc3463 = loc(fused["Relu6:", "Relu6@__inference_block_8_expand_relu_layer_call_and_return_conditional_losses_20479"])
#loc3464 = loc(fused["Identity:", "Identity@__inference_block_8_expand_relu_layer_call_and_return_conditional_losses_20479"])
#loc3465 = loc(fused["Relu6:", "Relu6@__inference_block_8_expand_relu_layer_call_and_return_conditional_losses_9663"])
#loc3466 = loc(fused["Identity:", "Identity@__inference_block_8_expand_relu_layer_call_and_return_conditional_losses_9663"])
#loc3467 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_8_expand_relu_layer_call_fn_20474"])
#loc3468 = loc(fused["Identity:", "Identity@__inference_block_8_expand_relu_layer_call_fn_20474"])
#loc3469 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20625"])
#loc3470 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20625"])
#loc3471 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20625"])
#loc3472 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20625"])
#loc3473 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20625"])
#loc3474 = loc(fused["NoOp:", "NoOp@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20625"])
#loc3475 = loc(fused["Identity:", "Identity@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20625"])
#loc3476 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20643"])
#loc3477 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20643"])
#loc3478 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20643"])
#loc3479 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20643"])
#loc3480 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20643"])
#loc3481 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20643"])
#loc3482 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20643"])
#loc3483 = loc(fused["NoOp:", "NoOp@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20643"])
#loc3484 = loc(fused["Identity:", "Identity@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_20643"])
#loc3485 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7320"])
#loc3486 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7320"])
#loc3487 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7320"])
#loc3488 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7320"])
#loc3489 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7320"])
#loc3490 = loc(fused["NoOp:", "NoOp@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7320"])
#loc3491 = loc(fused["Identity:", "Identity@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7320"])
#loc3492 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7351"])
#loc3493 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7351"])
#loc3494 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7351"])
#loc3495 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7351"])
#loc3496 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7351"])
#loc3497 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7351"])
#loc3498 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7351"])
#loc3499 = loc(fused["NoOp:", "NoOp@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7351"])
#loc3500 = loc(fused["Identity:", "Identity@__inference_block_8_project_BN_layer_call_and_return_conditional_losses_7351"])
#loc3501 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_8_project_BN_layer_call_fn_20594"])
#loc3502 = loc(fused["NoOp:", "NoOp@__inference_block_8_project_BN_layer_call_fn_20594"])
#loc3503 = loc(fused["Identity:", "Identity@__inference_block_8_project_BN_layer_call_fn_20594"])
#loc3504 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_8_project_BN_layer_call_fn_20607"])
#loc3505 = loc(fused["NoOp:", "NoOp@__inference_block_8_project_BN_layer_call_fn_20607"])
#loc3506 = loc(fused["Identity:", "Identity@__inference_block_8_project_BN_layer_call_fn_20607"])
#loc3507 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_8_project_layer_call_and_return_conditional_losses_20581"])
#loc3508 = loc(fused["NoOp:", "NoOp@__inference_block_8_project_layer_call_and_return_conditional_losses_20581"])
#loc3509 = loc(fused["Conv2D:", "Conv2D@__inference_block_8_project_layer_call_and_return_conditional_losses_20581"])
#loc3510 = loc(fused["Identity:", "Identity@__inference_block_8_project_layer_call_and_return_conditional_losses_20581"])
#loc3511 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_8_project_layer_call_and_return_conditional_losses_9701"])
#loc3512 = loc(fused["NoOp:", "NoOp@__inference_block_8_project_layer_call_and_return_conditional_losses_9701"])
#loc3513 = loc(fused["Conv2D:", "Conv2D@__inference_block_8_project_layer_call_and_return_conditional_losses_9701"])
#loc3514 = loc(fused["Identity:", "Identity@__inference_block_8_project_layer_call_and_return_conditional_losses_9701"])
#loc3515 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_8_project_layer_call_fn_20574"])
#loc3516 = loc(fused["NoOp:", "NoOp@__inference_block_8_project_layer_call_fn_20574"])
#loc3517 = loc(fused["Identity:", "Identity@__inference_block_8_project_layer_call_fn_20574"])
#loc3518 = loc(fused["AddV2:", "add@__inference_block_9_add_layer_call_and_return_conditional_losses_20917"])
#loc3519 = loc(fused["Identity:", "Identity@__inference_block_9_add_layer_call_and_return_conditional_losses_20917"])
#loc3520 = loc(fused["AddV2:", "add@__inference_block_9_add_layer_call_and_return_conditional_losses_9804"])
#loc3521 = loc(fused["Identity:", "Identity@__inference_block_9_add_layer_call_and_return_conditional_losses_9804"])
#loc3522 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_9_add_layer_call_fn_20911"])
#loc3523 = loc(fused["Identity:", "Identity@__inference_block_9_add_layer_call_fn_20911"])
#loc3524 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20801"])
#loc3525 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20801"])
#loc3526 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20801"])
#loc3527 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20801"])
#loc3528 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20801"])
#loc3529 = loc(fused["NoOp:", "NoOp@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20801"])
#loc3530 = loc(fused["Identity:", "Identity@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20801"])
#loc3531 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20819"])
#loc3532 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20819"])
#loc3533 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20819"])
#loc3534 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20819"])
#loc3535 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20819"])
#loc3536 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20819"])
#loc3537 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20819"])
#loc3538 = loc(fused["NoOp:", "NoOp@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20819"])
#loc3539 = loc(fused["Identity:", "Identity@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_20819"])
#loc3540 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7448"])
#loc3541 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7448"])
#loc3542 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7448"])
#loc3543 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7448"])
#loc3544 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7448"])
#loc3545 = loc(fused["NoOp:", "NoOp@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7448"])
#loc3546 = loc(fused["Identity:", "Identity@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7448"])
#loc3547 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7479"])
#loc3548 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7479"])
#loc3549 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7479"])
#loc3550 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7479"])
#loc3551 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7479"])
#loc3552 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7479"])
#loc3553 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7479"])
#loc3554 = loc(fused["NoOp:", "NoOp@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7479"])
#loc3555 = loc(fused["Identity:", "Identity@__inference_block_9_depthwise_BN_layer_call_and_return_conditional_losses_7479"])
#loc3556 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_9_depthwise_BN_layer_call_fn_20770"])
#loc3557 = loc(fused["NoOp:", "NoOp@__inference_block_9_depthwise_BN_layer_call_fn_20770"])
#loc3558 = loc(fused["Identity:", "Identity@__inference_block_9_depthwise_BN_layer_call_fn_20770"])
#loc3559 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_9_depthwise_BN_layer_call_fn_20783"])
#loc3560 = loc(fused["NoOp:", "NoOp@__inference_block_9_depthwise_BN_layer_call_fn_20783"])
#loc3561 = loc(fused["Identity:", "Identity@__inference_block_9_depthwise_BN_layer_call_fn_20783"])
#loc3562 = loc(fused["Const:", "depthwise/Shape@__inference_block_9_depthwise_layer_call_and_return_conditional_losses_20757"])
#loc3563 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_9_depthwise_layer_call_and_return_conditional_losses_20757"])
#loc3564 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_9_depthwise_layer_call_and_return_conditional_losses_20757"])
#loc3565 = loc(fused["NoOp:", "NoOp@__inference_block_9_depthwise_layer_call_and_return_conditional_losses_20757"])
#loc3566 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_9_depthwise_layer_call_and_return_conditional_losses_20757"])
#loc3567 = loc(fused["Identity:", "Identity@__inference_block_9_depthwise_layer_call_and_return_conditional_losses_20757"])
#loc3568 = loc(fused["Const:", "depthwise/Shape@__inference_block_9_depthwise_layer_call_and_return_conditional_losses_9758"])
#loc3569 = loc(fused["Const:", "depthwise/dilation_rate@__inference_block_9_depthwise_layer_call_and_return_conditional_losses_9758"])
#loc3570 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_block_9_depthwise_layer_call_and_return_conditional_losses_9758"])
#loc3571 = loc(fused["NoOp:", "NoOp@__inference_block_9_depthwise_layer_call_and_return_conditional_losses_9758"])
#loc3572 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_block_9_depthwise_layer_call_and_return_conditional_losses_9758"])
#loc3573 = loc(fused["Identity:", "Identity@__inference_block_9_depthwise_layer_call_and_return_conditional_losses_9758"])
#loc3574 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_9_depthwise_layer_call_fn_20748"])
#loc3575 = loc(fused["NoOp:", "NoOp@__inference_block_9_depthwise_layer_call_fn_20748"])
#loc3576 = loc(fused["Identity:", "Identity@__inference_block_9_depthwise_layer_call_fn_20748"])
#loc3577 = loc(fused["Relu6:", "Relu6@__inference_block_9_depthwise_relu_layer_call_and_return_conditional_losses_20829"])
#loc3578 = loc(fused["Identity:", "Identity@__inference_block_9_depthwise_relu_layer_call_and_return_conditional_losses_20829"])
#loc3579 = loc(fused["Relu6:", "Relu6@__inference_block_9_depthwise_relu_layer_call_and_return_conditional_losses_9776"])
#loc3580 = loc(fused["Identity:", "Identity@__inference_block_9_depthwise_relu_layer_call_and_return_conditional_losses_9776"])
#loc3581 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_9_depthwise_relu_layer_call_fn_20824"])
#loc3582 = loc(fused["Identity:", "Identity@__inference_block_9_depthwise_relu_layer_call_fn_20824"])
#loc3583 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20713"])
#loc3584 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20713"])
#loc3585 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20713"])
#loc3586 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20713"])
#loc3587 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20713"])
#loc3588 = loc(fused["NoOp:", "NoOp@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20713"])
#loc3589 = loc(fused["Identity:", "Identity@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20713"])
#loc3590 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20731"])
#loc3591 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20731"])
#loc3592 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20731"])
#loc3593 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20731"])
#loc3594 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20731"])
#loc3595 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20731"])
#loc3596 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20731"])
#loc3597 = loc(fused["NoOp:", "NoOp@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20731"])
#loc3598 = loc(fused["Identity:", "Identity@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_20731"])
#loc3599 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7384"])
#loc3600 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7384"])
#loc3601 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7384"])
#loc3602 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7384"])
#loc3603 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7384"])
#loc3604 = loc(fused["NoOp:", "NoOp@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7384"])
#loc3605 = loc(fused["Identity:", "Identity@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7384"])
#loc3606 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7415"])
#loc3607 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7415"])
#loc3608 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7415"])
#loc3609 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7415"])
#loc3610 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7415"])
#loc3611 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7415"])
#loc3612 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7415"])
#loc3613 = loc(fused["NoOp:", "NoOp@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7415"])
#loc3614 = loc(fused["Identity:", "Identity@__inference_block_9_expand_BN_layer_call_and_return_conditional_losses_7415"])
#loc3615 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_9_expand_BN_layer_call_fn_20682"])
#loc3616 = loc(fused["NoOp:", "NoOp@__inference_block_9_expand_BN_layer_call_fn_20682"])
#loc3617 = loc(fused["Identity:", "Identity@__inference_block_9_expand_BN_layer_call_fn_20682"])
#loc3618 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_9_expand_BN_layer_call_fn_20695"])
#loc3619 = loc(fused["NoOp:", "NoOp@__inference_block_9_expand_BN_layer_call_fn_20695"])
#loc3620 = loc(fused["Identity:", "Identity@__inference_block_9_expand_BN_layer_call_fn_20695"])
#loc3621 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_9_expand_layer_call_and_return_conditional_losses_20669"])
#loc3622 = loc(fused["NoOp:", "NoOp@__inference_block_9_expand_layer_call_and_return_conditional_losses_20669"])
#loc3623 = loc(fused["Conv2D:", "Conv2D@__inference_block_9_expand_layer_call_and_return_conditional_losses_20669"])
#loc3624 = loc(fused["Identity:", "Identity@__inference_block_9_expand_layer_call_and_return_conditional_losses_20669"])
#loc3625 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_9_expand_layer_call_and_return_conditional_losses_9729"])
#loc3626 = loc(fused["NoOp:", "NoOp@__inference_block_9_expand_layer_call_and_return_conditional_losses_9729"])
#loc3627 = loc(fused["Conv2D:", "Conv2D@__inference_block_9_expand_layer_call_and_return_conditional_losses_9729"])
#loc3628 = loc(fused["Identity:", "Identity@__inference_block_9_expand_layer_call_and_return_conditional_losses_9729"])
#loc3629 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_9_expand_layer_call_fn_20662"])
#loc3630 = loc(fused["NoOp:", "NoOp@__inference_block_9_expand_layer_call_fn_20662"])
#loc3631 = loc(fused["Identity:", "Identity@__inference_block_9_expand_layer_call_fn_20662"])
#loc3632 = loc(fused["Relu6:", "Relu6@__inference_block_9_expand_relu_layer_call_and_return_conditional_losses_20741"])
#loc3633 = loc(fused["Identity:", "Identity@__inference_block_9_expand_relu_layer_call_and_return_conditional_losses_20741"])
#loc3634 = loc(fused["Relu6:", "Relu6@__inference_block_9_expand_relu_layer_call_and_return_conditional_losses_9747"])
#loc3635 = loc(fused["Identity:", "Identity@__inference_block_9_expand_relu_layer_call_and_return_conditional_losses_9747"])
#loc3636 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_block_9_expand_relu_layer_call_fn_20736"])
#loc3637 = loc(fused["Identity:", "Identity@__inference_block_9_expand_relu_layer_call_fn_20736"])
#loc3638 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20887"])
#loc3639 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20887"])
#loc3640 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20887"])
#loc3641 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20887"])
#loc3642 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20887"])
#loc3643 = loc(fused["NoOp:", "NoOp@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20887"])
#loc3644 = loc(fused["Identity:", "Identity@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20887"])
#loc3645 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20905"])
#loc3646 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20905"])
#loc3647 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20905"])
#loc3648 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20905"])
#loc3649 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20905"])
#loc3650 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20905"])
#loc3651 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20905"])
#loc3652 = loc(fused["NoOp:", "NoOp@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20905"])
#loc3653 = loc(fused["Identity:", "Identity@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_20905"])
#loc3654 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7512"])
#loc3655 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7512"])
#loc3656 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7512"])
#loc3657 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7512"])
#loc3658 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7512"])
#loc3659 = loc(fused["NoOp:", "NoOp@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7512"])
#loc3660 = loc(fused["Identity:", "Identity@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7512"])
#loc3661 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7543"])
#loc3662 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7543"])
#loc3663 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7543"])
#loc3664 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7543"])
#loc3665 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7543"])
#loc3666 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7543"])
#loc3667 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7543"])
#loc3668 = loc(fused["NoOp:", "NoOp@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7543"])
#loc3669 = loc(fused["Identity:", "Identity@__inference_block_9_project_BN_layer_call_and_return_conditional_losses_7543"])
#loc3670 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_9_project_BN_layer_call_fn_20856"])
#loc3671 = loc(fused["NoOp:", "NoOp@__inference_block_9_project_BN_layer_call_fn_20856"])
#loc3672 = loc(fused["Identity:", "Identity@__inference_block_9_project_BN_layer_call_fn_20856"])
#loc3673 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_9_project_BN_layer_call_fn_20869"])
#loc3674 = loc(fused["NoOp:", "NoOp@__inference_block_9_project_BN_layer_call_fn_20869"])
#loc3675 = loc(fused["Identity:", "Identity@__inference_block_9_project_BN_layer_call_fn_20869"])
#loc3676 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_9_project_layer_call_and_return_conditional_losses_20843"])
#loc3677 = loc(fused["NoOp:", "NoOp@__inference_block_9_project_layer_call_and_return_conditional_losses_20843"])
#loc3678 = loc(fused["Conv2D:", "Conv2D@__inference_block_9_project_layer_call_and_return_conditional_losses_20843"])
#loc3679 = loc(fused["Identity:", "Identity@__inference_block_9_project_layer_call_and_return_conditional_losses_20843"])
#loc3680 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_block_9_project_layer_call_and_return_conditional_losses_9785"])
#loc3681 = loc(fused["NoOp:", "NoOp@__inference_block_9_project_layer_call_and_return_conditional_losses_9785"])
#loc3682 = loc(fused["Conv2D:", "Conv2D@__inference_block_9_project_layer_call_and_return_conditional_losses_9785"])
#loc3683 = loc(fused["Identity:", "Identity@__inference_block_9_project_layer_call_and_return_conditional_losses_9785"])
#loc3684 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_block_9_project_layer_call_fn_20836"])
#loc3685 = loc(fused["NoOp:", "NoOp@__inference_block_9_project_layer_call_fn_20836"])
#loc3686 = loc(fused["Identity:", "Identity@__inference_block_9_project_layer_call_fn_20836"])
#loc3687 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18370"])
#loc3688 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18370"])
#loc3689 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18370"])
#loc3690 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18370"])
#loc3691 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18370"])
#loc3692 = loc(fused["NoOp:", "NoOp@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18370"])
#loc3693 = loc(fused["Identity:", "Identity@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18370"])
#loc3694 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18388"])
#loc3695 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18388"])
#loc3696 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18388"])
#loc3697 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18388"])
#loc3698 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18388"])
#loc3699 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18388"])
#loc3700 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18388"])
#loc3701 = loc(fused["NoOp:", "NoOp@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18388"])
#loc3702 = loc(fused["Identity:", "Identity@__inference_bn_Conv1_layer_call_and_return_conditional_losses_18388"])
#loc3703 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5617"])
#loc3704 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5617"])
#loc3705 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5617"])
#loc3706 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5617"])
#loc3707 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5617"])
#loc3708 = loc(fused["NoOp:", "NoOp@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5617"])
#loc3709 = loc(fused["Identity:", "Identity@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5617"])
#loc3710 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5648"])
#loc3711 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5648"])
#loc3712 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5648"])
#loc3713 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5648"])
#loc3714 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5648"])
#loc3715 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5648"])
#loc3716 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5648"])
#loc3717 = loc(fused["NoOp:", "NoOp@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5648"])
#loc3718 = loc(fused["Identity:", "Identity@__inference_bn_Conv1_layer_call_and_return_conditional_losses_5648"])
#loc3719 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_bn_Conv1_layer_call_fn_18339"])
#loc3720 = loc(fused["NoOp:", "NoOp@__inference_bn_Conv1_layer_call_fn_18339"])
#loc3721 = loc(fused["Identity:", "Identity@__inference_bn_Conv1_layer_call_fn_18339"])
#loc3722 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_bn_Conv1_layer_call_fn_18352"])
#loc3723 = loc(fused["NoOp:", "NoOp@__inference_bn_Conv1_layer_call_fn_18352"])
#loc3724 = loc(fused["Identity:", "Identity@__inference_bn_Conv1_layer_call_fn_18352"])
#loc3725 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18458"])
#loc3726 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18458"])
#loc3727 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18458"])
#loc3728 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18458"])
#loc3729 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18458"])
#loc3730 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18458"])
#loc3731 = loc(fused["Identity:", "Identity@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18458"])
#loc3732 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18476"])
#loc3733 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18476"])
#loc3734 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18476"])
#loc3735 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18476"])
#loc3736 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18476"])
#loc3737 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18476"])
#loc3738 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18476"])
#loc3739 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18476"])
#loc3740 = loc(fused["Identity:", "Identity@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_18476"])
#loc3741 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5681"])
#loc3742 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5681"])
#loc3743 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5681"])
#loc3744 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5681"])
#loc3745 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5681"])
#loc3746 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5681"])
#loc3747 = loc(fused["Identity:", "Identity@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5681"])
#loc3748 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5712"])
#loc3749 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5712"])
#loc3750 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5712"])
#loc3751 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5712"])
#loc3752 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5712"])
#loc3753 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5712"])
#loc3754 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5712"])
#loc3755 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5712"])
#loc3756 = loc(fused["Identity:", "Identity@__inference_expanded_conv_depthwise_BN_layer_call_and_return_conditional_losses_5712"])
#loc3757 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_expanded_conv_depthwise_BN_layer_call_fn_18427"])
#loc3758 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_depthwise_BN_layer_call_fn_18427"])
#loc3759 = loc(fused["Identity:", "Identity@__inference_expanded_conv_depthwise_BN_layer_call_fn_18427"])
#loc3760 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_expanded_conv_depthwise_BN_layer_call_fn_18440"])
#loc3761 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_depthwise_BN_layer_call_fn_18440"])
#loc3762 = loc(fused["Identity:", "Identity@__inference_expanded_conv_depthwise_BN_layer_call_fn_18440"])
#loc3763 = loc(fused["Const:", "depthwise/Shape@__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_18414"])
#loc3764 = loc(fused["Const:", "depthwise/dilation_rate@__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_18414"])
#loc3765 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_18414"])
#loc3766 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_18414"])
#loc3767 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_18414"])
#loc3768 = loc(fused["Identity:", "Identity@__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_18414"])
#loc3769 = loc(fused["Const:", "depthwise/Shape@__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_9031"])
#loc3770 = loc(fused["Const:", "depthwise/dilation_rate@__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_9031"])
#loc3771 = loc(fused["ReadVariableOp:", "depthwise/ReadVariableOp@__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_9031"])
#loc3772 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_9031"])
#loc3773 = loc(fused["DepthwiseConv2dNative:", "depthwise@__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_9031"])
#loc3774 = loc(fused["Identity:", "Identity@__inference_expanded_conv_depthwise_layer_call_and_return_conditional_losses_9031"])
#loc3775 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_expanded_conv_depthwise_layer_call_fn_18405"])
#loc3776 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_depthwise_layer_call_fn_18405"])
#loc3777 = loc(fused["Identity:", "Identity@__inference_expanded_conv_depthwise_layer_call_fn_18405"])
#loc3778 = loc(fused["Relu6:", "Relu6@__inference_expanded_conv_depthwise_relu_layer_call_and_return_conditional_losses_18486"])
#loc3779 = loc(fused["Identity:", "Identity@__inference_expanded_conv_depthwise_relu_layer_call_and_return_conditional_losses_18486"])
#loc3780 = loc(fused["Relu6:", "Relu6@__inference_expanded_conv_depthwise_relu_layer_call_and_return_conditional_losses_9049"])
#loc3781 = loc(fused["Identity:", "Identity@__inference_expanded_conv_depthwise_relu_layer_call_and_return_conditional_losses_9049"])
#loc3782 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_expanded_conv_depthwise_relu_layer_call_fn_18481"])
#loc3783 = loc(fused["Identity:", "Identity@__inference_expanded_conv_depthwise_relu_layer_call_fn_18481"])
#loc3784 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18544"])
#loc3785 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18544"])
#loc3786 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18544"])
#loc3787 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18544"])
#loc3788 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18544"])
#loc3789 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18544"])
#loc3790 = loc(fused["Identity:", "Identity@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18544"])
#loc3791 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18562"])
#loc3792 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18562"])
#loc3793 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18562"])
#loc3794 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18562"])
#loc3795 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18562"])
#loc3796 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18562"])
#loc3797 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18562"])
#loc3798 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18562"])
#loc3799 = loc(fused["Identity:", "Identity@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_18562"])
#loc3800 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5745"])
#loc3801 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5745"])
#loc3802 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5745"])
#loc3803 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5745"])
#loc3804 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5745"])
#loc3805 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5745"])
#loc3806 = loc(fused["Identity:", "Identity@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5745"])
#loc3807 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp_1@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5776"])
#loc3808 = loc(fused["ReadVariableOp:", "FusedBatchNormV3/ReadVariableOp@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5776"])
#loc3809 = loc(fused["ReadVariableOp:", "ReadVariableOp_1@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5776"])
#loc3810 = loc(fused["ReadVariableOp:", "ReadVariableOp@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5776"])
#loc3811 = loc(fused["FusedBatchNormV3:", "FusedBatchNormV3@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5776"])
#loc3812 = loc(fused["AssignVariableOp:", "AssignNewValue@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5776"])
#loc3813 = loc(fused["AssignVariableOp:", "AssignNewValue_1@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5776"])
#loc3814 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5776"])
#loc3815 = loc(fused["Identity:", "Identity@__inference_expanded_conv_project_BN_layer_call_and_return_conditional_losses_5776"])
#loc3816 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_expanded_conv_project_BN_layer_call_fn_18513"])
#loc3817 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_project_BN_layer_call_fn_18513"])
#loc3818 = loc(fused["Identity:", "Identity@__inference_expanded_conv_project_BN_layer_call_fn_18513"])
#loc3819 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_expanded_conv_project_BN_layer_call_fn_18526"])
#loc3820 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_project_BN_layer_call_fn_18526"])
#loc3821 = loc(fused["Identity:", "Identity@__inference_expanded_conv_project_BN_layer_call_fn_18526"])
#loc3822 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_expanded_conv_project_layer_call_and_return_conditional_losses_18500"])
#loc3823 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_project_layer_call_and_return_conditional_losses_18500"])
#loc3824 = loc(fused["Conv2D:", "Conv2D@__inference_expanded_conv_project_layer_call_and_return_conditional_losses_18500"])
#loc3825 = loc(fused["Identity:", "Identity@__inference_expanded_conv_project_layer_call_and_return_conditional_losses_18500"])
#loc3826 = loc(fused["ReadVariableOp:", "Conv2D/ReadVariableOp@__inference_expanded_conv_project_layer_call_and_return_conditional_losses_9058"])
#loc3827 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_project_layer_call_and_return_conditional_losses_9058"])
#loc3828 = loc(fused["Conv2D:", "Conv2D@__inference_expanded_conv_project_layer_call_and_return_conditional_losses_9058"])
#loc3829 = loc(fused["Identity:", "Identity@__inference_expanded_conv_project_layer_call_and_return_conditional_losses_9058"])
#loc3830 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_expanded_conv_project_layer_call_fn_18493"])
#loc3831 = loc(fused["NoOp:", "NoOp@__inference_expanded_conv_project_layer_call_fn_18493"])
#loc3832 = loc(fused["Identity:", "Identity@__inference_expanded_conv_project_layer_call_fn_18493"])
#loc3833 = loc(fused["Const:", "Mean/reduction_indices@__inference_global_average_pooling2d_layer_call_and_return_conditional_losses_22823"])
#loc3834 = loc(fused["Mean:", "Mean@__inference_global_average_pooling2d_layer_call_and_return_conditional_losses_22823"])
#loc3835 = loc(fused["Identity:", "Identity@__inference_global_average_pooling2d_layer_call_and_return_conditional_losses_22823"])
#loc3836 = loc(fused["Const:", "Mean/reduction_indices@__inference_global_average_pooling2d_layer_call_and_return_conditional_losses_8985"])
#loc3837 = loc(fused["Mean:", "Mean@__inference_global_average_pooling2d_layer_call_and_return_conditional_losses_8985"])
#loc3838 = loc(fused["Identity:", "Identity@__inference_global_average_pooling2d_layer_call_and_return_conditional_losses_8985"])
#loc3839 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_global_average_pooling2d_layer_call_fn_22817"])
#loc3840 = loc(fused["Identity:", "Identity@__inference_global_average_pooling2d_layer_call_fn_22817"])
#loc3841 = loc(fused["StatefulPartitionedCall:", "Conv1/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3842 = loc(fused["StatefulPartitionedCall:", "bn_Conv1/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3843 = loc(fused["PartitionedCall:", "Conv1_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3844 = loc(fused["StatefulPartitionedCall:", "expanded_conv_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3845 = loc(fused["StatefulPartitionedCall:", "expanded_conv_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3846 = loc(fused["PartitionedCall:", "expanded_conv_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3847 = loc(fused["StatefulPartitionedCall:", "expanded_conv_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3848 = loc(fused["StatefulPartitionedCall:", "expanded_conv_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3849 = loc(fused["StatefulPartitionedCall:", "block_1_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3850 = loc(fused["StatefulPartitionedCall:", "block_1_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3851 = loc(fused["PartitionedCall:", "block_1_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3852 = loc(fused["PartitionedCall:", "block_1_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3853 = loc(fused["StatefulPartitionedCall:", "block_1_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3854 = loc(fused["StatefulPartitionedCall:", "block_1_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3855 = loc(fused["PartitionedCall:", "block_1_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3856 = loc(fused["StatefulPartitionedCall:", "block_1_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3857 = loc(fused["StatefulPartitionedCall:", "block_1_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3858 = loc(fused["StatefulPartitionedCall:", "block_2_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3859 = loc(fused["StatefulPartitionedCall:", "block_2_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3860 = loc(fused["PartitionedCall:", "block_2_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3861 = loc(fused["StatefulPartitionedCall:", "block_2_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3862 = loc(fused["StatefulPartitionedCall:", "block_2_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3863 = loc(fused["PartitionedCall:", "block_2_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3864 = loc(fused["StatefulPartitionedCall:", "block_2_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3865 = loc(fused["StatefulPartitionedCall:", "block_2_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3866 = loc(fused["PartitionedCall:", "block_2_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3867 = loc(fused["StatefulPartitionedCall:", "block_3_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3868 = loc(fused["StatefulPartitionedCall:", "block_3_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3869 = loc(fused["PartitionedCall:", "block_3_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3870 = loc(fused["PartitionedCall:", "block_3_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3871 = loc(fused["StatefulPartitionedCall:", "block_3_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3872 = loc(fused["StatefulPartitionedCall:", "block_3_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3873 = loc(fused["PartitionedCall:", "block_3_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3874 = loc(fused["StatefulPartitionedCall:", "block_3_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3875 = loc(fused["StatefulPartitionedCall:", "block_3_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3876 = loc(fused["StatefulPartitionedCall:", "block_4_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3877 = loc(fused["StatefulPartitionedCall:", "block_4_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3878 = loc(fused["PartitionedCall:", "block_4_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3879 = loc(fused["StatefulPartitionedCall:", "block_4_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3880 = loc(fused["StatefulPartitionedCall:", "block_4_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3881 = loc(fused["PartitionedCall:", "block_4_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3882 = loc(fused["StatefulPartitionedCall:", "block_4_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3883 = loc(fused["StatefulPartitionedCall:", "block_4_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3884 = loc(fused["PartitionedCall:", "block_4_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3885 = loc(fused["StatefulPartitionedCall:", "block_5_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3886 = loc(fused["StatefulPartitionedCall:", "block_5_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3887 = loc(fused["PartitionedCall:", "block_5_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3888 = loc(fused["StatefulPartitionedCall:", "block_5_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3889 = loc(fused["StatefulPartitionedCall:", "block_5_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3890 = loc(fused["PartitionedCall:", "block_5_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3891 = loc(fused["StatefulPartitionedCall:", "block_5_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3892 = loc(fused["StatefulPartitionedCall:", "block_5_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3893 = loc(fused["PartitionedCall:", "block_5_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3894 = loc(fused["StatefulPartitionedCall:", "block_6_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3895 = loc(fused["StatefulPartitionedCall:", "block_6_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3896 = loc(fused["PartitionedCall:", "block_6_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3897 = loc(fused["PartitionedCall:", "block_6_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3898 = loc(fused["StatefulPartitionedCall:", "block_6_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3899 = loc(fused["StatefulPartitionedCall:", "block_6_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3900 = loc(fused["PartitionedCall:", "block_6_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3901 = loc(fused["StatefulPartitionedCall:", "block_6_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3902 = loc(fused["StatefulPartitionedCall:", "block_6_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3903 = loc(fused["StatefulPartitionedCall:", "block_7_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3904 = loc(fused["StatefulPartitionedCall:", "block_7_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3905 = loc(fused["PartitionedCall:", "block_7_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3906 = loc(fused["StatefulPartitionedCall:", "block_7_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3907 = loc(fused["StatefulPartitionedCall:", "block_7_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3908 = loc(fused["PartitionedCall:", "block_7_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3909 = loc(fused["StatefulPartitionedCall:", "block_7_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3910 = loc(fused["StatefulPartitionedCall:", "block_7_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3911 = loc(fused["PartitionedCall:", "block_7_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3912 = loc(fused["StatefulPartitionedCall:", "block_8_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3913 = loc(fused["StatefulPartitionedCall:", "block_8_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3914 = loc(fused["PartitionedCall:", "block_8_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3915 = loc(fused["StatefulPartitionedCall:", "block_8_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3916 = loc(fused["StatefulPartitionedCall:", "block_8_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3917 = loc(fused["PartitionedCall:", "block_8_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3918 = loc(fused["StatefulPartitionedCall:", "block_8_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3919 = loc(fused["StatefulPartitionedCall:", "block_8_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3920 = loc(fused["PartitionedCall:", "block_8_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3921 = loc(fused["StatefulPartitionedCall:", "block_9_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3922 = loc(fused["StatefulPartitionedCall:", "block_9_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3923 = loc(fused["PartitionedCall:", "block_9_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3924 = loc(fused["StatefulPartitionedCall:", "block_9_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3925 = loc(fused["StatefulPartitionedCall:", "block_9_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3926 = loc(fused["PartitionedCall:", "block_9_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3927 = loc(fused["StatefulPartitionedCall:", "block_9_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3928 = loc(fused["StatefulPartitionedCall:", "block_9_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3929 = loc(fused["PartitionedCall:", "block_9_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3930 = loc(fused["StatefulPartitionedCall:", "block_10_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3931 = loc(fused["StatefulPartitionedCall:", "block_10_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3932 = loc(fused["PartitionedCall:", "block_10_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3933 = loc(fused["StatefulPartitionedCall:", "block_10_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3934 = loc(fused["StatefulPartitionedCall:", "block_10_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3935 = loc(fused["PartitionedCall:", "block_10_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3936 = loc(fused["StatefulPartitionedCall:", "block_10_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3937 = loc(fused["StatefulPartitionedCall:", "block_10_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3938 = loc(fused["StatefulPartitionedCall:", "block_11_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3939 = loc(fused["StatefulPartitionedCall:", "block_11_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3940 = loc(fused["PartitionedCall:", "block_11_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3941 = loc(fused["StatefulPartitionedCall:", "block_11_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3942 = loc(fused["StatefulPartitionedCall:", "block_11_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3943 = loc(fused["PartitionedCall:", "block_11_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3944 = loc(fused["StatefulPartitionedCall:", "block_11_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3945 = loc(fused["StatefulPartitionedCall:", "block_11_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3946 = loc(fused["PartitionedCall:", "block_11_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3947 = loc(fused["StatefulPartitionedCall:", "block_12_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3948 = loc(fused["StatefulPartitionedCall:", "block_12_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3949 = loc(fused["PartitionedCall:", "block_12_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3950 = loc(fused["StatefulPartitionedCall:", "block_12_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3951 = loc(fused["StatefulPartitionedCall:", "block_12_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3952 = loc(fused["PartitionedCall:", "block_12_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3953 = loc(fused["StatefulPartitionedCall:", "block_12_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3954 = loc(fused["StatefulPartitionedCall:", "block_12_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3955 = loc(fused["PartitionedCall:", "block_12_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3956 = loc(fused["StatefulPartitionedCall:", "block_13_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3957 = loc(fused["StatefulPartitionedCall:", "block_13_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3958 = loc(fused["PartitionedCall:", "block_13_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3959 = loc(fused["PartitionedCall:", "block_13_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3960 = loc(fused["StatefulPartitionedCall:", "block_13_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3961 = loc(fused["StatefulPartitionedCall:", "block_13_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3962 = loc(fused["PartitionedCall:", "block_13_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3963 = loc(fused["StatefulPartitionedCall:", "block_13_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3964 = loc(fused["StatefulPartitionedCall:", "block_13_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3965 = loc(fused["StatefulPartitionedCall:", "block_14_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3966 = loc(fused["StatefulPartitionedCall:", "block_14_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3967 = loc(fused["PartitionedCall:", "block_14_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3968 = loc(fused["StatefulPartitionedCall:", "block_14_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3969 = loc(fused["StatefulPartitionedCall:", "block_14_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3970 = loc(fused["PartitionedCall:", "block_14_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3971 = loc(fused["StatefulPartitionedCall:", "block_14_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3972 = loc(fused["StatefulPartitionedCall:", "block_14_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3973 = loc(fused["PartitionedCall:", "block_14_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3974 = loc(fused["StatefulPartitionedCall:", "block_15_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3975 = loc(fused["StatefulPartitionedCall:", "block_15_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3976 = loc(fused["PartitionedCall:", "block_15_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3977 = loc(fused["StatefulPartitionedCall:", "block_15_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3978 = loc(fused["StatefulPartitionedCall:", "block_15_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3979 = loc(fused["PartitionedCall:", "block_15_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3980 = loc(fused["StatefulPartitionedCall:", "block_15_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3981 = loc(fused["StatefulPartitionedCall:", "block_15_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3982 = loc(fused["PartitionedCall:", "block_15_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3983 = loc(fused["StatefulPartitionedCall:", "block_16_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3984 = loc(fused["StatefulPartitionedCall:", "block_16_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3985 = loc(fused["PartitionedCall:", "block_16_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3986 = loc(fused["StatefulPartitionedCall:", "block_16_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3987 = loc(fused["StatefulPartitionedCall:", "block_16_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3988 = loc(fused["PartitionedCall:", "block_16_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3989 = loc(fused["StatefulPartitionedCall:", "block_16_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3990 = loc(fused["StatefulPartitionedCall:", "block_16_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3991 = loc(fused["StatefulPartitionedCall:", "Conv_1/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3992 = loc(fused["StatefulPartitionedCall:", "Conv_1_bn/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3993 = loc(fused["PartitionedCall:", "out_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3994 = loc(fused["PartitionedCall:", "global_average_pooling2d/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3995 = loc(fused["StatefulPartitionedCall:", "predictions/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3996 = loc(fused["NoOp:", "NoOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3997 = loc(fused["Identity:", "Identity@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_10417"])
#loc3998 = loc(fused["StatefulPartitionedCall:", "Conv1/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc3999 = loc(fused["StatefulPartitionedCall:", "bn_Conv1/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4000 = loc(fused["PartitionedCall:", "Conv1_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4001 = loc(fused["StatefulPartitionedCall:", "expanded_conv_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4002 = loc(fused["StatefulPartitionedCall:", "expanded_conv_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4003 = loc(fused["PartitionedCall:", "expanded_conv_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4004 = loc(fused["StatefulPartitionedCall:", "expanded_conv_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4005 = loc(fused["StatefulPartitionedCall:", "expanded_conv_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4006 = loc(fused["StatefulPartitionedCall:", "block_1_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4007 = loc(fused["StatefulPartitionedCall:", "block_1_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4008 = loc(fused["PartitionedCall:", "block_1_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4009 = loc(fused["PartitionedCall:", "block_1_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4010 = loc(fused["StatefulPartitionedCall:", "block_1_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4011 = loc(fused["StatefulPartitionedCall:", "block_1_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4012 = loc(fused["PartitionedCall:", "block_1_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4013 = loc(fused["StatefulPartitionedCall:", "block_1_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4014 = loc(fused["StatefulPartitionedCall:", "block_1_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4015 = loc(fused["StatefulPartitionedCall:", "block_2_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4016 = loc(fused["StatefulPartitionedCall:", "block_2_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4017 = loc(fused["PartitionedCall:", "block_2_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4018 = loc(fused["StatefulPartitionedCall:", "block_2_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4019 = loc(fused["StatefulPartitionedCall:", "block_2_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4020 = loc(fused["PartitionedCall:", "block_2_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4021 = loc(fused["StatefulPartitionedCall:", "block_2_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4022 = loc(fused["StatefulPartitionedCall:", "block_2_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4023 = loc(fused["PartitionedCall:", "block_2_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4024 = loc(fused["StatefulPartitionedCall:", "block_3_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4025 = loc(fused["StatefulPartitionedCall:", "block_3_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4026 = loc(fused["PartitionedCall:", "block_3_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4027 = loc(fused["PartitionedCall:", "block_3_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4028 = loc(fused["StatefulPartitionedCall:", "block_3_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4029 = loc(fused["StatefulPartitionedCall:", "block_3_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4030 = loc(fused["PartitionedCall:", "block_3_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4031 = loc(fused["StatefulPartitionedCall:", "block_3_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4032 = loc(fused["StatefulPartitionedCall:", "block_3_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4033 = loc(fused["StatefulPartitionedCall:", "block_4_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4034 = loc(fused["StatefulPartitionedCall:", "block_4_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4035 = loc(fused["PartitionedCall:", "block_4_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4036 = loc(fused["StatefulPartitionedCall:", "block_4_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4037 = loc(fused["StatefulPartitionedCall:", "block_4_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4038 = loc(fused["PartitionedCall:", "block_4_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4039 = loc(fused["StatefulPartitionedCall:", "block_4_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4040 = loc(fused["StatefulPartitionedCall:", "block_4_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4041 = loc(fused["PartitionedCall:", "block_4_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4042 = loc(fused["StatefulPartitionedCall:", "block_5_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4043 = loc(fused["StatefulPartitionedCall:", "block_5_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4044 = loc(fused["PartitionedCall:", "block_5_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4045 = loc(fused["StatefulPartitionedCall:", "block_5_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4046 = loc(fused["StatefulPartitionedCall:", "block_5_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4047 = loc(fused["PartitionedCall:", "block_5_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4048 = loc(fused["StatefulPartitionedCall:", "block_5_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4049 = loc(fused["StatefulPartitionedCall:", "block_5_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4050 = loc(fused["PartitionedCall:", "block_5_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4051 = loc(fused["StatefulPartitionedCall:", "block_6_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4052 = loc(fused["StatefulPartitionedCall:", "block_6_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4053 = loc(fused["PartitionedCall:", "block_6_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4054 = loc(fused["PartitionedCall:", "block_6_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4055 = loc(fused["StatefulPartitionedCall:", "block_6_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4056 = loc(fused["StatefulPartitionedCall:", "block_6_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4057 = loc(fused["PartitionedCall:", "block_6_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4058 = loc(fused["StatefulPartitionedCall:", "block_6_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4059 = loc(fused["StatefulPartitionedCall:", "block_6_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4060 = loc(fused["StatefulPartitionedCall:", "block_7_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4061 = loc(fused["StatefulPartitionedCall:", "block_7_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4062 = loc(fused["PartitionedCall:", "block_7_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4063 = loc(fused["StatefulPartitionedCall:", "block_7_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4064 = loc(fused["StatefulPartitionedCall:", "block_7_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4065 = loc(fused["PartitionedCall:", "block_7_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4066 = loc(fused["StatefulPartitionedCall:", "block_7_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4067 = loc(fused["StatefulPartitionedCall:", "block_7_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4068 = loc(fused["PartitionedCall:", "block_7_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4069 = loc(fused["StatefulPartitionedCall:", "block_8_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4070 = loc(fused["StatefulPartitionedCall:", "block_8_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4071 = loc(fused["PartitionedCall:", "block_8_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4072 = loc(fused["StatefulPartitionedCall:", "block_8_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4073 = loc(fused["StatefulPartitionedCall:", "block_8_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4074 = loc(fused["PartitionedCall:", "block_8_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4075 = loc(fused["StatefulPartitionedCall:", "block_8_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4076 = loc(fused["StatefulPartitionedCall:", "block_8_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4077 = loc(fused["PartitionedCall:", "block_8_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4078 = loc(fused["StatefulPartitionedCall:", "block_9_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4079 = loc(fused["StatefulPartitionedCall:", "block_9_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4080 = loc(fused["PartitionedCall:", "block_9_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4081 = loc(fused["StatefulPartitionedCall:", "block_9_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4082 = loc(fused["StatefulPartitionedCall:", "block_9_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4083 = loc(fused["PartitionedCall:", "block_9_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4084 = loc(fused["StatefulPartitionedCall:", "block_9_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4085 = loc(fused["StatefulPartitionedCall:", "block_9_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4086 = loc(fused["PartitionedCall:", "block_9_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4087 = loc(fused["StatefulPartitionedCall:", "block_10_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4088 = loc(fused["StatefulPartitionedCall:", "block_10_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4089 = loc(fused["PartitionedCall:", "block_10_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4090 = loc(fused["StatefulPartitionedCall:", "block_10_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4091 = loc(fused["StatefulPartitionedCall:", "block_10_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4092 = loc(fused["PartitionedCall:", "block_10_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4093 = loc(fused["StatefulPartitionedCall:", "block_10_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4094 = loc(fused["StatefulPartitionedCall:", "block_10_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4095 = loc(fused["StatefulPartitionedCall:", "block_11_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4096 = loc(fused["StatefulPartitionedCall:", "block_11_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4097 = loc(fused["PartitionedCall:", "block_11_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4098 = loc(fused["StatefulPartitionedCall:", "block_11_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4099 = loc(fused["StatefulPartitionedCall:", "block_11_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4100 = loc(fused["PartitionedCall:", "block_11_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4101 = loc(fused["StatefulPartitionedCall:", "block_11_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4102 = loc(fused["StatefulPartitionedCall:", "block_11_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4103 = loc(fused["PartitionedCall:", "block_11_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4104 = loc(fused["StatefulPartitionedCall:", "block_12_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4105 = loc(fused["StatefulPartitionedCall:", "block_12_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4106 = loc(fused["PartitionedCall:", "block_12_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4107 = loc(fused["StatefulPartitionedCall:", "block_12_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4108 = loc(fused["StatefulPartitionedCall:", "block_12_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4109 = loc(fused["PartitionedCall:", "block_12_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4110 = loc(fused["StatefulPartitionedCall:", "block_12_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4111 = loc(fused["StatefulPartitionedCall:", "block_12_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4112 = loc(fused["PartitionedCall:", "block_12_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4113 = loc(fused["StatefulPartitionedCall:", "block_13_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4114 = loc(fused["StatefulPartitionedCall:", "block_13_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4115 = loc(fused["PartitionedCall:", "block_13_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4116 = loc(fused["PartitionedCall:", "block_13_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4117 = loc(fused["StatefulPartitionedCall:", "block_13_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4118 = loc(fused["StatefulPartitionedCall:", "block_13_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4119 = loc(fused["PartitionedCall:", "block_13_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4120 = loc(fused["StatefulPartitionedCall:", "block_13_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4121 = loc(fused["StatefulPartitionedCall:", "block_13_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4122 = loc(fused["StatefulPartitionedCall:", "block_14_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4123 = loc(fused["StatefulPartitionedCall:", "block_14_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4124 = loc(fused["PartitionedCall:", "block_14_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4125 = loc(fused["StatefulPartitionedCall:", "block_14_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4126 = loc(fused["StatefulPartitionedCall:", "block_14_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4127 = loc(fused["PartitionedCall:", "block_14_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4128 = loc(fused["StatefulPartitionedCall:", "block_14_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4129 = loc(fused["StatefulPartitionedCall:", "block_14_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4130 = loc(fused["PartitionedCall:", "block_14_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4131 = loc(fused["StatefulPartitionedCall:", "block_15_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4132 = loc(fused["StatefulPartitionedCall:", "block_15_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4133 = loc(fused["PartitionedCall:", "block_15_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4134 = loc(fused["StatefulPartitionedCall:", "block_15_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4135 = loc(fused["StatefulPartitionedCall:", "block_15_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4136 = loc(fused["PartitionedCall:", "block_15_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4137 = loc(fused["StatefulPartitionedCall:", "block_15_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4138 = loc(fused["StatefulPartitionedCall:", "block_15_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4139 = loc(fused["PartitionedCall:", "block_15_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4140 = loc(fused["StatefulPartitionedCall:", "block_16_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4141 = loc(fused["StatefulPartitionedCall:", "block_16_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4142 = loc(fused["PartitionedCall:", "block_16_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4143 = loc(fused["StatefulPartitionedCall:", "block_16_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4144 = loc(fused["StatefulPartitionedCall:", "block_16_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4145 = loc(fused["PartitionedCall:", "block_16_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4146 = loc(fused["StatefulPartitionedCall:", "block_16_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4147 = loc(fused["StatefulPartitionedCall:", "block_16_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4148 = loc(fused["StatefulPartitionedCall:", "Conv_1/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4149 = loc(fused["StatefulPartitionedCall:", "Conv_1_bn/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4150 = loc(fused["PartitionedCall:", "out_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4151 = loc(fused["PartitionedCall:", "global_average_pooling2d/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4152 = loc(fused["StatefulPartitionedCall:", "predictions/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4153 = loc(fused["NoOp:", "NoOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4154 = loc(fused["Identity:", "Identity@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_12864"])
#loc4155 = loc(fused["StatefulPartitionedCall:", "Conv1/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4156 = loc(fused["StatefulPartitionedCall:", "bn_Conv1/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4157 = loc(fused["PartitionedCall:", "Conv1_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4158 = loc(fused["StatefulPartitionedCall:", "expanded_conv_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4159 = loc(fused["StatefulPartitionedCall:", "expanded_conv_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4160 = loc(fused["PartitionedCall:", "expanded_conv_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4161 = loc(fused["StatefulPartitionedCall:", "expanded_conv_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4162 = loc(fused["StatefulPartitionedCall:", "expanded_conv_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4163 = loc(fused["StatefulPartitionedCall:", "block_1_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4164 = loc(fused["StatefulPartitionedCall:", "block_1_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4165 = loc(fused["PartitionedCall:", "block_1_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4166 = loc(fused["PartitionedCall:", "block_1_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4167 = loc(fused["StatefulPartitionedCall:", "block_1_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4168 = loc(fused["StatefulPartitionedCall:", "block_1_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4169 = loc(fused["PartitionedCall:", "block_1_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4170 = loc(fused["StatefulPartitionedCall:", "block_1_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4171 = loc(fused["StatefulPartitionedCall:", "block_1_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4172 = loc(fused["StatefulPartitionedCall:", "block_2_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4173 = loc(fused["StatefulPartitionedCall:", "block_2_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4174 = loc(fused["PartitionedCall:", "block_2_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4175 = loc(fused["StatefulPartitionedCall:", "block_2_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4176 = loc(fused["StatefulPartitionedCall:", "block_2_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4177 = loc(fused["PartitionedCall:", "block_2_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4178 = loc(fused["StatefulPartitionedCall:", "block_2_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4179 = loc(fused["StatefulPartitionedCall:", "block_2_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4180 = loc(fused["PartitionedCall:", "block_2_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4181 = loc(fused["StatefulPartitionedCall:", "block_3_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4182 = loc(fused["StatefulPartitionedCall:", "block_3_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4183 = loc(fused["PartitionedCall:", "block_3_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4184 = loc(fused["PartitionedCall:", "block_3_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4185 = loc(fused["StatefulPartitionedCall:", "block_3_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4186 = loc(fused["StatefulPartitionedCall:", "block_3_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4187 = loc(fused["PartitionedCall:", "block_3_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4188 = loc(fused["StatefulPartitionedCall:", "block_3_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4189 = loc(fused["StatefulPartitionedCall:", "block_3_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4190 = loc(fused["StatefulPartitionedCall:", "block_4_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4191 = loc(fused["StatefulPartitionedCall:", "block_4_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4192 = loc(fused["PartitionedCall:", "block_4_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4193 = loc(fused["StatefulPartitionedCall:", "block_4_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4194 = loc(fused["StatefulPartitionedCall:", "block_4_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4195 = loc(fused["PartitionedCall:", "block_4_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4196 = loc(fused["StatefulPartitionedCall:", "block_4_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4197 = loc(fused["StatefulPartitionedCall:", "block_4_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4198 = loc(fused["PartitionedCall:", "block_4_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4199 = loc(fused["StatefulPartitionedCall:", "block_5_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4200 = loc(fused["StatefulPartitionedCall:", "block_5_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4201 = loc(fused["PartitionedCall:", "block_5_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4202 = loc(fused["StatefulPartitionedCall:", "block_5_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4203 = loc(fused["StatefulPartitionedCall:", "block_5_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4204 = loc(fused["PartitionedCall:", "block_5_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4205 = loc(fused["StatefulPartitionedCall:", "block_5_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4206 = loc(fused["StatefulPartitionedCall:", "block_5_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4207 = loc(fused["PartitionedCall:", "block_5_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4208 = loc(fused["StatefulPartitionedCall:", "block_6_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4209 = loc(fused["StatefulPartitionedCall:", "block_6_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4210 = loc(fused["PartitionedCall:", "block_6_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4211 = loc(fused["PartitionedCall:", "block_6_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4212 = loc(fused["StatefulPartitionedCall:", "block_6_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4213 = loc(fused["StatefulPartitionedCall:", "block_6_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4214 = loc(fused["PartitionedCall:", "block_6_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4215 = loc(fused["StatefulPartitionedCall:", "block_6_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4216 = loc(fused["StatefulPartitionedCall:", "block_6_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4217 = loc(fused["StatefulPartitionedCall:", "block_7_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4218 = loc(fused["StatefulPartitionedCall:", "block_7_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4219 = loc(fused["PartitionedCall:", "block_7_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4220 = loc(fused["StatefulPartitionedCall:", "block_7_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4221 = loc(fused["StatefulPartitionedCall:", "block_7_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4222 = loc(fused["PartitionedCall:", "block_7_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4223 = loc(fused["StatefulPartitionedCall:", "block_7_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4224 = loc(fused["StatefulPartitionedCall:", "block_7_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4225 = loc(fused["PartitionedCall:", "block_7_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4226 = loc(fused["StatefulPartitionedCall:", "block_8_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4227 = loc(fused["StatefulPartitionedCall:", "block_8_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4228 = loc(fused["PartitionedCall:", "block_8_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4229 = loc(fused["StatefulPartitionedCall:", "block_8_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4230 = loc(fused["StatefulPartitionedCall:", "block_8_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4231 = loc(fused["PartitionedCall:", "block_8_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4232 = loc(fused["StatefulPartitionedCall:", "block_8_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4233 = loc(fused["StatefulPartitionedCall:", "block_8_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4234 = loc(fused["PartitionedCall:", "block_8_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4235 = loc(fused["StatefulPartitionedCall:", "block_9_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4236 = loc(fused["StatefulPartitionedCall:", "block_9_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4237 = loc(fused["PartitionedCall:", "block_9_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4238 = loc(fused["StatefulPartitionedCall:", "block_9_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4239 = loc(fused["StatefulPartitionedCall:", "block_9_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4240 = loc(fused["PartitionedCall:", "block_9_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4241 = loc(fused["StatefulPartitionedCall:", "block_9_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4242 = loc(fused["StatefulPartitionedCall:", "block_9_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4243 = loc(fused["PartitionedCall:", "block_9_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4244 = loc(fused["StatefulPartitionedCall:", "block_10_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4245 = loc(fused["StatefulPartitionedCall:", "block_10_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4246 = loc(fused["PartitionedCall:", "block_10_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4247 = loc(fused["StatefulPartitionedCall:", "block_10_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4248 = loc(fused["StatefulPartitionedCall:", "block_10_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4249 = loc(fused["PartitionedCall:", "block_10_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4250 = loc(fused["StatefulPartitionedCall:", "block_10_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4251 = loc(fused["StatefulPartitionedCall:", "block_10_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4252 = loc(fused["StatefulPartitionedCall:", "block_11_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4253 = loc(fused["StatefulPartitionedCall:", "block_11_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4254 = loc(fused["PartitionedCall:", "block_11_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4255 = loc(fused["StatefulPartitionedCall:", "block_11_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4256 = loc(fused["StatefulPartitionedCall:", "block_11_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4257 = loc(fused["PartitionedCall:", "block_11_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4258 = loc(fused["StatefulPartitionedCall:", "block_11_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4259 = loc(fused["StatefulPartitionedCall:", "block_11_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4260 = loc(fused["PartitionedCall:", "block_11_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4261 = loc(fused["StatefulPartitionedCall:", "block_12_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4262 = loc(fused["StatefulPartitionedCall:", "block_12_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4263 = loc(fused["PartitionedCall:", "block_12_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4264 = loc(fused["StatefulPartitionedCall:", "block_12_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4265 = loc(fused["StatefulPartitionedCall:", "block_12_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4266 = loc(fused["PartitionedCall:", "block_12_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4267 = loc(fused["StatefulPartitionedCall:", "block_12_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4268 = loc(fused["StatefulPartitionedCall:", "block_12_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4269 = loc(fused["PartitionedCall:", "block_12_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4270 = loc(fused["StatefulPartitionedCall:", "block_13_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4271 = loc(fused["StatefulPartitionedCall:", "block_13_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4272 = loc(fused["PartitionedCall:", "block_13_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4273 = loc(fused["PartitionedCall:", "block_13_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4274 = loc(fused["StatefulPartitionedCall:", "block_13_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4275 = loc(fused["StatefulPartitionedCall:", "block_13_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4276 = loc(fused["PartitionedCall:", "block_13_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4277 = loc(fused["StatefulPartitionedCall:", "block_13_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4278 = loc(fused["StatefulPartitionedCall:", "block_13_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4279 = loc(fused["StatefulPartitionedCall:", "block_14_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4280 = loc(fused["StatefulPartitionedCall:", "block_14_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4281 = loc(fused["PartitionedCall:", "block_14_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4282 = loc(fused["StatefulPartitionedCall:", "block_14_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4283 = loc(fused["StatefulPartitionedCall:", "block_14_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4284 = loc(fused["PartitionedCall:", "block_14_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4285 = loc(fused["StatefulPartitionedCall:", "block_14_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4286 = loc(fused["StatefulPartitionedCall:", "block_14_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4287 = loc(fused["PartitionedCall:", "block_14_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4288 = loc(fused["StatefulPartitionedCall:", "block_15_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4289 = loc(fused["StatefulPartitionedCall:", "block_15_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4290 = loc(fused["PartitionedCall:", "block_15_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4291 = loc(fused["StatefulPartitionedCall:", "block_15_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4292 = loc(fused["StatefulPartitionedCall:", "block_15_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4293 = loc(fused["PartitionedCall:", "block_15_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4294 = loc(fused["StatefulPartitionedCall:", "block_15_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4295 = loc(fused["StatefulPartitionedCall:", "block_15_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4296 = loc(fused["PartitionedCall:", "block_15_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4297 = loc(fused["StatefulPartitionedCall:", "block_16_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4298 = loc(fused["StatefulPartitionedCall:", "block_16_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4299 = loc(fused["PartitionedCall:", "block_16_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4300 = loc(fused["StatefulPartitionedCall:", "block_16_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4301 = loc(fused["StatefulPartitionedCall:", "block_16_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4302 = loc(fused["PartitionedCall:", "block_16_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4303 = loc(fused["StatefulPartitionedCall:", "block_16_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4304 = loc(fused["StatefulPartitionedCall:", "block_16_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4305 = loc(fused["StatefulPartitionedCall:", "Conv_1/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4306 = loc(fused["StatefulPartitionedCall:", "Conv_1_bn/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4307 = loc(fused["PartitionedCall:", "out_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4308 = loc(fused["PartitionedCall:", "global_average_pooling2d/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4309 = loc(fused["StatefulPartitionedCall:", "predictions/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4310 = loc(fused["NoOp:", "NoOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4311 = loc(fused["Identity:", "Identity@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_14603"])
#loc4312 = loc(fused["StatefulPartitionedCall:", "Conv1/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4313 = loc(fused["StatefulPartitionedCall:", "bn_Conv1/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4314 = loc(fused["PartitionedCall:", "Conv1_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4315 = loc(fused["StatefulPartitionedCall:", "expanded_conv_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4316 = loc(fused["StatefulPartitionedCall:", "expanded_conv_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4317 = loc(fused["PartitionedCall:", "expanded_conv_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4318 = loc(fused["StatefulPartitionedCall:", "expanded_conv_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4319 = loc(fused["StatefulPartitionedCall:", "expanded_conv_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4320 = loc(fused["StatefulPartitionedCall:", "block_1_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4321 = loc(fused["StatefulPartitionedCall:", "block_1_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4322 = loc(fused["PartitionedCall:", "block_1_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4323 = loc(fused["PartitionedCall:", "block_1_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4324 = loc(fused["StatefulPartitionedCall:", "block_1_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4325 = loc(fused["StatefulPartitionedCall:", "block_1_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4326 = loc(fused["PartitionedCall:", "block_1_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4327 = loc(fused["StatefulPartitionedCall:", "block_1_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4328 = loc(fused["StatefulPartitionedCall:", "block_1_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4329 = loc(fused["StatefulPartitionedCall:", "block_2_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4330 = loc(fused["StatefulPartitionedCall:", "block_2_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4331 = loc(fused["PartitionedCall:", "block_2_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4332 = loc(fused["StatefulPartitionedCall:", "block_2_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4333 = loc(fused["StatefulPartitionedCall:", "block_2_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4334 = loc(fused["PartitionedCall:", "block_2_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4335 = loc(fused["StatefulPartitionedCall:", "block_2_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4336 = loc(fused["StatefulPartitionedCall:", "block_2_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4337 = loc(fused["PartitionedCall:", "block_2_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4338 = loc(fused["StatefulPartitionedCall:", "block_3_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4339 = loc(fused["StatefulPartitionedCall:", "block_3_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4340 = loc(fused["PartitionedCall:", "block_3_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4341 = loc(fused["PartitionedCall:", "block_3_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4342 = loc(fused["StatefulPartitionedCall:", "block_3_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4343 = loc(fused["StatefulPartitionedCall:", "block_3_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4344 = loc(fused["PartitionedCall:", "block_3_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4345 = loc(fused["StatefulPartitionedCall:", "block_3_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4346 = loc(fused["StatefulPartitionedCall:", "block_3_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4347 = loc(fused["StatefulPartitionedCall:", "block_4_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4348 = loc(fused["StatefulPartitionedCall:", "block_4_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4349 = loc(fused["PartitionedCall:", "block_4_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4350 = loc(fused["StatefulPartitionedCall:", "block_4_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4351 = loc(fused["StatefulPartitionedCall:", "block_4_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4352 = loc(fused["PartitionedCall:", "block_4_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4353 = loc(fused["StatefulPartitionedCall:", "block_4_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4354 = loc(fused["StatefulPartitionedCall:", "block_4_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4355 = loc(fused["PartitionedCall:", "block_4_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4356 = loc(fused["StatefulPartitionedCall:", "block_5_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4357 = loc(fused["StatefulPartitionedCall:", "block_5_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4358 = loc(fused["PartitionedCall:", "block_5_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4359 = loc(fused["StatefulPartitionedCall:", "block_5_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4360 = loc(fused["StatefulPartitionedCall:", "block_5_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4361 = loc(fused["PartitionedCall:", "block_5_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4362 = loc(fused["StatefulPartitionedCall:", "block_5_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4363 = loc(fused["StatefulPartitionedCall:", "block_5_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4364 = loc(fused["PartitionedCall:", "block_5_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4365 = loc(fused["StatefulPartitionedCall:", "block_6_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4366 = loc(fused["StatefulPartitionedCall:", "block_6_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4367 = loc(fused["PartitionedCall:", "block_6_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4368 = loc(fused["PartitionedCall:", "block_6_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4369 = loc(fused["StatefulPartitionedCall:", "block_6_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4370 = loc(fused["StatefulPartitionedCall:", "block_6_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4371 = loc(fused["PartitionedCall:", "block_6_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4372 = loc(fused["StatefulPartitionedCall:", "block_6_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4373 = loc(fused["StatefulPartitionedCall:", "block_6_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4374 = loc(fused["StatefulPartitionedCall:", "block_7_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4375 = loc(fused["StatefulPartitionedCall:", "block_7_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4376 = loc(fused["PartitionedCall:", "block_7_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4377 = loc(fused["StatefulPartitionedCall:", "block_7_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4378 = loc(fused["StatefulPartitionedCall:", "block_7_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4379 = loc(fused["PartitionedCall:", "block_7_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4380 = loc(fused["StatefulPartitionedCall:", "block_7_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4381 = loc(fused["StatefulPartitionedCall:", "block_7_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4382 = loc(fused["PartitionedCall:", "block_7_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4383 = loc(fused["StatefulPartitionedCall:", "block_8_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4384 = loc(fused["StatefulPartitionedCall:", "block_8_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4385 = loc(fused["PartitionedCall:", "block_8_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4386 = loc(fused["StatefulPartitionedCall:", "block_8_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4387 = loc(fused["StatefulPartitionedCall:", "block_8_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4388 = loc(fused["PartitionedCall:", "block_8_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4389 = loc(fused["StatefulPartitionedCall:", "block_8_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4390 = loc(fused["StatefulPartitionedCall:", "block_8_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4391 = loc(fused["PartitionedCall:", "block_8_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4392 = loc(fused["StatefulPartitionedCall:", "block_9_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4393 = loc(fused["StatefulPartitionedCall:", "block_9_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4394 = loc(fused["PartitionedCall:", "block_9_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4395 = loc(fused["StatefulPartitionedCall:", "block_9_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4396 = loc(fused["StatefulPartitionedCall:", "block_9_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4397 = loc(fused["PartitionedCall:", "block_9_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4398 = loc(fused["StatefulPartitionedCall:", "block_9_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4399 = loc(fused["StatefulPartitionedCall:", "block_9_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4400 = loc(fused["PartitionedCall:", "block_9_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4401 = loc(fused["StatefulPartitionedCall:", "block_10_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4402 = loc(fused["StatefulPartitionedCall:", "block_10_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4403 = loc(fused["PartitionedCall:", "block_10_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4404 = loc(fused["StatefulPartitionedCall:", "block_10_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4405 = loc(fused["StatefulPartitionedCall:", "block_10_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4406 = loc(fused["PartitionedCall:", "block_10_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4407 = loc(fused["StatefulPartitionedCall:", "block_10_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4408 = loc(fused["StatefulPartitionedCall:", "block_10_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4409 = loc(fused["StatefulPartitionedCall:", "block_11_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4410 = loc(fused["StatefulPartitionedCall:", "block_11_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4411 = loc(fused["PartitionedCall:", "block_11_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4412 = loc(fused["StatefulPartitionedCall:", "block_11_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4413 = loc(fused["StatefulPartitionedCall:", "block_11_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4414 = loc(fused["PartitionedCall:", "block_11_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4415 = loc(fused["StatefulPartitionedCall:", "block_11_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4416 = loc(fused["StatefulPartitionedCall:", "block_11_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4417 = loc(fused["PartitionedCall:", "block_11_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4418 = loc(fused["StatefulPartitionedCall:", "block_12_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4419 = loc(fused["StatefulPartitionedCall:", "block_12_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4420 = loc(fused["PartitionedCall:", "block_12_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4421 = loc(fused["StatefulPartitionedCall:", "block_12_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4422 = loc(fused["StatefulPartitionedCall:", "block_12_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4423 = loc(fused["PartitionedCall:", "block_12_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4424 = loc(fused["StatefulPartitionedCall:", "block_12_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4425 = loc(fused["StatefulPartitionedCall:", "block_12_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4426 = loc(fused["PartitionedCall:", "block_12_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4427 = loc(fused["StatefulPartitionedCall:", "block_13_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4428 = loc(fused["StatefulPartitionedCall:", "block_13_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4429 = loc(fused["PartitionedCall:", "block_13_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4430 = loc(fused["PartitionedCall:", "block_13_pad/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4431 = loc(fused["StatefulPartitionedCall:", "block_13_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4432 = loc(fused["StatefulPartitionedCall:", "block_13_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4433 = loc(fused["PartitionedCall:", "block_13_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4434 = loc(fused["StatefulPartitionedCall:", "block_13_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4435 = loc(fused["StatefulPartitionedCall:", "block_13_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4436 = loc(fused["StatefulPartitionedCall:", "block_14_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4437 = loc(fused["StatefulPartitionedCall:", "block_14_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4438 = loc(fused["PartitionedCall:", "block_14_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4439 = loc(fused["StatefulPartitionedCall:", "block_14_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4440 = loc(fused["StatefulPartitionedCall:", "block_14_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4441 = loc(fused["PartitionedCall:", "block_14_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4442 = loc(fused["StatefulPartitionedCall:", "block_14_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4443 = loc(fused["StatefulPartitionedCall:", "block_14_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4444 = loc(fused["PartitionedCall:", "block_14_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4445 = loc(fused["StatefulPartitionedCall:", "block_15_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4446 = loc(fused["StatefulPartitionedCall:", "block_15_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4447 = loc(fused["PartitionedCall:", "block_15_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4448 = loc(fused["StatefulPartitionedCall:", "block_15_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4449 = loc(fused["StatefulPartitionedCall:", "block_15_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4450 = loc(fused["PartitionedCall:", "block_15_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4451 = loc(fused["StatefulPartitionedCall:", "block_15_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4452 = loc(fused["StatefulPartitionedCall:", "block_15_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4453 = loc(fused["PartitionedCall:", "block_15_add/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4454 = loc(fused["StatefulPartitionedCall:", "block_16_expand/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4455 = loc(fused["StatefulPartitionedCall:", "block_16_expand_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4456 = loc(fused["PartitionedCall:", "block_16_expand_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4457 = loc(fused["StatefulPartitionedCall:", "block_16_depthwise/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4458 = loc(fused["StatefulPartitionedCall:", "block_16_depthwise_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4459 = loc(fused["PartitionedCall:", "block_16_depthwise_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4460 = loc(fused["StatefulPartitionedCall:", "block_16_project/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4461 = loc(fused["StatefulPartitionedCall:", "block_16_project_BN/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4462 = loc(fused["StatefulPartitionedCall:", "Conv_1/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4463 = loc(fused["StatefulPartitionedCall:", "Conv_1_bn/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4464 = loc(fused["PartitionedCall:", "out_relu/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4465 = loc(fused["PartitionedCall:", "global_average_pooling2d/PartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4466 = loc(fused["StatefulPartitionedCall:", "predictions/StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4467 = loc(fused["NoOp:", "NoOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4468 = loc(fused["Identity:", "Identity@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_15286"])
#loc4469 = loc(fused["Const:", "block_10_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4470 = loc(fused["Const:", "block_10_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4471 = loc(fused["ReadVariableOp:", "block_10_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4472 = loc(fused["ReadVariableOp:", "block_10_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4473 = loc(fused["ReadVariableOp:", "block_10_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4474 = loc(fused["ReadVariableOp:", "block_10_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4475 = loc(fused["ReadVariableOp:", "block_10_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4476 = loc(fused["ReadVariableOp:", "block_10_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4477 = loc(fused["ReadVariableOp:", "block_10_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4478 = loc(fused["ReadVariableOp:", "block_10_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4479 = loc(fused["ReadVariableOp:", "block_10_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4480 = loc(fused["ReadVariableOp:", "block_10_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4481 = loc(fused["ReadVariableOp:", "block_10_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4482 = loc(fused["ReadVariableOp:", "block_10_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4483 = loc(fused["ReadVariableOp:", "block_10_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4484 = loc(fused["ReadVariableOp:", "block_10_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4485 = loc(fused["ReadVariableOp:", "block_10_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4486 = loc(fused["Const:", "block_11_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4487 = loc(fused["Const:", "block_11_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4488 = loc(fused["ReadVariableOp:", "block_11_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4489 = loc(fused["ReadVariableOp:", "block_11_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4490 = loc(fused["ReadVariableOp:", "block_11_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4491 = loc(fused["ReadVariableOp:", "block_11_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4492 = loc(fused["ReadVariableOp:", "block_11_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4493 = loc(fused["ReadVariableOp:", "block_11_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4494 = loc(fused["ReadVariableOp:", "block_11_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4495 = loc(fused["ReadVariableOp:", "block_11_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4496 = loc(fused["ReadVariableOp:", "block_11_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4497 = loc(fused["ReadVariableOp:", "block_11_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4498 = loc(fused["ReadVariableOp:", "block_11_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4499 = loc(fused["ReadVariableOp:", "block_11_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4500 = loc(fused["ReadVariableOp:", "block_11_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4501 = loc(fused["ReadVariableOp:", "block_11_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4502 = loc(fused["ReadVariableOp:", "block_11_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4503 = loc(fused["Const:", "block_12_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4504 = loc(fused["Const:", "block_12_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4505 = loc(fused["ReadVariableOp:", "block_12_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4506 = loc(fused["ReadVariableOp:", "block_12_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4507 = loc(fused["ReadVariableOp:", "block_12_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4508 = loc(fused["ReadVariableOp:", "block_12_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4509 = loc(fused["ReadVariableOp:", "block_12_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4510 = loc(fused["ReadVariableOp:", "block_12_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4511 = loc(fused["ReadVariableOp:", "block_12_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4512 = loc(fused["ReadVariableOp:", "block_12_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4513 = loc(fused["ReadVariableOp:", "block_12_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4514 = loc(fused["ReadVariableOp:", "block_12_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4515 = loc(fused["ReadVariableOp:", "block_12_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4516 = loc(fused["ReadVariableOp:", "block_12_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4517 = loc(fused["ReadVariableOp:", "block_12_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4518 = loc(fused["ReadVariableOp:", "block_12_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4519 = loc(fused["ReadVariableOp:", "block_12_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4520 = loc(fused["Const:", "block_13_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4521 = loc(fused["Const:", "block_13_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4522 = loc(fused["ReadVariableOp:", "block_13_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4523 = loc(fused["ReadVariableOp:", "block_13_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4524 = loc(fused["ReadVariableOp:", "block_13_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4525 = loc(fused["ReadVariableOp:", "block_13_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4526 = loc(fused["ReadVariableOp:", "block_13_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4527 = loc(fused["ReadVariableOp:", "block_13_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4528 = loc(fused["ReadVariableOp:", "block_13_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4529 = loc(fused["ReadVariableOp:", "block_13_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4530 = loc(fused["ReadVariableOp:", "block_13_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4531 = loc(fused["ReadVariableOp:", "block_13_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4532 = loc(fused["Const:", "block_13_pad/Pad/paddings@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4533 = loc(fused["ReadVariableOp:", "block_13_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4534 = loc(fused["ReadVariableOp:", "block_13_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4535 = loc(fused["ReadVariableOp:", "block_13_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4536 = loc(fused["ReadVariableOp:", "block_13_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4537 = loc(fused["ReadVariableOp:", "block_13_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4538 = loc(fused["Const:", "block_14_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4539 = loc(fused["Const:", "block_14_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4540 = loc(fused["ReadVariableOp:", "block_14_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4541 = loc(fused["ReadVariableOp:", "block_14_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4542 = loc(fused["ReadVariableOp:", "block_14_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4543 = loc(fused["ReadVariableOp:", "block_14_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4544 = loc(fused["ReadVariableOp:", "block_14_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4545 = loc(fused["ReadVariableOp:", "block_14_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4546 = loc(fused["ReadVariableOp:", "block_14_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4547 = loc(fused["ReadVariableOp:", "block_14_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4548 = loc(fused["ReadVariableOp:", "block_14_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4549 = loc(fused["ReadVariableOp:", "block_14_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4550 = loc(fused["ReadVariableOp:", "block_14_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4551 = loc(fused["ReadVariableOp:", "block_14_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4552 = loc(fused["ReadVariableOp:", "block_14_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4553 = loc(fused["ReadVariableOp:", "block_14_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4554 = loc(fused["ReadVariableOp:", "block_14_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4555 = loc(fused["Const:", "block_15_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4556 = loc(fused["Const:", "block_15_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4557 = loc(fused["ReadVariableOp:", "block_15_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4558 = loc(fused["ReadVariableOp:", "block_15_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4559 = loc(fused["ReadVariableOp:", "block_15_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4560 = loc(fused["ReadVariableOp:", "block_15_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4561 = loc(fused["ReadVariableOp:", "block_15_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4562 = loc(fused["ReadVariableOp:", "block_15_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4563 = loc(fused["ReadVariableOp:", "block_15_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4564 = loc(fused["ReadVariableOp:", "block_15_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4565 = loc(fused["ReadVariableOp:", "block_15_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4566 = loc(fused["ReadVariableOp:", "block_15_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4567 = loc(fused["ReadVariableOp:", "block_15_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4568 = loc(fused["ReadVariableOp:", "block_15_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4569 = loc(fused["ReadVariableOp:", "block_15_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4570 = loc(fused["ReadVariableOp:", "block_15_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4571 = loc(fused["ReadVariableOp:", "block_15_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4572 = loc(fused["Const:", "block_16_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4573 = loc(fused["Const:", "block_16_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4574 = loc(fused["ReadVariableOp:", "block_16_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4575 = loc(fused["ReadVariableOp:", "block_16_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4576 = loc(fused["ReadVariableOp:", "block_16_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4577 = loc(fused["ReadVariableOp:", "block_16_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4578 = loc(fused["ReadVariableOp:", "block_16_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4579 = loc(fused["ReadVariableOp:", "block_16_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4580 = loc(fused["ReadVariableOp:", "block_16_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4581 = loc(fused["ReadVariableOp:", "block_16_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4582 = loc(fused["ReadVariableOp:", "block_16_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4583 = loc(fused["ReadVariableOp:", "block_16_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4584 = loc(fused["ReadVariableOp:", "block_16_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4585 = loc(fused["ReadVariableOp:", "block_16_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4586 = loc(fused["ReadVariableOp:", "block_16_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4587 = loc(fused["ReadVariableOp:", "block_16_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4588 = loc(fused["ReadVariableOp:", "block_16_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4589 = loc(fused["Const:", "block_1_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4590 = loc(fused["Const:", "block_1_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4591 = loc(fused["ReadVariableOp:", "block_1_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4592 = loc(fused["ReadVariableOp:", "block_1_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4593 = loc(fused["ReadVariableOp:", "block_1_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4594 = loc(fused["ReadVariableOp:", "block_1_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4595 = loc(fused["ReadVariableOp:", "block_1_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4596 = loc(fused["ReadVariableOp:", "block_1_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4597 = loc(fused["ReadVariableOp:", "block_1_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4598 = loc(fused["ReadVariableOp:", "block_1_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4599 = loc(fused["ReadVariableOp:", "block_1_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4600 = loc(fused["ReadVariableOp:", "block_1_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4601 = loc(fused["Const:", "block_1_pad/Pad/paddings@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4602 = loc(fused["ReadVariableOp:", "block_1_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4603 = loc(fused["ReadVariableOp:", "block_1_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4604 = loc(fused["ReadVariableOp:", "block_1_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4605 = loc(fused["ReadVariableOp:", "block_1_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4606 = loc(fused["ReadVariableOp:", "block_1_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4607 = loc(fused["Const:", "block_2_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4608 = loc(fused["Const:", "block_2_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4609 = loc(fused["ReadVariableOp:", "block_2_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4610 = loc(fused["ReadVariableOp:", "block_2_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4611 = loc(fused["ReadVariableOp:", "block_2_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4612 = loc(fused["ReadVariableOp:", "block_2_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4613 = loc(fused["ReadVariableOp:", "block_2_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4614 = loc(fused["ReadVariableOp:", "block_2_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4615 = loc(fused["ReadVariableOp:", "block_2_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4616 = loc(fused["ReadVariableOp:", "block_2_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4617 = loc(fused["ReadVariableOp:", "block_2_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4618 = loc(fused["ReadVariableOp:", "block_2_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4619 = loc(fused["ReadVariableOp:", "block_2_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4620 = loc(fused["ReadVariableOp:", "block_2_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4621 = loc(fused["ReadVariableOp:", "block_2_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4622 = loc(fused["ReadVariableOp:", "block_2_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4623 = loc(fused["ReadVariableOp:", "block_2_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4624 = loc(fused["Const:", "block_3_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4625 = loc(fused["Const:", "block_3_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4626 = loc(fused["ReadVariableOp:", "block_3_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4627 = loc(fused["ReadVariableOp:", "block_3_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4628 = loc(fused["ReadVariableOp:", "block_3_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4629 = loc(fused["ReadVariableOp:", "block_3_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4630 = loc(fused["ReadVariableOp:", "block_3_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4631 = loc(fused["ReadVariableOp:", "block_3_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4632 = loc(fused["ReadVariableOp:", "block_3_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4633 = loc(fused["ReadVariableOp:", "block_3_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4634 = loc(fused["ReadVariableOp:", "block_3_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4635 = loc(fused["ReadVariableOp:", "block_3_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4636 = loc(fused["Const:", "block_3_pad/Pad/paddings@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4637 = loc(fused["ReadVariableOp:", "block_3_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4638 = loc(fused["ReadVariableOp:", "block_3_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4639 = loc(fused["ReadVariableOp:", "block_3_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4640 = loc(fused["ReadVariableOp:", "block_3_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4641 = loc(fused["ReadVariableOp:", "block_3_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4642 = loc(fused["Const:", "block_4_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4643 = loc(fused["Const:", "block_4_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4644 = loc(fused["ReadVariableOp:", "block_4_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4645 = loc(fused["ReadVariableOp:", "block_4_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4646 = loc(fused["ReadVariableOp:", "block_4_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4647 = loc(fused["ReadVariableOp:", "block_4_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4648 = loc(fused["ReadVariableOp:", "block_4_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4649 = loc(fused["ReadVariableOp:", "block_4_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4650 = loc(fused["ReadVariableOp:", "block_4_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4651 = loc(fused["ReadVariableOp:", "block_4_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4652 = loc(fused["ReadVariableOp:", "block_4_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4653 = loc(fused["ReadVariableOp:", "block_4_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4654 = loc(fused["ReadVariableOp:", "block_4_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4655 = loc(fused["ReadVariableOp:", "block_4_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4656 = loc(fused["ReadVariableOp:", "block_4_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4657 = loc(fused["ReadVariableOp:", "block_4_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4658 = loc(fused["ReadVariableOp:", "block_4_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4659 = loc(fused["Const:", "block_5_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4660 = loc(fused["Const:", "block_5_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4661 = loc(fused["ReadVariableOp:", "block_5_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4662 = loc(fused["ReadVariableOp:", "block_5_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4663 = loc(fused["ReadVariableOp:", "block_5_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4664 = loc(fused["ReadVariableOp:", "block_5_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4665 = loc(fused["ReadVariableOp:", "block_5_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4666 = loc(fused["ReadVariableOp:", "block_5_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4667 = loc(fused["ReadVariableOp:", "block_5_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4668 = loc(fused["ReadVariableOp:", "block_5_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4669 = loc(fused["ReadVariableOp:", "block_5_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4670 = loc(fused["ReadVariableOp:", "block_5_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4671 = loc(fused["ReadVariableOp:", "block_5_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4672 = loc(fused["ReadVariableOp:", "block_5_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4673 = loc(fused["ReadVariableOp:", "block_5_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4674 = loc(fused["ReadVariableOp:", "block_5_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4675 = loc(fused["ReadVariableOp:", "block_5_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4676 = loc(fused["Const:", "block_6_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4677 = loc(fused["Const:", "block_6_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4678 = loc(fused["ReadVariableOp:", "block_6_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4679 = loc(fused["ReadVariableOp:", "block_6_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4680 = loc(fused["ReadVariableOp:", "block_6_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4681 = loc(fused["ReadVariableOp:", "block_6_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4682 = loc(fused["ReadVariableOp:", "block_6_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4683 = loc(fused["ReadVariableOp:", "block_6_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4684 = loc(fused["ReadVariableOp:", "block_6_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4685 = loc(fused["ReadVariableOp:", "block_6_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4686 = loc(fused["ReadVariableOp:", "block_6_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4687 = loc(fused["ReadVariableOp:", "block_6_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4688 = loc(fused["Const:", "block_6_pad/Pad/paddings@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4689 = loc(fused["ReadVariableOp:", "block_6_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4690 = loc(fused["ReadVariableOp:", "block_6_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4691 = loc(fused["ReadVariableOp:", "block_6_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4692 = loc(fused["ReadVariableOp:", "block_6_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4693 = loc(fused["ReadVariableOp:", "block_6_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4694 = loc(fused["Const:", "block_7_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4695 = loc(fused["Const:", "block_7_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4696 = loc(fused["ReadVariableOp:", "block_7_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4697 = loc(fused["ReadVariableOp:", "block_7_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4698 = loc(fused["ReadVariableOp:", "block_7_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4699 = loc(fused["ReadVariableOp:", "block_7_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4700 = loc(fused["ReadVariableOp:", "block_7_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4701 = loc(fused["ReadVariableOp:", "block_7_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4702 = loc(fused["ReadVariableOp:", "block_7_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4703 = loc(fused["ReadVariableOp:", "block_7_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4704 = loc(fused["ReadVariableOp:", "block_7_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4705 = loc(fused["ReadVariableOp:", "block_7_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4706 = loc(fused["ReadVariableOp:", "block_7_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4707 = loc(fused["ReadVariableOp:", "block_7_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4708 = loc(fused["ReadVariableOp:", "block_7_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4709 = loc(fused["ReadVariableOp:", "block_7_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4710 = loc(fused["ReadVariableOp:", "block_7_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4711 = loc(fused["Const:", "block_8_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4712 = loc(fused["Const:", "block_8_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4713 = loc(fused["ReadVariableOp:", "block_8_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4714 = loc(fused["ReadVariableOp:", "block_8_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4715 = loc(fused["ReadVariableOp:", "block_8_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4716 = loc(fused["ReadVariableOp:", "block_8_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4717 = loc(fused["ReadVariableOp:", "block_8_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4718 = loc(fused["ReadVariableOp:", "block_8_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4719 = loc(fused["ReadVariableOp:", "block_8_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4720 = loc(fused["ReadVariableOp:", "block_8_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4721 = loc(fused["ReadVariableOp:", "block_8_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4722 = loc(fused["ReadVariableOp:", "block_8_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4723 = loc(fused["ReadVariableOp:", "block_8_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4724 = loc(fused["ReadVariableOp:", "block_8_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4725 = loc(fused["ReadVariableOp:", "block_8_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4726 = loc(fused["ReadVariableOp:", "block_8_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4727 = loc(fused["ReadVariableOp:", "block_8_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4728 = loc(fused["Const:", "block_9_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4729 = loc(fused["Const:", "block_9_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4730 = loc(fused["ReadVariableOp:", "block_9_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4731 = loc(fused["ReadVariableOp:", "block_9_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4732 = loc(fused["ReadVariableOp:", "block_9_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4733 = loc(fused["ReadVariableOp:", "block_9_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4734 = loc(fused["ReadVariableOp:", "block_9_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4735 = loc(fused["ReadVariableOp:", "block_9_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4736 = loc(fused["ReadVariableOp:", "block_9_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4737 = loc(fused["ReadVariableOp:", "block_9_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4738 = loc(fused["ReadVariableOp:", "block_9_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4739 = loc(fused["ReadVariableOp:", "block_9_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4740 = loc(fused["ReadVariableOp:", "block_9_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4741 = loc(fused["ReadVariableOp:", "block_9_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4742 = loc(fused["ReadVariableOp:", "block_9_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4743 = loc(fused["ReadVariableOp:", "block_9_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4744 = loc(fused["ReadVariableOp:", "block_9_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4745 = loc(fused["ReadVariableOp:", "bn_Conv1/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4746 = loc(fused["ReadVariableOp:", "bn_Conv1/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4747 = loc(fused["ReadVariableOp:", "bn_Conv1/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4748 = loc(fused["ReadVariableOp:", "bn_Conv1/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4749 = loc(fused["ReadVariableOp:", "Conv1/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4750 = loc(fused["ReadVariableOp:", "Conv_1_bn/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4751 = loc(fused["ReadVariableOp:", "Conv_1_bn/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4752 = loc(fused["ReadVariableOp:", "Conv_1_bn/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4753 = loc(fused["ReadVariableOp:", "Conv_1_bn/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4754 = loc(fused["ReadVariableOp:", "Conv_1/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4755 = loc(fused["Const:", "expanded_conv_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4756 = loc(fused["Const:", "expanded_conv_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4757 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4758 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4759 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4760 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4761 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4762 = loc(fused["ReadVariableOp:", "expanded_conv_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4763 = loc(fused["ReadVariableOp:", "expanded_conv_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4764 = loc(fused["ReadVariableOp:", "expanded_conv_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4765 = loc(fused["ReadVariableOp:", "expanded_conv_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4766 = loc(fused["ReadVariableOp:", "expanded_conv_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4767 = loc(fused["Const:", "global_average_pooling2d/Mean/reduction_indices@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4768 = loc(fused["Conv2D:", "Conv1/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4769 = loc(fused["FusedBatchNormV3:", "bn_Conv1/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4770 = loc(fused["Relu6:", "Conv1_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4771 = loc(fused["DepthwiseConv2dNative:", "expanded_conv_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4772 = loc(fused["FusedBatchNormV3:", "expanded_conv_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4773 = loc(fused["Relu6:", "expanded_conv_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4774 = loc(fused["Conv2D:", "expanded_conv_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4775 = loc(fused["FusedBatchNormV3:", "expanded_conv_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4776 = loc(fused["Conv2D:", "block_1_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4777 = loc(fused["FusedBatchNormV3:", "block_1_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4778 = loc(fused["Relu6:", "block_1_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4779 = loc(fused["Pad:", "block_1_pad/Pad@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4780 = loc(fused["DepthwiseConv2dNative:", "block_1_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4781 = loc(fused["FusedBatchNormV3:", "block_1_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4782 = loc(fused["Relu6:", "block_1_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4783 = loc(fused["Conv2D:", "block_1_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4784 = loc(fused["FusedBatchNormV3:", "block_1_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4785 = loc(fused["Conv2D:", "block_2_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4786 = loc(fused["FusedBatchNormV3:", "block_2_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4787 = loc(fused["Relu6:", "block_2_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4788 = loc(fused["DepthwiseConv2dNative:", "block_2_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4789 = loc(fused["FusedBatchNormV3:", "block_2_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4790 = loc(fused["Relu6:", "block_2_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4791 = loc(fused["Conv2D:", "block_2_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4792 = loc(fused["FusedBatchNormV3:", "block_2_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4793 = loc(fused["AddV2:", "block_2_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4794 = loc(fused["Conv2D:", "block_3_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4795 = loc(fused["FusedBatchNormV3:", "block_3_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4796 = loc(fused["Relu6:", "block_3_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4797 = loc(fused["Pad:", "block_3_pad/Pad@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4798 = loc(fused["DepthwiseConv2dNative:", "block_3_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4799 = loc(fused["FusedBatchNormV3:", "block_3_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4800 = loc(fused["Relu6:", "block_3_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4801 = loc(fused["Conv2D:", "block_3_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4802 = loc(fused["FusedBatchNormV3:", "block_3_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4803 = loc(fused["Conv2D:", "block_4_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4804 = loc(fused["FusedBatchNormV3:", "block_4_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4805 = loc(fused["Relu6:", "block_4_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4806 = loc(fused["DepthwiseConv2dNative:", "block_4_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4807 = loc(fused["FusedBatchNormV3:", "block_4_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4808 = loc(fused["Relu6:", "block_4_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4809 = loc(fused["Conv2D:", "block_4_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4810 = loc(fused["FusedBatchNormV3:", "block_4_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4811 = loc(fused["AddV2:", "block_4_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4812 = loc(fused["Conv2D:", "block_5_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4813 = loc(fused["FusedBatchNormV3:", "block_5_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4814 = loc(fused["Relu6:", "block_5_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4815 = loc(fused["DepthwiseConv2dNative:", "block_5_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4816 = loc(fused["FusedBatchNormV3:", "block_5_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4817 = loc(fused["Relu6:", "block_5_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4818 = loc(fused["Conv2D:", "block_5_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4819 = loc(fused["FusedBatchNormV3:", "block_5_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4820 = loc(fused["AddV2:", "block_5_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4821 = loc(fused["Conv2D:", "block_6_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4822 = loc(fused["FusedBatchNormV3:", "block_6_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4823 = loc(fused["Relu6:", "block_6_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4824 = loc(fused["Pad:", "block_6_pad/Pad@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4825 = loc(fused["DepthwiseConv2dNative:", "block_6_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4826 = loc(fused["FusedBatchNormV3:", "block_6_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4827 = loc(fused["Relu6:", "block_6_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4828 = loc(fused["Conv2D:", "block_6_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4829 = loc(fused["FusedBatchNormV3:", "block_6_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4830 = loc(fused["Conv2D:", "block_7_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4831 = loc(fused["FusedBatchNormV3:", "block_7_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4832 = loc(fused["Relu6:", "block_7_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4833 = loc(fused["DepthwiseConv2dNative:", "block_7_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4834 = loc(fused["FusedBatchNormV3:", "block_7_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4835 = loc(fused["Relu6:", "block_7_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4836 = loc(fused["Conv2D:", "block_7_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4837 = loc(fused["FusedBatchNormV3:", "block_7_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4838 = loc(fused["AddV2:", "block_7_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4839 = loc(fused["Conv2D:", "block_8_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4840 = loc(fused["FusedBatchNormV3:", "block_8_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4841 = loc(fused["Relu6:", "block_8_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4842 = loc(fused["DepthwiseConv2dNative:", "block_8_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4843 = loc(fused["FusedBatchNormV3:", "block_8_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4844 = loc(fused["Relu6:", "block_8_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4845 = loc(fused["Conv2D:", "block_8_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4846 = loc(fused["FusedBatchNormV3:", "block_8_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4847 = loc(fused["AddV2:", "block_8_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4848 = loc(fused["Conv2D:", "block_9_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4849 = loc(fused["FusedBatchNormV3:", "block_9_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4850 = loc(fused["Relu6:", "block_9_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4851 = loc(fused["DepthwiseConv2dNative:", "block_9_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4852 = loc(fused["FusedBatchNormV3:", "block_9_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4853 = loc(fused["Relu6:", "block_9_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4854 = loc(fused["Conv2D:", "block_9_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4855 = loc(fused["FusedBatchNormV3:", "block_9_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4856 = loc(fused["AddV2:", "block_9_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4857 = loc(fused["Conv2D:", "block_10_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4858 = loc(fused["FusedBatchNormV3:", "block_10_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4859 = loc(fused["Relu6:", "block_10_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4860 = loc(fused["DepthwiseConv2dNative:", "block_10_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4861 = loc(fused["FusedBatchNormV3:", "block_10_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4862 = loc(fused["Relu6:", "block_10_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4863 = loc(fused["Conv2D:", "block_10_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4864 = loc(fused["FusedBatchNormV3:", "block_10_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4865 = loc(fused["Conv2D:", "block_11_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4866 = loc(fused["FusedBatchNormV3:", "block_11_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4867 = loc(fused["Relu6:", "block_11_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4868 = loc(fused["DepthwiseConv2dNative:", "block_11_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4869 = loc(fused["FusedBatchNormV3:", "block_11_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4870 = loc(fused["Relu6:", "block_11_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4871 = loc(fused["Conv2D:", "block_11_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4872 = loc(fused["FusedBatchNormV3:", "block_11_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4873 = loc(fused["AddV2:", "block_11_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4874 = loc(fused["Conv2D:", "block_12_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4875 = loc(fused["FusedBatchNormV3:", "block_12_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4876 = loc(fused["Relu6:", "block_12_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4877 = loc(fused["DepthwiseConv2dNative:", "block_12_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4878 = loc(fused["FusedBatchNormV3:", "block_12_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4879 = loc(fused["Relu6:", "block_12_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4880 = loc(fused["Conv2D:", "block_12_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4881 = loc(fused["FusedBatchNormV3:", "block_12_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4882 = loc(fused["AddV2:", "block_12_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4883 = loc(fused["Conv2D:", "block_13_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4884 = loc(fused["FusedBatchNormV3:", "block_13_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4885 = loc(fused["Relu6:", "block_13_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4886 = loc(fused["Pad:", "block_13_pad/Pad@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4887 = loc(fused["DepthwiseConv2dNative:", "block_13_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4888 = loc(fused["FusedBatchNormV3:", "block_13_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4889 = loc(fused["Relu6:", "block_13_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4890 = loc(fused["Conv2D:", "block_13_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4891 = loc(fused["FusedBatchNormV3:", "block_13_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4892 = loc(fused["Conv2D:", "block_14_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4893 = loc(fused["FusedBatchNormV3:", "block_14_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4894 = loc(fused["Relu6:", "block_14_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4895 = loc(fused["DepthwiseConv2dNative:", "block_14_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4896 = loc(fused["FusedBatchNormV3:", "block_14_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4897 = loc(fused["Relu6:", "block_14_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4898 = loc(fused["Conv2D:", "block_14_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4899 = loc(fused["FusedBatchNormV3:", "block_14_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4900 = loc(fused["AddV2:", "block_14_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4901 = loc(fused["Conv2D:", "block_15_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4902 = loc(fused["FusedBatchNormV3:", "block_15_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4903 = loc(fused["Relu6:", "block_15_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4904 = loc(fused["DepthwiseConv2dNative:", "block_15_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4905 = loc(fused["FusedBatchNormV3:", "block_15_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4906 = loc(fused["Relu6:", "block_15_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4907 = loc(fused["Conv2D:", "block_15_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4908 = loc(fused["FusedBatchNormV3:", "block_15_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4909 = loc(fused["AddV2:", "block_15_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4910 = loc(fused["Conv2D:", "block_16_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4911 = loc(fused["FusedBatchNormV3:", "block_16_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4912 = loc(fused["Relu6:", "block_16_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4913 = loc(fused["DepthwiseConv2dNative:", "block_16_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4914 = loc(fused["FusedBatchNormV3:", "block_16_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4915 = loc(fused["Relu6:", "block_16_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4916 = loc(fused["Conv2D:", "block_16_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4917 = loc(fused["FusedBatchNormV3:", "block_16_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4918 = loc(fused["Conv2D:", "Conv_1/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4919 = loc(fused["FusedBatchNormV3:", "Conv_1_bn/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4920 = loc(fused["Relu6:", "out_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4921 = loc(fused["Mean:", "global_average_pooling2d/Mean@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4922 = loc(fused["ReadVariableOp:", "predictions/BiasAdd/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4923 = loc(fused["ReadVariableOp:", "predictions/MatMul/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4924 = loc(fused["NoOp:", "NoOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4925 = loc(fused["MatMul:", "predictions/MatMul@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4926 = loc(fused["BiasAdd:", "predictions/BiasAdd@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4927 = loc(fused["Softmax:", "predictions/Softmax@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4928 = loc(fused["Identity:", "Identity@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_17328"])
#loc4929 = loc(fused["Const:", "block_10_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4930 = loc(fused["Const:", "block_10_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4931 = loc(fused["ReadVariableOp:", "block_10_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4932 = loc(fused["ReadVariableOp:", "block_10_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4933 = loc(fused["ReadVariableOp:", "block_10_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4934 = loc(fused["ReadVariableOp:", "block_10_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4935 = loc(fused["ReadVariableOp:", "block_10_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4936 = loc(fused["ReadVariableOp:", "block_10_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4937 = loc(fused["ReadVariableOp:", "block_10_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4938 = loc(fused["ReadVariableOp:", "block_10_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4939 = loc(fused["ReadVariableOp:", "block_10_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4940 = loc(fused["ReadVariableOp:", "block_10_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4941 = loc(fused["ReadVariableOp:", "block_10_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4942 = loc(fused["ReadVariableOp:", "block_10_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4943 = loc(fused["ReadVariableOp:", "block_10_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4944 = loc(fused["ReadVariableOp:", "block_10_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4945 = loc(fused["ReadVariableOp:", "block_10_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4946 = loc(fused["Const:", "block_11_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4947 = loc(fused["Const:", "block_11_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4948 = loc(fused["ReadVariableOp:", "block_11_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4949 = loc(fused["ReadVariableOp:", "block_11_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4950 = loc(fused["ReadVariableOp:", "block_11_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4951 = loc(fused["ReadVariableOp:", "block_11_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4952 = loc(fused["ReadVariableOp:", "block_11_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4953 = loc(fused["ReadVariableOp:", "block_11_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4954 = loc(fused["ReadVariableOp:", "block_11_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4955 = loc(fused["ReadVariableOp:", "block_11_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4956 = loc(fused["ReadVariableOp:", "block_11_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4957 = loc(fused["ReadVariableOp:", "block_11_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4958 = loc(fused["ReadVariableOp:", "block_11_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4959 = loc(fused["ReadVariableOp:", "block_11_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4960 = loc(fused["ReadVariableOp:", "block_11_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4961 = loc(fused["ReadVariableOp:", "block_11_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4962 = loc(fused["ReadVariableOp:", "block_11_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4963 = loc(fused["Const:", "block_12_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4964 = loc(fused["Const:", "block_12_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4965 = loc(fused["ReadVariableOp:", "block_12_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4966 = loc(fused["ReadVariableOp:", "block_12_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4967 = loc(fused["ReadVariableOp:", "block_12_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4968 = loc(fused["ReadVariableOp:", "block_12_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4969 = loc(fused["ReadVariableOp:", "block_12_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4970 = loc(fused["ReadVariableOp:", "block_12_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4971 = loc(fused["ReadVariableOp:", "block_12_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4972 = loc(fused["ReadVariableOp:", "block_12_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4973 = loc(fused["ReadVariableOp:", "block_12_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4974 = loc(fused["ReadVariableOp:", "block_12_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4975 = loc(fused["ReadVariableOp:", "block_12_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4976 = loc(fused["ReadVariableOp:", "block_12_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4977 = loc(fused["ReadVariableOp:", "block_12_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4978 = loc(fused["ReadVariableOp:", "block_12_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4979 = loc(fused["ReadVariableOp:", "block_12_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4980 = loc(fused["Const:", "block_13_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4981 = loc(fused["Const:", "block_13_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4982 = loc(fused["ReadVariableOp:", "block_13_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4983 = loc(fused["ReadVariableOp:", "block_13_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4984 = loc(fused["ReadVariableOp:", "block_13_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4985 = loc(fused["ReadVariableOp:", "block_13_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4986 = loc(fused["ReadVariableOp:", "block_13_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4987 = loc(fused["ReadVariableOp:", "block_13_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4988 = loc(fused["ReadVariableOp:", "block_13_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4989 = loc(fused["ReadVariableOp:", "block_13_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4990 = loc(fused["ReadVariableOp:", "block_13_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4991 = loc(fused["ReadVariableOp:", "block_13_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4992 = loc(fused["Const:", "block_13_pad/Pad/paddings@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4993 = loc(fused["ReadVariableOp:", "block_13_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4994 = loc(fused["ReadVariableOp:", "block_13_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4995 = loc(fused["ReadVariableOp:", "block_13_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4996 = loc(fused["ReadVariableOp:", "block_13_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4997 = loc(fused["ReadVariableOp:", "block_13_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4998 = loc(fused["Const:", "block_14_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc4999 = loc(fused["Const:", "block_14_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5000 = loc(fused["ReadVariableOp:", "block_14_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5001 = loc(fused["ReadVariableOp:", "block_14_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5002 = loc(fused["ReadVariableOp:", "block_14_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5003 = loc(fused["ReadVariableOp:", "block_14_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5004 = loc(fused["ReadVariableOp:", "block_14_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5005 = loc(fused["ReadVariableOp:", "block_14_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5006 = loc(fused["ReadVariableOp:", "block_14_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5007 = loc(fused["ReadVariableOp:", "block_14_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5008 = loc(fused["ReadVariableOp:", "block_14_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5009 = loc(fused["ReadVariableOp:", "block_14_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5010 = loc(fused["ReadVariableOp:", "block_14_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5011 = loc(fused["ReadVariableOp:", "block_14_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5012 = loc(fused["ReadVariableOp:", "block_14_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5013 = loc(fused["ReadVariableOp:", "block_14_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5014 = loc(fused["ReadVariableOp:", "block_14_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5015 = loc(fused["Const:", "block_15_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5016 = loc(fused["Const:", "block_15_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5017 = loc(fused["ReadVariableOp:", "block_15_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5018 = loc(fused["ReadVariableOp:", "block_15_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5019 = loc(fused["ReadVariableOp:", "block_15_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5020 = loc(fused["ReadVariableOp:", "block_15_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5021 = loc(fused["ReadVariableOp:", "block_15_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5022 = loc(fused["ReadVariableOp:", "block_15_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5023 = loc(fused["ReadVariableOp:", "block_15_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5024 = loc(fused["ReadVariableOp:", "block_15_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5025 = loc(fused["ReadVariableOp:", "block_15_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5026 = loc(fused["ReadVariableOp:", "block_15_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5027 = loc(fused["ReadVariableOp:", "block_15_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5028 = loc(fused["ReadVariableOp:", "block_15_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5029 = loc(fused["ReadVariableOp:", "block_15_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5030 = loc(fused["ReadVariableOp:", "block_15_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5031 = loc(fused["ReadVariableOp:", "block_15_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5032 = loc(fused["Const:", "block_16_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5033 = loc(fused["Const:", "block_16_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5034 = loc(fused["ReadVariableOp:", "block_16_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5035 = loc(fused["ReadVariableOp:", "block_16_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5036 = loc(fused["ReadVariableOp:", "block_16_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5037 = loc(fused["ReadVariableOp:", "block_16_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5038 = loc(fused["ReadVariableOp:", "block_16_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5039 = loc(fused["ReadVariableOp:", "block_16_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5040 = loc(fused["ReadVariableOp:", "block_16_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5041 = loc(fused["ReadVariableOp:", "block_16_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5042 = loc(fused["ReadVariableOp:", "block_16_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5043 = loc(fused["ReadVariableOp:", "block_16_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5044 = loc(fused["ReadVariableOp:", "block_16_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5045 = loc(fused["ReadVariableOp:", "block_16_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5046 = loc(fused["ReadVariableOp:", "block_16_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5047 = loc(fused["ReadVariableOp:", "block_16_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5048 = loc(fused["ReadVariableOp:", "block_16_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5049 = loc(fused["Const:", "block_1_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5050 = loc(fused["Const:", "block_1_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5051 = loc(fused["ReadVariableOp:", "block_1_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5052 = loc(fused["ReadVariableOp:", "block_1_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5053 = loc(fused["ReadVariableOp:", "block_1_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5054 = loc(fused["ReadVariableOp:", "block_1_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5055 = loc(fused["ReadVariableOp:", "block_1_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5056 = loc(fused["ReadVariableOp:", "block_1_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5057 = loc(fused["ReadVariableOp:", "block_1_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5058 = loc(fused["ReadVariableOp:", "block_1_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5059 = loc(fused["ReadVariableOp:", "block_1_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5060 = loc(fused["ReadVariableOp:", "block_1_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5061 = loc(fused["Const:", "block_1_pad/Pad/paddings@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5062 = loc(fused["ReadVariableOp:", "block_1_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5063 = loc(fused["ReadVariableOp:", "block_1_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5064 = loc(fused["ReadVariableOp:", "block_1_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5065 = loc(fused["ReadVariableOp:", "block_1_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5066 = loc(fused["ReadVariableOp:", "block_1_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5067 = loc(fused["Const:", "block_2_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5068 = loc(fused["Const:", "block_2_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5069 = loc(fused["ReadVariableOp:", "block_2_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5070 = loc(fused["ReadVariableOp:", "block_2_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5071 = loc(fused["ReadVariableOp:", "block_2_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5072 = loc(fused["ReadVariableOp:", "block_2_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5073 = loc(fused["ReadVariableOp:", "block_2_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5074 = loc(fused["ReadVariableOp:", "block_2_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5075 = loc(fused["ReadVariableOp:", "block_2_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5076 = loc(fused["ReadVariableOp:", "block_2_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5077 = loc(fused["ReadVariableOp:", "block_2_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5078 = loc(fused["ReadVariableOp:", "block_2_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5079 = loc(fused["ReadVariableOp:", "block_2_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5080 = loc(fused["ReadVariableOp:", "block_2_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5081 = loc(fused["ReadVariableOp:", "block_2_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5082 = loc(fused["ReadVariableOp:", "block_2_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5083 = loc(fused["ReadVariableOp:", "block_2_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5084 = loc(fused["Const:", "block_3_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5085 = loc(fused["Const:", "block_3_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5086 = loc(fused["ReadVariableOp:", "block_3_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5087 = loc(fused["ReadVariableOp:", "block_3_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5088 = loc(fused["ReadVariableOp:", "block_3_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5089 = loc(fused["ReadVariableOp:", "block_3_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5090 = loc(fused["ReadVariableOp:", "block_3_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5091 = loc(fused["ReadVariableOp:", "block_3_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5092 = loc(fused["ReadVariableOp:", "block_3_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5093 = loc(fused["ReadVariableOp:", "block_3_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5094 = loc(fused["ReadVariableOp:", "block_3_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5095 = loc(fused["ReadVariableOp:", "block_3_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5096 = loc(fused["Const:", "block_3_pad/Pad/paddings@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5097 = loc(fused["ReadVariableOp:", "block_3_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5098 = loc(fused["ReadVariableOp:", "block_3_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5099 = loc(fused["ReadVariableOp:", "block_3_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5100 = loc(fused["ReadVariableOp:", "block_3_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5101 = loc(fused["ReadVariableOp:", "block_3_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5102 = loc(fused["Const:", "block_4_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5103 = loc(fused["Const:", "block_4_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5104 = loc(fused["ReadVariableOp:", "block_4_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5105 = loc(fused["ReadVariableOp:", "block_4_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5106 = loc(fused["ReadVariableOp:", "block_4_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5107 = loc(fused["ReadVariableOp:", "block_4_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5108 = loc(fused["ReadVariableOp:", "block_4_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5109 = loc(fused["ReadVariableOp:", "block_4_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5110 = loc(fused["ReadVariableOp:", "block_4_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5111 = loc(fused["ReadVariableOp:", "block_4_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5112 = loc(fused["ReadVariableOp:", "block_4_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5113 = loc(fused["ReadVariableOp:", "block_4_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5114 = loc(fused["ReadVariableOp:", "block_4_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5115 = loc(fused["ReadVariableOp:", "block_4_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5116 = loc(fused["ReadVariableOp:", "block_4_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5117 = loc(fused["ReadVariableOp:", "block_4_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5118 = loc(fused["ReadVariableOp:", "block_4_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5119 = loc(fused["Const:", "block_5_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5120 = loc(fused["Const:", "block_5_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5121 = loc(fused["ReadVariableOp:", "block_5_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5122 = loc(fused["ReadVariableOp:", "block_5_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5123 = loc(fused["ReadVariableOp:", "block_5_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5124 = loc(fused["ReadVariableOp:", "block_5_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5125 = loc(fused["ReadVariableOp:", "block_5_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5126 = loc(fused["ReadVariableOp:", "block_5_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5127 = loc(fused["ReadVariableOp:", "block_5_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5128 = loc(fused["ReadVariableOp:", "block_5_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5129 = loc(fused["ReadVariableOp:", "block_5_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5130 = loc(fused["ReadVariableOp:", "block_5_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5131 = loc(fused["ReadVariableOp:", "block_5_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5132 = loc(fused["ReadVariableOp:", "block_5_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5133 = loc(fused["ReadVariableOp:", "block_5_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5134 = loc(fused["ReadVariableOp:", "block_5_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5135 = loc(fused["ReadVariableOp:", "block_5_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5136 = loc(fused["Const:", "block_6_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5137 = loc(fused["Const:", "block_6_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5138 = loc(fused["ReadVariableOp:", "block_6_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5139 = loc(fused["ReadVariableOp:", "block_6_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5140 = loc(fused["ReadVariableOp:", "block_6_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5141 = loc(fused["ReadVariableOp:", "block_6_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5142 = loc(fused["ReadVariableOp:", "block_6_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5143 = loc(fused["ReadVariableOp:", "block_6_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5144 = loc(fused["ReadVariableOp:", "block_6_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5145 = loc(fused["ReadVariableOp:", "block_6_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5146 = loc(fused["ReadVariableOp:", "block_6_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5147 = loc(fused["ReadVariableOp:", "block_6_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5148 = loc(fused["Const:", "block_6_pad/Pad/paddings@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5149 = loc(fused["ReadVariableOp:", "block_6_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5150 = loc(fused["ReadVariableOp:", "block_6_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5151 = loc(fused["ReadVariableOp:", "block_6_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5152 = loc(fused["ReadVariableOp:", "block_6_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5153 = loc(fused["ReadVariableOp:", "block_6_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5154 = loc(fused["Const:", "block_7_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5155 = loc(fused["Const:", "block_7_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5156 = loc(fused["ReadVariableOp:", "block_7_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5157 = loc(fused["ReadVariableOp:", "block_7_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5158 = loc(fused["ReadVariableOp:", "block_7_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5159 = loc(fused["ReadVariableOp:", "block_7_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5160 = loc(fused["ReadVariableOp:", "block_7_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5161 = loc(fused["ReadVariableOp:", "block_7_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5162 = loc(fused["ReadVariableOp:", "block_7_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5163 = loc(fused["ReadVariableOp:", "block_7_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5164 = loc(fused["ReadVariableOp:", "block_7_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5165 = loc(fused["ReadVariableOp:", "block_7_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5166 = loc(fused["ReadVariableOp:", "block_7_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5167 = loc(fused["ReadVariableOp:", "block_7_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5168 = loc(fused["ReadVariableOp:", "block_7_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5169 = loc(fused["ReadVariableOp:", "block_7_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5170 = loc(fused["ReadVariableOp:", "block_7_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5171 = loc(fused["Const:", "block_8_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5172 = loc(fused["Const:", "block_8_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5173 = loc(fused["ReadVariableOp:", "block_8_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5174 = loc(fused["ReadVariableOp:", "block_8_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5175 = loc(fused["ReadVariableOp:", "block_8_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5176 = loc(fused["ReadVariableOp:", "block_8_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5177 = loc(fused["ReadVariableOp:", "block_8_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5178 = loc(fused["ReadVariableOp:", "block_8_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5179 = loc(fused["ReadVariableOp:", "block_8_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5180 = loc(fused["ReadVariableOp:", "block_8_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5181 = loc(fused["ReadVariableOp:", "block_8_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5182 = loc(fused["ReadVariableOp:", "block_8_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5183 = loc(fused["ReadVariableOp:", "block_8_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5184 = loc(fused["ReadVariableOp:", "block_8_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5185 = loc(fused["ReadVariableOp:", "block_8_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5186 = loc(fused["ReadVariableOp:", "block_8_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5187 = loc(fused["ReadVariableOp:", "block_8_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5188 = loc(fused["Const:", "block_9_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5189 = loc(fused["Const:", "block_9_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5190 = loc(fused["ReadVariableOp:", "block_9_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5191 = loc(fused["ReadVariableOp:", "block_9_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5192 = loc(fused["ReadVariableOp:", "block_9_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5193 = loc(fused["ReadVariableOp:", "block_9_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5194 = loc(fused["ReadVariableOp:", "block_9_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5195 = loc(fused["ReadVariableOp:", "block_9_expand_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5196 = loc(fused["ReadVariableOp:", "block_9_expand_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5197 = loc(fused["ReadVariableOp:", "block_9_expand_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5198 = loc(fused["ReadVariableOp:", "block_9_expand_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5199 = loc(fused["ReadVariableOp:", "block_9_expand/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5200 = loc(fused["ReadVariableOp:", "block_9_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5201 = loc(fused["ReadVariableOp:", "block_9_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5202 = loc(fused["ReadVariableOp:", "block_9_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5203 = loc(fused["ReadVariableOp:", "block_9_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5204 = loc(fused["ReadVariableOp:", "block_9_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5205 = loc(fused["ReadVariableOp:", "bn_Conv1/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5206 = loc(fused["ReadVariableOp:", "bn_Conv1/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5207 = loc(fused["ReadVariableOp:", "bn_Conv1/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5208 = loc(fused["ReadVariableOp:", "bn_Conv1/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5209 = loc(fused["ReadVariableOp:", "Conv1/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5210 = loc(fused["ReadVariableOp:", "Conv_1_bn/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5211 = loc(fused["ReadVariableOp:", "Conv_1_bn/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5212 = loc(fused["ReadVariableOp:", "Conv_1_bn/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5213 = loc(fused["ReadVariableOp:", "Conv_1_bn/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5214 = loc(fused["ReadVariableOp:", "Conv_1/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5215 = loc(fused["Const:", "expanded_conv_depthwise/depthwise/Shape@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5216 = loc(fused["Const:", "expanded_conv_depthwise/depthwise/dilation_rate@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5217 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5218 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5219 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5220 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5221 = loc(fused["ReadVariableOp:", "expanded_conv_depthwise/depthwise/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5222 = loc(fused["ReadVariableOp:", "expanded_conv_project_BN/FusedBatchNormV3/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5223 = loc(fused["ReadVariableOp:", "expanded_conv_project_BN/FusedBatchNormV3/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5224 = loc(fused["ReadVariableOp:", "expanded_conv_project_BN/ReadVariableOp_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5225 = loc(fused["ReadVariableOp:", "expanded_conv_project_BN/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5226 = loc(fused["ReadVariableOp:", "expanded_conv_project/Conv2D/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5227 = loc(fused["Const:", "global_average_pooling2d/Mean/reduction_indices@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5228 = loc(fused["Conv2D:", "Conv1/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5229 = loc(fused["FusedBatchNormV3:", "bn_Conv1/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5230 = loc(fused["Relu6:", "Conv1_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5231 = loc(fused["DepthwiseConv2dNative:", "expanded_conv_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5232 = loc(fused["FusedBatchNormV3:", "expanded_conv_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5233 = loc(fused["AssignVariableOp:", "expanded_conv_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5234 = loc(fused["AssignVariableOp:", "expanded_conv_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5235 = loc(fused["Relu6:", "expanded_conv_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5236 = loc(fused["Conv2D:", "expanded_conv_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5237 = loc(fused["FusedBatchNormV3:", "expanded_conv_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5238 = loc(fused["Conv2D:", "block_1_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5239 = loc(fused["FusedBatchNormV3:", "block_1_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5240 = loc(fused["AssignVariableOp:", "block_1_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5241 = loc(fused["AssignVariableOp:", "block_1_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5242 = loc(fused["Relu6:", "block_1_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5243 = loc(fused["Pad:", "block_1_pad/Pad@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5244 = loc(fused["DepthwiseConv2dNative:", "block_1_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5245 = loc(fused["FusedBatchNormV3:", "block_1_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5246 = loc(fused["AssignVariableOp:", "block_1_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5247 = loc(fused["AssignVariableOp:", "block_1_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5248 = loc(fused["Relu6:", "block_1_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5249 = loc(fused["Conv2D:", "block_1_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5250 = loc(fused["FusedBatchNormV3:", "block_1_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5251 = loc(fused["AssignVariableOp:", "block_1_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5252 = loc(fused["AssignVariableOp:", "block_1_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5253 = loc(fused["Conv2D:", "block_2_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5254 = loc(fused["FusedBatchNormV3:", "block_2_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5255 = loc(fused["AssignVariableOp:", "block_2_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5256 = loc(fused["AssignVariableOp:", "block_2_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5257 = loc(fused["Relu6:", "block_2_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5258 = loc(fused["DepthwiseConv2dNative:", "block_2_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5259 = loc(fused["FusedBatchNormV3:", "block_2_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5260 = loc(fused["AssignVariableOp:", "block_2_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5261 = loc(fused["AssignVariableOp:", "block_2_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5262 = loc(fused["Relu6:", "block_2_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5263 = loc(fused["Conv2D:", "block_2_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5264 = loc(fused["FusedBatchNormV3:", "block_2_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5265 = loc(fused["AddV2:", "block_2_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5266 = loc(fused["Conv2D:", "block_3_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5267 = loc(fused["FusedBatchNormV3:", "block_3_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5268 = loc(fused["AssignVariableOp:", "block_3_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5269 = loc(fused["AssignVariableOp:", "block_3_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5270 = loc(fused["Relu6:", "block_3_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5271 = loc(fused["Pad:", "block_3_pad/Pad@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5272 = loc(fused["DepthwiseConv2dNative:", "block_3_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5273 = loc(fused["FusedBatchNormV3:", "block_3_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5274 = loc(fused["AssignVariableOp:", "block_3_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5275 = loc(fused["AssignVariableOp:", "block_3_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5276 = loc(fused["Relu6:", "block_3_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5277 = loc(fused["Conv2D:", "block_3_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5278 = loc(fused["FusedBatchNormV3:", "block_3_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5279 = loc(fused["AssignVariableOp:", "block_3_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5280 = loc(fused["AssignVariableOp:", "block_3_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5281 = loc(fused["Conv2D:", "block_4_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5282 = loc(fused["FusedBatchNormV3:", "block_4_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5283 = loc(fused["AssignVariableOp:", "block_4_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5284 = loc(fused["AssignVariableOp:", "block_4_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5285 = loc(fused["Relu6:", "block_4_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5286 = loc(fused["DepthwiseConv2dNative:", "block_4_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5287 = loc(fused["FusedBatchNormV3:", "block_4_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5288 = loc(fused["AssignVariableOp:", "block_4_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5289 = loc(fused["AssignVariableOp:", "block_4_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5290 = loc(fused["Relu6:", "block_4_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5291 = loc(fused["Conv2D:", "block_4_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5292 = loc(fused["FusedBatchNormV3:", "block_4_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5293 = loc(fused["AddV2:", "block_4_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5294 = loc(fused["Conv2D:", "block_5_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5295 = loc(fused["FusedBatchNormV3:", "block_5_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5296 = loc(fused["AssignVariableOp:", "block_5_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5297 = loc(fused["AssignVariableOp:", "block_5_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5298 = loc(fused["Relu6:", "block_5_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5299 = loc(fused["DepthwiseConv2dNative:", "block_5_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5300 = loc(fused["FusedBatchNormV3:", "block_5_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5301 = loc(fused["AssignVariableOp:", "block_5_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5302 = loc(fused["AssignVariableOp:", "block_5_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5303 = loc(fused["Relu6:", "block_5_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5304 = loc(fused["Conv2D:", "block_5_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5305 = loc(fused["FusedBatchNormV3:", "block_5_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5306 = loc(fused["AddV2:", "block_5_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5307 = loc(fused["Conv2D:", "block_6_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5308 = loc(fused["FusedBatchNormV3:", "block_6_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5309 = loc(fused["AssignVariableOp:", "block_6_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5310 = loc(fused["AssignVariableOp:", "block_6_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5311 = loc(fused["Relu6:", "block_6_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5312 = loc(fused["Pad:", "block_6_pad/Pad@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5313 = loc(fused["DepthwiseConv2dNative:", "block_6_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5314 = loc(fused["FusedBatchNormV3:", "block_6_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5315 = loc(fused["AssignVariableOp:", "block_6_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5316 = loc(fused["AssignVariableOp:", "block_6_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5317 = loc(fused["Relu6:", "block_6_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5318 = loc(fused["Conv2D:", "block_6_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5319 = loc(fused["FusedBatchNormV3:", "block_6_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5320 = loc(fused["AssignVariableOp:", "block_6_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5321 = loc(fused["AssignVariableOp:", "block_6_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5322 = loc(fused["Conv2D:", "block_7_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5323 = loc(fused["FusedBatchNormV3:", "block_7_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5324 = loc(fused["AssignVariableOp:", "block_7_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5325 = loc(fused["AssignVariableOp:", "block_7_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5326 = loc(fused["Relu6:", "block_7_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5327 = loc(fused["DepthwiseConv2dNative:", "block_7_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5328 = loc(fused["FusedBatchNormV3:", "block_7_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5329 = loc(fused["AssignVariableOp:", "block_7_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5330 = loc(fused["AssignVariableOp:", "block_7_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5331 = loc(fused["Relu6:", "block_7_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5332 = loc(fused["Conv2D:", "block_7_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5333 = loc(fused["FusedBatchNormV3:", "block_7_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5334 = loc(fused["AddV2:", "block_7_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5335 = loc(fused["Conv2D:", "block_8_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5336 = loc(fused["FusedBatchNormV3:", "block_8_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5337 = loc(fused["AssignVariableOp:", "block_8_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5338 = loc(fused["AssignVariableOp:", "block_8_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5339 = loc(fused["Relu6:", "block_8_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5340 = loc(fused["DepthwiseConv2dNative:", "block_8_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5341 = loc(fused["FusedBatchNormV3:", "block_8_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5342 = loc(fused["AssignVariableOp:", "block_8_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5343 = loc(fused["AssignVariableOp:", "block_8_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5344 = loc(fused["Relu6:", "block_8_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5345 = loc(fused["Conv2D:", "block_8_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5346 = loc(fused["FusedBatchNormV3:", "block_8_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5347 = loc(fused["AddV2:", "block_8_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5348 = loc(fused["Conv2D:", "block_9_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5349 = loc(fused["FusedBatchNormV3:", "block_9_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5350 = loc(fused["AssignVariableOp:", "block_9_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5351 = loc(fused["AssignVariableOp:", "block_9_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5352 = loc(fused["Relu6:", "block_9_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5353 = loc(fused["DepthwiseConv2dNative:", "block_9_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5354 = loc(fused["FusedBatchNormV3:", "block_9_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5355 = loc(fused["AssignVariableOp:", "block_9_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5356 = loc(fused["AssignVariableOp:", "block_9_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5357 = loc(fused["Relu6:", "block_9_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5358 = loc(fused["Conv2D:", "block_9_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5359 = loc(fused["FusedBatchNormV3:", "block_9_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5360 = loc(fused["AddV2:", "block_9_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5361 = loc(fused["Conv2D:", "block_10_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5362 = loc(fused["FusedBatchNormV3:", "block_10_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5363 = loc(fused["AssignVariableOp:", "block_10_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5364 = loc(fused["AssignVariableOp:", "block_10_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5365 = loc(fused["Relu6:", "block_10_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5366 = loc(fused["DepthwiseConv2dNative:", "block_10_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5367 = loc(fused["FusedBatchNormV3:", "block_10_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5368 = loc(fused["AssignVariableOp:", "block_10_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5369 = loc(fused["AssignVariableOp:", "block_10_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5370 = loc(fused["Relu6:", "block_10_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5371 = loc(fused["Conv2D:", "block_10_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5372 = loc(fused["FusedBatchNormV3:", "block_10_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5373 = loc(fused["AssignVariableOp:", "block_10_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5374 = loc(fused["AssignVariableOp:", "block_10_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5375 = loc(fused["Conv2D:", "block_11_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5376 = loc(fused["FusedBatchNormV3:", "block_11_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5377 = loc(fused["AssignVariableOp:", "block_11_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5378 = loc(fused["AssignVariableOp:", "block_11_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5379 = loc(fused["Relu6:", "block_11_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5380 = loc(fused["DepthwiseConv2dNative:", "block_11_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5381 = loc(fused["FusedBatchNormV3:", "block_11_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5382 = loc(fused["AssignVariableOp:", "block_11_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5383 = loc(fused["AssignVariableOp:", "block_11_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5384 = loc(fused["Relu6:", "block_11_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5385 = loc(fused["Conv2D:", "block_11_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5386 = loc(fused["FusedBatchNormV3:", "block_11_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5387 = loc(fused["AddV2:", "block_11_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5388 = loc(fused["Conv2D:", "block_12_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5389 = loc(fused["FusedBatchNormV3:", "block_12_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5390 = loc(fused["AssignVariableOp:", "block_12_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5391 = loc(fused["AssignVariableOp:", "block_12_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5392 = loc(fused["Relu6:", "block_12_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5393 = loc(fused["DepthwiseConv2dNative:", "block_12_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5394 = loc(fused["FusedBatchNormV3:", "block_12_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5395 = loc(fused["AssignVariableOp:", "block_12_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5396 = loc(fused["AssignVariableOp:", "block_12_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5397 = loc(fused["Relu6:", "block_12_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5398 = loc(fused["Conv2D:", "block_12_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5399 = loc(fused["FusedBatchNormV3:", "block_12_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5400 = loc(fused["AddV2:", "block_12_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5401 = loc(fused["Conv2D:", "block_13_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5402 = loc(fused["FusedBatchNormV3:", "block_13_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5403 = loc(fused["AssignVariableOp:", "block_13_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5404 = loc(fused["AssignVariableOp:", "block_13_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5405 = loc(fused["Relu6:", "block_13_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5406 = loc(fused["Pad:", "block_13_pad/Pad@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5407 = loc(fused["DepthwiseConv2dNative:", "block_13_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5408 = loc(fused["FusedBatchNormV3:", "block_13_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5409 = loc(fused["AssignVariableOp:", "block_13_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5410 = loc(fused["AssignVariableOp:", "block_13_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5411 = loc(fused["Relu6:", "block_13_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5412 = loc(fused["Conv2D:", "block_13_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5413 = loc(fused["FusedBatchNormV3:", "block_13_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5414 = loc(fused["AssignVariableOp:", "block_13_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5415 = loc(fused["AssignVariableOp:", "block_13_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5416 = loc(fused["Conv2D:", "block_14_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5417 = loc(fused["FusedBatchNormV3:", "block_14_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5418 = loc(fused["AssignVariableOp:", "block_14_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5419 = loc(fused["AssignVariableOp:", "block_14_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5420 = loc(fused["Relu6:", "block_14_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5421 = loc(fused["DepthwiseConv2dNative:", "block_14_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5422 = loc(fused["FusedBatchNormV3:", "block_14_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5423 = loc(fused["AssignVariableOp:", "block_14_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5424 = loc(fused["AssignVariableOp:", "block_14_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5425 = loc(fused["Relu6:", "block_14_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5426 = loc(fused["Conv2D:", "block_14_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5427 = loc(fused["FusedBatchNormV3:", "block_14_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5428 = loc(fused["AddV2:", "block_14_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5429 = loc(fused["Conv2D:", "block_15_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5430 = loc(fused["FusedBatchNormV3:", "block_15_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5431 = loc(fused["AssignVariableOp:", "block_15_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5432 = loc(fused["AssignVariableOp:", "block_15_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5433 = loc(fused["Relu6:", "block_15_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5434 = loc(fused["DepthwiseConv2dNative:", "block_15_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5435 = loc(fused["FusedBatchNormV3:", "block_15_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5436 = loc(fused["AssignVariableOp:", "block_15_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5437 = loc(fused["AssignVariableOp:", "block_15_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5438 = loc(fused["Relu6:", "block_15_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5439 = loc(fused["Conv2D:", "block_15_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5440 = loc(fused["FusedBatchNormV3:", "block_15_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5441 = loc(fused["AddV2:", "block_15_add/add@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5442 = loc(fused["Conv2D:", "block_16_expand/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5443 = loc(fused["FusedBatchNormV3:", "block_16_expand_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5444 = loc(fused["AssignVariableOp:", "block_16_expand_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5445 = loc(fused["AssignVariableOp:", "block_16_expand_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5446 = loc(fused["Relu6:", "block_16_expand_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5447 = loc(fused["DepthwiseConv2dNative:", "block_16_depthwise/depthwise@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5448 = loc(fused["FusedBatchNormV3:", "block_16_depthwise_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5449 = loc(fused["AssignVariableOp:", "block_16_depthwise_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5450 = loc(fused["AssignVariableOp:", "block_16_depthwise_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5451 = loc(fused["Relu6:", "block_16_depthwise_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5452 = loc(fused["Conv2D:", "block_16_project/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5453 = loc(fused["FusedBatchNormV3:", "block_16_project_BN/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5454 = loc(fused["Conv2D:", "Conv_1/Conv2D@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5455 = loc(fused["FusedBatchNormV3:", "Conv_1_bn/FusedBatchNormV3@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5456 = loc(fused["AssignVariableOp:", "Conv_1_bn/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5457 = loc(fused["AssignVariableOp:", "Conv_1_bn/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5458 = loc(fused["Relu6:", "out_relu/Relu6@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5459 = loc(fused["Mean:", "global_average_pooling2d/Mean@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5460 = loc(fused["AssignVariableOp:", "block_16_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5461 = loc(fused["AssignVariableOp:", "block_16_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5462 = loc(fused["AssignVariableOp:", "block_15_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5463 = loc(fused["AssignVariableOp:", "block_15_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5464 = loc(fused["AssignVariableOp:", "block_14_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5465 = loc(fused["AssignVariableOp:", "block_14_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5466 = loc(fused["AssignVariableOp:", "block_12_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5467 = loc(fused["AssignVariableOp:", "block_12_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5468 = loc(fused["AssignVariableOp:", "block_11_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5469 = loc(fused["AssignVariableOp:", "block_11_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5470 = loc(fused["AssignVariableOp:", "block_9_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5471 = loc(fused["AssignVariableOp:", "block_9_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5472 = loc(fused["AssignVariableOp:", "block_8_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5473 = loc(fused["AssignVariableOp:", "block_8_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5474 = loc(fused["AssignVariableOp:", "block_7_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5475 = loc(fused["AssignVariableOp:", "block_7_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5476 = loc(fused["AssignVariableOp:", "block_5_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5477 = loc(fused["AssignVariableOp:", "block_5_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5478 = loc(fused["AssignVariableOp:", "block_4_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5479 = loc(fused["AssignVariableOp:", "block_4_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5480 = loc(fused["AssignVariableOp:", "block_2_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5481 = loc(fused["AssignVariableOp:", "block_2_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5482 = loc(fused["AssignVariableOp:", "expanded_conv_project_BN/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5483 = loc(fused["AssignVariableOp:", "expanded_conv_project_BN/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5484 = loc(fused["AssignVariableOp:", "bn_Conv1/AssignNewValue@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5485 = loc(fused["AssignVariableOp:", "bn_Conv1/AssignNewValue_1@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5486 = loc(fused["ReadVariableOp:", "predictions/BiasAdd/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5487 = loc(fused["ReadVariableOp:", "predictions/MatMul/ReadVariableOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5488 = loc(fused["NoOp:", "NoOp@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5489 = loc(fused["MatMul:", "predictions/MatMul@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5490 = loc(fused["BiasAdd:", "predictions/BiasAdd@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5491 = loc(fused["Softmax:", "predictions/Softmax@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5492 = loc(fused["Identity:", "Identity@__inference_mobilenetv2_1.00_224_layer_call_and_return_conditional_losses_18312"])
#loc5493 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_fn_10944"])
#loc5494 = loc(fused["NoOp:", "NoOp@__inference_mobilenetv2_1.00_224_layer_call_fn_10944"])
#loc5495 = loc(fused["Identity:", "Identity@__inference_mobilenetv2_1.00_224_layer_call_fn_10944"])
#loc5496 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_fn_13920"])
#loc5497 = loc(fused["NoOp:", "NoOp@__inference_mobilenetv2_1.00_224_layer_call_fn_13920"])
#loc5498 = loc(fused["Identity:", "Identity@__inference_mobilenetv2_1.00_224_layer_call_fn_13920"])
#loc5499 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_fn_15815"])
#loc5500 = loc(fused["NoOp:", "NoOp@__inference_mobilenetv2_1.00_224_layer_call_fn_15815"])
#loc5501 = loc(fused["Identity:", "Identity@__inference_mobilenetv2_1.00_224_layer_call_fn_15815"])
#loc5502 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_mobilenetv2_1.00_224_layer_call_fn_16344"])
#loc5503 = loc(fused["NoOp:", "NoOp@__inference_mobilenetv2_1.00_224_layer_call_fn_16344"])
#loc5504 = loc(fused["Identity:", "Identity@__inference_mobilenetv2_1.00_224_layer_call_fn_16344"])
#loc5505 = loc(fused["Relu6:", "Relu6@__inference_out_relu_layer_call_and_return_conditional_losses_10396"])
#loc5506 = loc(fused["Identity:", "Identity@__inference_out_relu_layer_call_and_return_conditional_losses_10396"])
#loc5507 = loc(fused["Relu6:", "Relu6@__inference_out_relu_layer_call_and_return_conditional_losses_22812"])
#loc5508 = loc(fused["Identity:", "Identity@__inference_out_relu_layer_call_and_return_conditional_losses_22812"])
#loc5509 = loc(fused["PartitionedCall:", "PartitionedCall@__inference_out_relu_layer_call_fn_22807"])
#loc5510 = loc(fused["Identity:", "Identity@__inference_out_relu_layer_call_fn_22807"])
#loc5511 = loc(fused["ReadVariableOp:", "BiasAdd/ReadVariableOp@__inference_predictions_layer_call_and_return_conditional_losses_10410"])
#loc5512 = loc(fused["ReadVariableOp:", "MatMul/ReadVariableOp@__inference_predictions_layer_call_and_return_conditional_losses_10410"])
#loc5513 = loc(fused["MatMul:", "MatMul@__inference_predictions_layer_call_and_return_conditional_losses_10410"])
#loc5514 = loc(fused["BiasAdd:", "BiasAdd@__inference_predictions_layer_call_and_return_conditional_losses_10410"])
#loc5515 = loc(fused["Softmax:", "Softmax@__inference_predictions_layer_call_and_return_conditional_losses_10410"])
#loc5516 = loc(fused["NoOp:", "NoOp@__inference_predictions_layer_call_and_return_conditional_losses_10410"])
#loc5517 = loc(fused["Identity:", "Identity@__inference_predictions_layer_call_and_return_conditional_losses_10410"])
#loc5518 = loc(fused["ReadVariableOp:", "BiasAdd/ReadVariableOp@__inference_predictions_layer_call_and_return_conditional_losses_22843"])
#loc5519 = loc(fused["ReadVariableOp:", "MatMul/ReadVariableOp@__inference_predictions_layer_call_and_return_conditional_losses_22843"])
#loc5520 = loc(fused["MatMul:", "MatMul@__inference_predictions_layer_call_and_return_conditional_losses_22843"])
#loc5521 = loc(fused["BiasAdd:", "BiasAdd@__inference_predictions_layer_call_and_return_conditional_losses_22843"])
#loc5522 = loc(fused["Softmax:", "Softmax@__inference_predictions_layer_call_and_return_conditional_losses_22843"])
#loc5523 = loc(fused["NoOp:", "NoOp@__inference_predictions_layer_call_and_return_conditional_losses_22843"])
#loc5524 = loc(fused["Identity:", "Identity@__inference_predictions_layer_call_and_return_conditional_losses_22843"])
#loc5525 = loc(fused["StatefulPartitionedCall:", "StatefulPartitionedCall@__inference_predictions_layer_call_fn_22832"])
#loc5526 = loc(fused["NoOp:", "NoOp@__inference_predictions_layer_call_fn_22832"])
#loc5527 = loc(fused["Identity:", "Identity@__inference_predictions_layer_call_fn_22832"])
